
STM32MotorDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e94  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800501c  0800501c  0001501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005054  08005054  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005054  08005054  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005054  08005054  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005054  08005054  00015054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005058  08005058  00015058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800505c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000074  080050d0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080050d0  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016798  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029f5  00000000  00000000  0003683c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  00039238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b08  00000000  00000000  00039e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a850  00000000  00000000  0003a970  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e2b2  00000000  00000000  000551c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d234  00000000  00000000  00063472  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f06a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d8  00000000  00000000  000f0724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005004 	.word	0x08005004

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08005004 	.word	0x08005004

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_Init+0x28>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <HAL_Init+0x28>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a14:	2003      	movs	r0, #3
 8000a16:	f000 fdc1 	bl	800159c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f808 	bl	8000a30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a20:	f003 ff0a 	bl	8004838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <HAL_InitTick+0x54>)
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_InitTick+0x58>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fdd9 	bl	8001606 <HAL_SYSTICK_Config>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e00e      	b.n	8000a7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d80a      	bhi.n	8000a7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a64:	2200      	movs	r2, #0
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	f04f 30ff 	mov.w	r0, #4294967295
 8000a6c:	f000 fda1 	bl	80015b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <HAL_InitTick+0x5c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000a76:	2300      	movs	r3, #0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000004 	.word	0x20000004
 8000a8c:	20000000 	.word	0x20000000

08000a90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x20>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	461a      	mov	r2, r3
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_IncTick+0x24>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4413      	add	r3, r2
 8000aa0:	4a04      	ldr	r2, [pc, #16]	; (8000ab4 <HAL_IncTick+0x24>)
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000004 	.word	0x20000004
 8000ab4:	20000090 	.word	0x20000090

08000ab8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  return uwTick;  
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_GetTick+0x14>)
 8000abe:	681b      	ldr	r3, [r3, #0]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	20000090 	.word	0x20000090

08000ad0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b09c      	sub	sp, #112	; 0x70
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d101      	bne.n	8000af0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000aec:	2301      	movs	r3, #1
 8000aee:	e167      	b.n	8000dc0 <HAL_ADC_Init+0x2f0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	691b      	ldr	r3, [r3, #16]
 8000af4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	f003 0310 	and.w	r3, r3, #16
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d176      	bne.n	8000bf0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d152      	bne.n	8000bb0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f003 fcd7 	bl	80044d8 <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d13b      	bne.n	8000bb0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 fc03 	bl	8001344 <ADC_Disable>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b48:	f003 0310 	and.w	r3, r3, #16
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d12f      	bne.n	8000bb0 <HAL_ADC_Init+0xe0>
 8000b50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d12b      	bne.n	8000bb0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b60:	f023 0302 	bic.w	r3, r3, #2
 8000b64:	f043 0202 	orr.w	r2, r3, #2
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	689a      	ldr	r2, [r3, #8]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b7a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	689a      	ldr	r2, [r3, #8]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b8a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b8c:	4b8e      	ldr	r3, [pc, #568]	; (8000dc8 <HAL_ADC_Init+0x2f8>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a8e      	ldr	r2, [pc, #568]	; (8000dcc <HAL_ADC_Init+0x2fc>)
 8000b92:	fba2 2303 	umull	r2, r3, r2, r3
 8000b96:	0c9a      	lsrs	r2, r3, #18
 8000b98:	4613      	mov	r3, r2
 8000b9a:	009b      	lsls	r3, r3, #2
 8000b9c:	4413      	add	r3, r2
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000ba2:	e002      	b.n	8000baa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d1f9      	bne.n	8000ba4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d007      	beq.n	8000bce <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000bcc:	d110      	bne.n	8000bf0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f023 0312 	bic.w	r3, r3, #18
 8000bd6:	f043 0210 	orr.w	r2, r3, #16
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000be2:	f043 0201 	orr.w	r2, r3, #1
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
 8000bec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf4:	f003 0310 	and.w	r3, r3, #16
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	f040 80d4 	bne.w	8000da6 <HAL_ADC_Init+0x2d6>
 8000bfe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	f040 80cf 	bne.w	8000da6 <HAL_ADC_Init+0x2d6>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	f040 80c7 	bne.w	8000da6 <HAL_ADC_Init+0x2d6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000c20:	f043 0202 	orr.w	r2, r3, #2
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c28:	4b69      	ldr	r3, [pc, #420]	; (8000dd0 <HAL_ADC_Init+0x300>)
 8000c2a:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f003 0303 	and.w	r3, r3, #3
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d108      	bne.n	8000c50 <HAL_ADC_Init+0x180>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d101      	bne.n	8000c50 <HAL_ADC_Init+0x180>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e000      	b.n	8000c52 <HAL_ADC_Init+0x182>
 8000c50:	2300      	movs	r3, #0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d11c      	bne.n	8000c90 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c56:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d010      	beq.n	8000c7e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	689b      	ldr	r3, [r3, #8]
 8000c60:	f003 0303 	and.w	r3, r3, #3
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d107      	bne.n	8000c78 <HAL_ADC_Init+0x1a8>
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d101      	bne.n	8000c78 <HAL_ADC_Init+0x1a8>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <HAL_ADC_Init+0x1aa>
 8000c78:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d108      	bne.n	8000c90 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	431a      	orrs	r2, r3
 8000c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000c8e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	035b      	lsls	r3, r3, #13
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000c9a:	2a01      	cmp	r2, #1
 8000c9c:	d002      	beq.n	8000ca4 <HAL_ADC_Init+0x1d4>
 8000c9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ca2:	e000      	b.n	8000ca6 <HAL_ADC_Init+0x1d6>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	431a      	orrs	r2, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	431a      	orrs	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d11b      	bne.n	8000cfa <HAL_ADC_Init+0x22a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69db      	ldr	r3, [r3, #28]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d109      	bne.n	8000cde <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	045a      	lsls	r2, r3, #17
 8000cd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cda:	66bb      	str	r3, [r7, #104]	; 0x68
 8000cdc:	e00d      	b.n	8000cfa <HAL_ADC_Init+0x22a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000ce6:	f043 0220 	orr.w	r2, r3, #32
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cf2:	f043 0201 	orr.w	r2, r3, #1
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d007      	beq.n	8000d12 <HAL_ADC_Init+0x242>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d113      	bne.n	8000d48 <HAL_ADC_Init+0x278>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	68db      	ldr	r3, [r3, #12]
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	6812      	ldr	r2, [r2, #0]
 8000d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000d2e:	f023 0302 	bic.w	r3, r3, #2
 8000d32:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	039a      	lsls	r2, r3, #14
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4313      	orrs	r3, r2
 8000d42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000d44:	4313      	orrs	r3, r2
 8000d46:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	68da      	ldr	r2, [r3, #12]
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <HAL_ADC_Init+0x304>)
 8000d50:	4013      	ands	r3, r2
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	6812      	ldr	r2, [r2, #0]
 8000d56:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000d58:	430b      	orrs	r3, r1
 8000d5a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	691b      	ldr	r3, [r3, #16]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d10c      	bne.n	8000d7e <HAL_ADC_Init+0x2ae>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f023 010f 	bic.w	r1, r3, #15
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6a1b      	ldr	r3, [r3, #32]
 8000d72:	1e5a      	subs	r2, r3, #1
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d7c:	e007      	b.n	8000d8e <HAL_ADC_Init+0x2be>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f022 020f 	bic.w	r2, r2, #15
 8000d8c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d98:	f023 0303 	bic.w	r3, r3, #3
 8000d9c:	f043 0201 	orr.w	r2, r3, #1
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	645a      	str	r2, [r3, #68]	; 0x44
 8000da4:	e00a      	b.n	8000dbc <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000daa:	f023 0312 	bic.w	r3, r3, #18
 8000dae:	f043 0210 	orr.w	r2, r3, #16
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000db6:	2301      	movs	r3, #1
 8000db8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000dbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3770      	adds	r7, #112	; 0x70
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	431bde83 	.word	0x431bde83
 8000dd0:	50000300 	.word	0x50000300
 8000dd4:	fff0c007 	.word	0xfff0c007

08000dd8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b09d      	sub	sp, #116	; 0x74
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de2:	2300      	movs	r3, #0
 8000de4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d101      	bne.n	8000dfa <HAL_ADC_ConfigChannel+0x22>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e299      	b.n	800132e <HAL_ADC_ConfigChannel+0x556>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f040 827d 	bne.w	800130c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	d81c      	bhi.n	8000e54 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685a      	ldr	r2, [r3, #4]
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	231f      	movs	r3, #31
 8000e30:	4093      	lsls	r3, r2
 8000e32:	43db      	mvns	r3, r3
 8000e34:	4019      	ands	r1, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	6818      	ldr	r0, [r3, #0]
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	4413      	add	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	fa00 f203 	lsl.w	r2, r0, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	631a      	str	r2, [r3, #48]	; 0x30
 8000e52:	e063      	b.n	8000f1c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	2b09      	cmp	r3, #9
 8000e5a:	d81e      	bhi.n	8000e9a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	3b1e      	subs	r3, #30
 8000e70:	221f      	movs	r2, #31
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	4019      	ands	r1, r3
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	4413      	add	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	3b1e      	subs	r3, #30
 8000e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	430a      	orrs	r2, r1
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34
 8000e98:	e040      	b.n	8000f1c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b0e      	cmp	r3, #14
 8000ea0:	d81e      	bhi.n	8000ee0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	4613      	mov	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	4413      	add	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	3b3c      	subs	r3, #60	; 0x3c
 8000eb6:	221f      	movs	r2, #31
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	4019      	ands	r1, r3
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	3b3c      	subs	r3, #60	; 0x3c
 8000ed2:	fa00 f203 	lsl.w	r2, r0, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	430a      	orrs	r2, r1
 8000edc:	639a      	str	r2, [r3, #56]	; 0x38
 8000ede:	e01d      	b.n	8000f1c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	4613      	mov	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	3b5a      	subs	r3, #90	; 0x5a
 8000ef4:	221f      	movs	r2, #31
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	4019      	ands	r1, r3
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	6818      	ldr	r0, [r3, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	4613      	mov	r3, r2
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	4413      	add	r3, r2
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	3b5a      	subs	r3, #90	; 0x5a
 8000f10:	fa00 f203 	lsl.w	r2, r0, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689b      	ldr	r3, [r3, #8]
 8000f22:	f003 030c 	and.w	r3, r3, #12
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f040 80e5 	bne.w	80010f6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2b09      	cmp	r3, #9
 8000f32:	d91c      	bls.n	8000f6e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6999      	ldr	r1, [r3, #24]
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	4413      	add	r3, r2
 8000f44:	3b1e      	subs	r3, #30
 8000f46:	2207      	movs	r2, #7
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	4019      	ands	r1, r3
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	6898      	ldr	r0, [r3, #8]
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4613      	mov	r3, r2
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3b1e      	subs	r3, #30
 8000f60:	fa00 f203 	lsl.w	r2, r0, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	619a      	str	r2, [r3, #24]
 8000f6c:	e019      	b.n	8000fa2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6959      	ldr	r1, [r3, #20]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	4413      	add	r3, r2
 8000f7e:	2207      	movs	r2, #7
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	43db      	mvns	r3, r3
 8000f86:	4019      	ands	r1, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	6898      	ldr	r0, [r3, #8]
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4613      	mov	r3, r2
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	4413      	add	r3, r2
 8000f96:	fa00 f203 	lsl.w	r2, r0, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	695a      	ldr	r2, [r3, #20]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	08db      	lsrs	r3, r3, #3
 8000fae:	f003 0303 	and.w	r3, r3, #3
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	2b03      	cmp	r3, #3
 8000fc2:	d84f      	bhi.n	8001064 <HAL_ADC_ConfigChannel+0x28c>
 8000fc4:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <HAL_ADC_ConfigChannel+0x1f4>)
 8000fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fca:	bf00      	nop
 8000fcc:	08000fdd 	.word	0x08000fdd
 8000fd0:	08000fff 	.word	0x08000fff
 8000fd4:	08001021 	.word	0x08001021
 8000fd8:	08001043 	.word	0x08001043
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000fe2:	4b99      	ldr	r3, [pc, #612]	; (8001248 <HAL_ADC_ConfigChannel+0x470>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	683a      	ldr	r2, [r7, #0]
 8000fe8:	6812      	ldr	r2, [r2, #0]
 8000fea:	0691      	lsls	r1, r2, #26
 8000fec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fee:	430a      	orrs	r2, r1
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ffa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000ffc:	e07e      	b.n	80010fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001004:	4b90      	ldr	r3, [pc, #576]	; (8001248 <HAL_ADC_ConfigChannel+0x470>)
 8001006:	4013      	ands	r3, r2
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	6812      	ldr	r2, [r2, #0]
 800100c:	0691      	lsls	r1, r2, #26
 800100e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001010:	430a      	orrs	r2, r1
 8001012:	431a      	orrs	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800101c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800101e:	e06d      	b.n	80010fc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001026:	4b88      	ldr	r3, [pc, #544]	; (8001248 <HAL_ADC_ConfigChannel+0x470>)
 8001028:	4013      	ands	r3, r2
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	6812      	ldr	r2, [r2, #0]
 800102e:	0691      	lsls	r1, r2, #26
 8001030:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001032:	430a      	orrs	r2, r1
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800103e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001040:	e05c      	b.n	80010fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001048:	4b7f      	ldr	r3, [pc, #508]	; (8001248 <HAL_ADC_ConfigChannel+0x470>)
 800104a:	4013      	ands	r3, r2
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	6812      	ldr	r2, [r2, #0]
 8001050:	0691      	lsls	r1, r2, #26
 8001052:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001054:	430a      	orrs	r2, r1
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001060:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001062:	e04b      	b.n	80010fc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	069b      	lsls	r3, r3, #26
 8001074:	429a      	cmp	r2, r3
 8001076:	d107      	bne.n	8001088 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001086:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800108e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	069b      	lsls	r3, r3, #26
 8001098:	429a      	cmp	r2, r3
 800109a:	d107      	bne.n	80010ac <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010aa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80010b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	069b      	lsls	r3, r3, #26
 80010bc:	429a      	cmp	r2, r3
 80010be:	d107      	bne.n	80010d0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010ce:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80010d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	069b      	lsls	r3, r3, #26
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d10a      	bne.n	80010fa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80010f2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80010f4:	e001      	b.n	80010fa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80010f6:	bf00      	nop
 80010f8:	e000      	b.n	80010fc <HAL_ADC_ConfigChannel+0x324>
      break;
 80010fa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	2b01      	cmp	r3, #1
 8001108:	d108      	bne.n	800111c <HAL_ADC_ConfigChannel+0x344>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	2b01      	cmp	r3, #1
 8001116:	d101      	bne.n	800111c <HAL_ADC_ConfigChannel+0x344>
 8001118:	2301      	movs	r3, #1
 800111a:	e000      	b.n	800111e <HAL_ADC_ConfigChannel+0x346>
 800111c:	2300      	movs	r3, #0
 800111e:	2b00      	cmp	r3, #0
 8001120:	f040 80ff 	bne.w	8001322 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d00f      	beq.n	800114c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2201      	movs	r2, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	400a      	ands	r2, r1
 8001146:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800114a:	e049      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2201      	movs	r2, #1
 800115a:	409a      	lsls	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	2b09      	cmp	r3, #9
 800116c:	d91c      	bls.n	80011a8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6999      	ldr	r1, [r3, #24]
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	3b1b      	subs	r3, #27
 8001180:	2207      	movs	r2, #7
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	4019      	ands	r1, r3
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	6898      	ldr	r0, [r3, #8]
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4613      	mov	r3, r2
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	4413      	add	r3, r2
 8001198:	3b1b      	subs	r3, #27
 800119a:	fa00 f203 	lsl.w	r2, r0, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	619a      	str	r2, [r3, #24]
 80011a6:	e01b      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	6959      	ldr	r1, [r3, #20]
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	1c5a      	adds	r2, r3, #1
 80011b4:	4613      	mov	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	2207      	movs	r2, #7
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	4019      	ands	r1, r3
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	6898      	ldr	r0, [r3, #8]
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1c5a      	adds	r2, r3, #1
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	fa00 f203 	lsl.w	r2, r0, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	430a      	orrs	r2, r1
 80011de:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011e0:	4b1a      	ldr	r3, [pc, #104]	; (800124c <HAL_ADC_ConfigChannel+0x474>)
 80011e2:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b10      	cmp	r3, #16
 80011ea:	d105      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80011ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d014      	beq.n	8001222 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80011fc:	2b11      	cmp	r3, #17
 80011fe:	d105      	bne.n	800120c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001208:	2b00      	cmp	r3, #0
 800120a:	d00a      	beq.n	8001222 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001210:	2b12      	cmp	r3, #18
 8001212:	f040 8086 	bne.w	8001322 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001216:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800121e:	2b00      	cmp	r3, #0
 8001220:	d17f      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b01      	cmp	r3, #1
 8001232:	d10d      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x478>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b01      	cmp	r3, #1
 8001240:	d106      	bne.n	8001250 <HAL_ADC_ConfigChannel+0x478>
 8001242:	2301      	movs	r3, #1
 8001244:	e005      	b.n	8001252 <HAL_ADC_ConfigChannel+0x47a>
 8001246:	bf00      	nop
 8001248:	83fff000 	.word	0x83fff000
 800124c:	50000300 	.word	0x50000300
 8001250:	2300      	movs	r3, #0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d150      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001256:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001258:	2b00      	cmp	r3, #0
 800125a:	d010      	beq.n	800127e <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d107      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x4a0>
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_ADC_ConfigChannel+0x4a0>
 8001274:	2301      	movs	r3, #1
 8001276:	e000      	b.n	800127a <HAL_ADC_ConfigChannel+0x4a2>
 8001278:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800127a:	2b00      	cmp	r3, #0
 800127c:	d13c      	bne.n	80012f8 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b10      	cmp	r3, #16
 8001284:	d11d      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x4ea>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800128e:	d118      	bne.n	80012c2 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001298:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800129a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800129c:	4b27      	ldr	r3, [pc, #156]	; (800133c <HAL_ADC_ConfigChannel+0x564>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a27      	ldr	r2, [pc, #156]	; (8001340 <HAL_ADC_ConfigChannel+0x568>)
 80012a2:	fba2 2303 	umull	r2, r3, r2, r3
 80012a6:	0c9a      	lsrs	r2, r3, #18
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80012b2:	e002      	b.n	80012ba <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f9      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012c0:	e02e      	b.n	8001320 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2b11      	cmp	r3, #17
 80012c8:	d10b      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x50a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012d2:	d106      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80012d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80012dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012de:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012e0:	e01e      	b.n	8001320 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b12      	cmp	r3, #18
 80012e8:	d11a      	bne.n	8001320 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80012ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80012f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80012f4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012f6:	e013      	b.n	8001320 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fc:	f043 0220 	orr.w	r2, r3, #32
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800130a:	e00a      	b.n	8001322 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001310:	f043 0220 	orr.w	r2, r3, #32
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800131e:	e000      	b.n	8001322 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001320:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 800132a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800132e:	4618      	mov	r0, r3
 8001330:	3774      	adds	r7, #116	; 0x74
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000008 	.word	0x20000008
 8001340:	431bde83 	.word	0x431bde83

08001344 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 0303 	and.w	r3, r3, #3
 800135a:	2b01      	cmp	r3, #1
 800135c:	d108      	bne.n	8001370 <ADC_Disable+0x2c>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <ADC_Disable+0x2c>
 800136c:	2301      	movs	r3, #1
 800136e:	e000      	b.n	8001372 <ADC_Disable+0x2e>
 8001370:	2300      	movs	r3, #0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d040      	beq.n	80013f8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	f003 030d 	and.w	r3, r3, #13
 8001380:	2b01      	cmp	r3, #1
 8001382:	d10f      	bne.n	80013a4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f042 0202 	orr.w	r2, r2, #2
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2203      	movs	r2, #3
 800139a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800139c:	f7ff fb8c 	bl	8000ab8 <HAL_GetTick>
 80013a0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80013a2:	e022      	b.n	80013ea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a8:	f043 0210 	orr.w	r2, r3, #16
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b4:	f043 0201 	orr.w	r2, r3, #1
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e01c      	b.n	80013fa <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80013c0:	f7ff fb7a 	bl	8000ab8 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d90d      	bls.n	80013ea <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f043 0210 	orr.w	r2, r3, #16
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013de:	f043 0201 	orr.w	r2, r3, #1
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e007      	b.n	80013fa <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d0e3      	beq.n	80013c0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f003 021f 	and.w	r2, r3, #31
 8001478:	4907      	ldr	r1, [pc, #28]	; (8001498 <NVIC_EnableIRQ+0x30>)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	2001      	movs	r0, #1
 8001482:	fa00 f202 	lsl.w	r2, r0, r2
 8001486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000e100 	.word	0xe000e100

0800149c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80014a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	da0b      	bge.n	80014c8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	490c      	ldr	r1, [pc, #48]	; (80014e8 <NVIC_SetPriority+0x4c>)
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 030f 	and.w	r3, r3, #15
 80014bc:	3b04      	subs	r3, #4
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c6:	e009      	b.n	80014dc <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	4907      	ldr	r1, [pc, #28]	; (80014ec <NVIC_SetPriority+0x50>)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	0112      	lsls	r2, r2, #4
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014dc:	bf00      	nop
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00
 80014ec:	e000e100 	.word	0xe000e100

080014f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b089      	sub	sp, #36	; 0x24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	f1c3 0307 	rsb	r3, r3, #7
 800150a:	2b04      	cmp	r3, #4
 800150c:	bf28      	it	cs
 800150e:	2304      	movcs	r3, #4
 8001510:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3304      	adds	r3, #4
 8001516:	2b06      	cmp	r3, #6
 8001518:	d902      	bls.n	8001520 <NVIC_EncodePriority+0x30>
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3b03      	subs	r3, #3
 800151e:	e000      	b.n	8001522 <NVIC_EncodePriority+0x32>
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	f04f 32ff 	mov.w	r2, #4294967295
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43da      	mvns	r2, r3
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	401a      	ands	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001538:	f04f 31ff 	mov.w	r1, #4294967295
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	fa01 f303 	lsl.w	r3, r1, r3
 8001542:	43d9      	mvns	r1, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	4313      	orrs	r3, r2
         );
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3b01      	subs	r3, #1
 8001564:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001568:	d301      	bcc.n	800156e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156a:	2301      	movs	r3, #1
 800156c:	e00f      	b.n	800158e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800156e:	4a0a      	ldr	r2, [pc, #40]	; (8001598 <SysTick_Config+0x40>)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3b01      	subs	r3, #1
 8001574:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001576:	210f      	movs	r1, #15
 8001578:	f04f 30ff 	mov.w	r0, #4294967295
 800157c:	f7ff ff8e 	bl	800149c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <SysTick_Config+0x40>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001586:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SysTick_Config+0x40>)
 8001588:	2207      	movs	r2, #7
 800158a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	e000e010 	.word	0xe000e010

0800159c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ff2d 	bl	8001404 <NVIC_SetPriorityGrouping>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b086      	sub	sp, #24
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
 80015be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c4:	f7ff ff42 	bl	800144c <NVIC_GetPriorityGrouping>
 80015c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff ff8e 	bl	80014f0 <NVIC_EncodePriority>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5d 	bl	800149c <NVIC_SetPriority>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff35 	bl	8001468 <NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ffa2 	bl	8001558 <SysTick_Config>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d101      	bne.n	8001630 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e014      	b.n	800165a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	791b      	ldrb	r3, [r3, #4]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d105      	bne.n	8001646 <HAL_DAC_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f002 ffc9 	bl	80045d8 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2202      	movs	r2, #2
 800164a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001688:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800168c:	d120      	bne.n	80016d0 <HAL_DAC_IRQHandler+0x5a>
  {  
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800169c:	d118      	bne.n	80016d0 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2204      	movs	r2, #4
 80016a2:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	f043 0201 	orr.w	r2, r3, #1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016c8:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ffc9 	bl	8001662 <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	2300      	movs	r3, #0
 80016ea:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	795b      	ldrb	r3, [r3, #5]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_DAC_ConfigChannel+0x20>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e036      	b.n	8001766 <HAL_DAC_ConfigChannel+0x8e>
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2201      	movs	r2, #1
 80016fc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2202      	movs	r2, #2
 8001702:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800170c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	4013      	ands	r3, r2
 800171c:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4313      	orrs	r3, r2
 8001736:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6819      	ldr	r1, [r3, #0]
 8001746:	22c0      	movs	r2, #192	; 0xc0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	400a      	ands	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2201      	movs	r2, #1
 800175c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	371c      	adds	r7, #28
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800178a:	e14e      	b.n	8001a2a <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	2101      	movs	r1, #1
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	4013      	ands	r3, r2
 800179a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f000 8140 	beq.w	8001a24 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d003      	beq.n	80017b4 <HAL_GPIO_Init+0x40>
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b12      	cmp	r3, #18
 80017b2:	d123      	bne.n	80017fc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	220f      	movs	r2, #15
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	691a      	ldr	r2, [r3, #16]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	08da      	lsrs	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3208      	adds	r2, #8
 80017f6:	6939      	ldr	r1, [r7, #16]
 80017f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4013      	ands	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0203 	and.w	r2, r3, #3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d00b      	beq.n	8001850 <HAL_GPIO_Init+0xdc>
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d007      	beq.n	8001850 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001844:	2b11      	cmp	r3, #17
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b12      	cmp	r3, #18
 800184e:	d130      	bne.n	80018b2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	693a      	ldr	r2, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001886:	2201      	movs	r2, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43db      	mvns	r3, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	091b      	lsrs	r3, r3, #4
 800189c:	f003 0201 	and.w	r2, r3, #1
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	2203      	movs	r2, #3
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	4013      	ands	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 809a 	beq.w	8001a24 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f0:	4b55      	ldr	r3, [pc, #340]	; (8001a48 <HAL_GPIO_Init+0x2d4>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	4a54      	ldr	r2, [pc, #336]	; (8001a48 <HAL_GPIO_Init+0x2d4>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6193      	str	r3, [r2, #24]
 80018fc:	4b52      	ldr	r3, [pc, #328]	; (8001a48 <HAL_GPIO_Init+0x2d4>)
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001908:	4a50      	ldr	r2, [pc, #320]	; (8001a4c <HAL_GPIO_Init+0x2d8>)
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	089b      	lsrs	r3, r3, #2
 800190e:	3302      	adds	r3, #2
 8001910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001914:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	220f      	movs	r2, #15
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001932:	d013      	beq.n	800195c <HAL_GPIO_Init+0x1e8>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a46      	ldr	r2, [pc, #280]	; (8001a50 <HAL_GPIO_Init+0x2dc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d00d      	beq.n	8001958 <HAL_GPIO_Init+0x1e4>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	4a45      	ldr	r2, [pc, #276]	; (8001a54 <HAL_GPIO_Init+0x2e0>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d007      	beq.n	8001954 <HAL_GPIO_Init+0x1e0>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4a44      	ldr	r2, [pc, #272]	; (8001a58 <HAL_GPIO_Init+0x2e4>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d101      	bne.n	8001950 <HAL_GPIO_Init+0x1dc>
 800194c:	2303      	movs	r3, #3
 800194e:	e006      	b.n	800195e <HAL_GPIO_Init+0x1ea>
 8001950:	2305      	movs	r3, #5
 8001952:	e004      	b.n	800195e <HAL_GPIO_Init+0x1ea>
 8001954:	2302      	movs	r3, #2
 8001956:	e002      	b.n	800195e <HAL_GPIO_Init+0x1ea>
 8001958:	2301      	movs	r3, #1
 800195a:	e000      	b.n	800195e <HAL_GPIO_Init+0x1ea>
 800195c:	2300      	movs	r3, #0
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	f002 0203 	and.w	r2, r2, #3
 8001964:	0092      	lsls	r2, r2, #2
 8001966:	4093      	lsls	r3, r2
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800196e:	4937      	ldr	r1, [pc, #220]	; (8001a4c <HAL_GPIO_Init+0x2d8>)
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	089b      	lsrs	r3, r3, #2
 8001974:	3302      	adds	r3, #2
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800197c:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80019a0:	4a2e      	ldr	r2, [pc, #184]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019a6:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019ca:	4a24      	ldr	r2, [pc, #144]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019d0:	4b22      	ldr	r3, [pc, #136]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <HAL_GPIO_Init+0x2e8>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3301      	adds	r3, #1
 8001a28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	fa22 f303 	lsr.w	r3, r2, r3
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f47f aea9 	bne.w	800178c <HAL_GPIO_Init+0x18>
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	371c      	adds	r7, #28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40010000 	.word	0x40010000
 8001a50:	48000400 	.word	0x48000400
 8001a54:	48000800 	.word	0x48000800
 8001a58:	48000c00 	.word	0x48000c00
 8001a5c:	40010400 	.word	0x40010400

08001a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	807b      	strh	r3, [r7, #2]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a70:	787b      	ldrb	r3, [r7, #1]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a7c:	e002      	b.n	8001a84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f000 beda 	b.w	800285e <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 816e 	beq.w	8001d96 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001aba:	4bb5      	ldr	r3, [pc, #724]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d00c      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ac6:	4bb2      	ldr	r3, [pc, #712]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d15a      	bne.n	8001b88 <HAL_RCC_OscConfig+0xf8>
 8001ad2:	4baf      	ldr	r3, [pc, #700]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ade:	d153      	bne.n	8001b88 <HAL_RCC_OscConfig+0xf8>
 8001ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001af4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d102      	bne.n	8001b12 <HAL_RCC_OscConfig+0x82>
 8001b0c:	4ba0      	ldr	r3, [pc, #640]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	e015      	b.n	8001b3e <HAL_RCC_OscConfig+0xae>
 8001b12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b16:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b1e:	fa93 f3a3 	rbit	r3, r3
 8001b22:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b2a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b2e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001b32:	fa93 f3a3 	rbit	r3, r3
 8001b36:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b3a:	4b95      	ldr	r3, [pc, #596]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b42:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001b46:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001b4a:	fa92 f2a2 	rbit	r2, r2
 8001b4e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001b52:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b56:	fab2 f282 	clz	r2, r2
 8001b5a:	b252      	sxtb	r2, r2
 8001b5c:	f042 0220 	orr.w	r2, r2, #32
 8001b60:	b252      	sxtb	r2, r2
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f002 021f 	and.w	r2, r2, #31
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 810f 	beq.w	8001d94 <HAL_RCC_OscConfig+0x304>
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f040 8109 	bne.w	8001d94 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f000 be6b 	b.w	800285e <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b92:	d106      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x112>
 8001b94:	4b7e      	ldr	r3, [pc, #504]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a7d      	ldr	r2, [pc, #500]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	e030      	b.n	8001c04 <HAL_RCC_OscConfig+0x174>
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10c      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x136>
 8001bac:	4b78      	ldr	r3, [pc, #480]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a77      	ldr	r2, [pc, #476]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001bb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb6:	6013      	str	r3, [r2, #0]
 8001bb8:	4b75      	ldr	r3, [pc, #468]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a74      	ldr	r2, [pc, #464]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001bbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	e01e      	b.n	8001c04 <HAL_RCC_OscConfig+0x174>
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x15c>
 8001bd2:	4b6f      	ldr	r3, [pc, #444]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a6e      	ldr	r2, [pc, #440]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b6c      	ldr	r3, [pc, #432]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a6b      	ldr	r2, [pc, #428]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0x174>
 8001bec:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a67      	ldr	r2, [pc, #412]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b65      	ldr	r3, [pc, #404]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a64      	ldr	r2, [pc, #400]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c02:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c04:	4b62      	ldr	r3, [pc, #392]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c08:	f023 020f 	bic.w	r2, r3, #15
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	495f      	ldr	r1, [pc, #380]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d05a      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c22:	f7fe ff49 	bl	8000ab8 <HAL_GetTick>
 8001c26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7fe ff44 	bl	8000ab8 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b64      	cmp	r3, #100	; 0x64
 8001c3a:	d902      	bls.n	8001c42 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	f000 be0e 	b.w	800285e <HAL_RCC_OscConfig+0xdce>
 8001c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c46:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001c4e:	fa93 f3a3 	rbit	r3, r3
 8001c52:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8001c56:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	095b      	lsrs	r3, r3, #5
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d102      	bne.n	8001c74 <HAL_RCC_OscConfig+0x1e4>
 8001c6e:	4b48      	ldr	r3, [pc, #288]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	e015      	b.n	8001ca0 <HAL_RCC_OscConfig+0x210>
 8001c74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c78:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001c80:	fa93 f3a3 	rbit	r3, r3
 8001c84:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001c88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c8c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c90:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c9c:	4b3c      	ldr	r3, [pc, #240]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ca4:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001ca8:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001cac:	fa92 f2a2 	rbit	r2, r2
 8001cb0:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001cb4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001cb8:	fab2 f282 	clz	r2, r2
 8001cbc:	b252      	sxtb	r2, r2
 8001cbe:	f042 0220 	orr.w	r2, r2, #32
 8001cc2:	b252      	sxtb	r2, r2
 8001cc4:	b2d2      	uxtb	r2, r2
 8001cc6:	f002 021f 	and.w	r2, r2, #31
 8001cca:	2101      	movs	r1, #1
 8001ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0aa      	beq.n	8001c2c <HAL_RCC_OscConfig+0x19c>
 8001cd6:	e05e      	b.n	8001d96 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7fe feee 	bl	8000ab8 <HAL_GetTick>
 8001cdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce0:	e00a      	b.n	8001cf8 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce2:	f7fe fee9 	bl	8000ab8 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d902      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	f000 bdb3 	b.w	800285e <HAL_RCC_OscConfig+0xdce>
 8001cf8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cfc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d00:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001d04:	fa93 f3a3 	rbit	r3, r3
 8001d08:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001d0c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	f043 0301 	orr.w	r3, r3, #1
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d102      	bne.n	8001d2a <HAL_RCC_OscConfig+0x29a>
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	e015      	b.n	8001d56 <HAL_RCC_OscConfig+0x2c6>
 8001d2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d42:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001d4a:	fa93 f3a3 	rbit	r3, r3
 8001d4e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <HAL_RCC_OscConfig+0x300>)
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d5a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001d5e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001d62:	fa92 f2a2 	rbit	r2, r2
 8001d66:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001d6a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d6e:	fab2 f282 	clz	r2, r2
 8001d72:	b252      	sxtb	r2, r2
 8001d74:	f042 0220 	orr.w	r2, r2, #32
 8001d78:	b252      	sxtb	r2, r2
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f002 021f 	and.w	r2, r2, #31
 8001d80:	2101      	movs	r1, #1
 8001d82:	fa01 f202 	lsl.w	r2, r1, r2
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1aa      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x252>
 8001d8c:	e003      	b.n	8001d96 <HAL_RCC_OscConfig+0x306>
 8001d8e:	bf00      	nop
 8001d90:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 8170 	beq.w	8002086 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001da6:	4bd0      	ldr	r3, [pc, #832]	; (80020e8 <HAL_RCC_OscConfig+0x658>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 030c 	and.w	r3, r3, #12
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00b      	beq.n	8001dca <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001db2:	4bcd      	ldr	r3, [pc, #820]	; (80020e8 <HAL_RCC_OscConfig+0x658>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 030c 	and.w	r3, r3, #12
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d16d      	bne.n	8001e9a <HAL_RCC_OscConfig+0x40a>
 8001dbe:	4bca      	ldr	r3, [pc, #808]	; (80020e8 <HAL_RCC_OscConfig+0x658>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d167      	bne.n	8001e9a <HAL_RCC_OscConfig+0x40a>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001ddc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001de0:	fab3 f383 	clz	r3, r3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	f043 0301 	orr.w	r3, r3, #1
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d102      	bne.n	8001dfa <HAL_RCC_OscConfig+0x36a>
 8001df4:	4bbc      	ldr	r3, [pc, #752]	; (80020e8 <HAL_RCC_OscConfig+0x658>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	e013      	b.n	8001e22 <HAL_RCC_OscConfig+0x392>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e12:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e1e:	4bb2      	ldr	r3, [pc, #712]	; (80020e8 <HAL_RCC_OscConfig+0x658>)
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	2202      	movs	r2, #2
 8001e24:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001e28:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e2c:	fa92 f2a2 	rbit	r2, r2
 8001e30:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001e34:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e38:	fab2 f282 	clz	r2, r2
 8001e3c:	b252      	sxtb	r2, r2
 8001e3e:	f042 0220 	orr.w	r2, r2, #32
 8001e42:	b252      	sxtb	r2, r2
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	f002 021f 	and.w	r2, r2, #31
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e50:	4013      	ands	r3, r2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d007      	beq.n	8001e66 <HAL_RCC_OscConfig+0x3d6>
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d002      	beq.n	8001e66 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	f000 bcfc 	b.w	800285e <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e66:	4ba0      	ldr	r3, [pc, #640]	; (80020e8 <HAL_RCC_OscConfig+0x658>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6959      	ldr	r1, [r3, #20]
 8001e74:	23f8      	movs	r3, #248	; 0xf8
 8001e76:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001e86:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e92:	4995      	ldr	r1, [pc, #596]	; (80020e8 <HAL_RCC_OscConfig+0x658>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e98:	e0f5      	b.n	8002086 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	f000 8085 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x520>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001eb8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ec4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	461a      	mov	r2, r3
 8001ecc:	2301      	movs	r3, #1
 8001ece:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed0:	f7fe fdf2 	bl	8000ab8 <HAL_GetTick>
 8001ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed8:	e00a      	b.n	8001ef0 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eda:	f7fe fded 	bl	8000ab8 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d902      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	f000 bcb7 	b.w	800285e <HAL_RCC_OscConfig+0xdce>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8001f02:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f06:	fab3 f383 	clz	r3, r3
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	095b      	lsrs	r3, r3, #5
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d102      	bne.n	8001f20 <HAL_RCC_OscConfig+0x490>
 8001f1a:	4b73      	ldr	r3, [pc, #460]	; (80020e8 <HAL_RCC_OscConfig+0x658>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	e013      	b.n	8001f48 <HAL_RCC_OscConfig+0x4b8>
 8001f20:	2302      	movs	r3, #2
 8001f22:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f26:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001f32:	2302      	movs	r3, #2
 8001f34:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f38:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f44:	4b68      	ldr	r3, [pc, #416]	; (80020e8 <HAL_RCC_OscConfig+0x658>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	2202      	movs	r2, #2
 8001f4a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001f4e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f52:	fa92 f2a2 	rbit	r2, r2
 8001f56:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001f5a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f5e:	fab2 f282 	clz	r2, r2
 8001f62:	b252      	sxtb	r2, r2
 8001f64:	f042 0220 	orr.w	r2, r2, #32
 8001f68:	b252      	sxtb	r2, r2
 8001f6a:	b2d2      	uxtb	r2, r2
 8001f6c:	f002 021f 	and.w	r2, r2, #31
 8001f70:	2101      	movs	r1, #1
 8001f72:	fa01 f202 	lsl.w	r2, r1, r2
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0ae      	beq.n	8001eda <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	4b5a      	ldr	r3, [pc, #360]	; (80020e8 <HAL_RCC_OscConfig+0x658>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f84:	1d3b      	adds	r3, r7, #4
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6959      	ldr	r1, [r3, #20]
 8001f8a:	23f8      	movs	r3, #248	; 0xf8
 8001f8c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001f94:	fa93 f3a3 	rbit	r3, r3
 8001f98:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001f9c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	494f      	ldr	r1, [pc, #316]	; (80020e8 <HAL_RCC_OscConfig+0x658>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
 8001fae:	e06a      	b.n	8002086 <HAL_RCC_OscConfig+0x5f6>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001fc2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7fe fd6d 	bl	8000ab8 <HAL_GetTick>
 8001fde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7fe fd68 	bl	8000ab8 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d902      	bls.n	8001ffa <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	f000 bc32 	b.w	800285e <HAL_RCC_OscConfig+0xdce>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002000:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002004:	fa93 f3a3 	rbit	r3, r3
 8002008:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 800200c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	095b      	lsrs	r3, r3, #5
 8002018:	b2db      	uxtb	r3, r3
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d102      	bne.n	800202a <HAL_RCC_OscConfig+0x59a>
 8002024:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <HAL_RCC_OscConfig+0x658>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	e013      	b.n	8002052 <HAL_RCC_OscConfig+0x5c2>
 800202a:	2302      	movs	r3, #2
 800202c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800203c:	2302      	movs	r3, #2
 800203e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002042:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800204e:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_RCC_OscConfig+0x658>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	2202      	movs	r2, #2
 8002054:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002058:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800205c:	fa92 f2a2 	rbit	r2, r2
 8002060:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8002064:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002068:	fab2 f282 	clz	r2, r2
 800206c:	b252      	sxtb	r2, r2
 800206e:	f042 0220 	orr.w	r2, r2, #32
 8002072:	b252      	sxtb	r2, r2
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f002 021f 	and.w	r2, r2, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f202 	lsl.w	r2, r1, r2
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ae      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80d8 	beq.w	8002246 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d067      	beq.n	8002170 <HAL_RCC_OscConfig+0x6e0>
 80020a0:	2301      	movs	r3, #1
 80020a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 80020b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	4b0b      	ldr	r3, [pc, #44]	; (80020ec <HAL_RCC_OscConfig+0x65c>)
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	461a      	mov	r2, r3
 80020c4:	2301      	movs	r3, #1
 80020c6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c8:	f7fe fcf6 	bl	8000ab8 <HAL_GetTick>
 80020cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d0:	e00e      	b.n	80020f0 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d2:	f7fe fcf1 	bl	8000ab8 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d906      	bls.n	80020f0 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e3bb      	b.n	800285e <HAL_RCC_OscConfig+0xdce>
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	10908120 	.word	0x10908120
 80020f0:	2302      	movs	r3, #2
 80020f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002102:	2302      	movs	r3, #2
 8002104:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800210c:	fa93 f2a3 	rbit	r2, r3
 8002110:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800211a:	2202      	movs	r2, #2
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800212c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	4ba5      	ldr	r3, [pc, #660]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 8002130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002132:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002136:	2102      	movs	r1, #2
 8002138:	6019      	str	r1, [r3, #0]
 800213a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	fa93 f1a3 	rbit	r1, r3
 8002144:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002148:	6019      	str	r1, [r3, #0]
  return(result);
 800214a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	fab3 f383 	clz	r3, r3
 8002154:	b25b      	sxtb	r3, r3
 8002156:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800215a:	b25b      	sxtb	r3, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	2101      	movs	r1, #1
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	4013      	ands	r3, r2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0b1      	beq.n	80020d2 <HAL_RCC_OscConfig+0x642>
 800216e:	e06a      	b.n	8002246 <HAL_RCC_OscConfig+0x7b6>
 8002170:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002174:	2201      	movs	r2, #1
 8002176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002178:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	fa93 f2a3 	rbit	r2, r3
 8002182:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002186:	601a      	str	r2, [r3, #0]
  return(result);
 8002188:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800218c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800218e:	fab3 f383 	clz	r3, r3
 8002192:	461a      	mov	r2, r3
 8002194:	4b8c      	ldr	r3, [pc, #560]	; (80023c8 <HAL_RCC_OscConfig+0x938>)
 8002196:	4413      	add	r3, r2
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	461a      	mov	r2, r3
 800219c:	2300      	movs	r3, #0
 800219e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7fe fc8a 	bl	8000ab8 <HAL_GetTick>
 80021a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a8:	e009      	b.n	80021be <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021aa:	f7fe fc85 	bl	8000ab8 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e34f      	b.n	800285e <HAL_RCC_OscConfig+0xdce>
 80021be:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021c2:	2202      	movs	r2, #2
 80021c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fa93 f2a3 	rbit	r2, r3
 80021d0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021da:	2202      	movs	r2, #2
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	fa93 f2a3 	rbit	r2, r3
 80021e8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021f2:	2202      	movs	r2, #2
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	fa93 f2a3 	rbit	r2, r3
 8002200:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002204:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002206:	4b6f      	ldr	r3, [pc, #444]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 8002208:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800220a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800220e:	2102      	movs	r1, #2
 8002210:	6019      	str	r1, [r3, #0]
 8002212:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f1a3 	rbit	r1, r3
 800221c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002220:	6019      	str	r1, [r3, #0]
  return(result);
 8002222:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b25b      	sxtb	r3, r3
 800222e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002232:	b25b      	sxtb	r3, r3
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	2101      	movs	r1, #1
 800223c:	fa01 f303 	lsl.w	r3, r1, r3
 8002240:	4013      	ands	r3, r2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1b1      	bne.n	80021aa <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 8159 	beq.w	8002508 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002256:	2300      	movs	r3, #0
 8002258:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225c:	4b59      	ldr	r3, [pc, #356]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d112      	bne.n	800228e <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002268:	4b56      	ldr	r3, [pc, #344]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	4a55      	ldr	r2, [pc, #340]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 800226e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002272:	61d3      	str	r3, [r2, #28]
 8002274:	4b53      	ldr	r3, [pc, #332]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800227c:	f107 030c 	add.w	r3, r7, #12
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002288:	2301      	movs	r3, #1
 800228a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228e:	4b4f      	ldr	r3, [pc, #316]	; (80023cc <HAL_RCC_OscConfig+0x93c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002296:	2b00      	cmp	r3, #0
 8002298:	d11a      	bne.n	80022d0 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800229a:	4b4c      	ldr	r3, [pc, #304]	; (80023cc <HAL_RCC_OscConfig+0x93c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a4b      	ldr	r2, [pc, #300]	; (80023cc <HAL_RCC_OscConfig+0x93c>)
 80022a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a6:	f7fe fc07 	bl	8000ab8 <HAL_GetTick>
 80022aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ae:	e009      	b.n	80022c4 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022b0:	f7fe fc02 	bl	8000ab8 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	; 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e2cc      	b.n	800285e <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c4:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_RCC_OscConfig+0x93c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0ef      	beq.n	80022b0 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d106      	bne.n	80022e8 <HAL_RCC_OscConfig+0x858>
 80022da:	4b3a      	ldr	r3, [pc, #232]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a39      	ldr	r2, [pc, #228]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	6213      	str	r3, [r2, #32]
 80022e6:	e02f      	b.n	8002348 <HAL_RCC_OscConfig+0x8b8>
 80022e8:	1d3b      	adds	r3, r7, #4
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0x87c>
 80022f2:	4b34      	ldr	r3, [pc, #208]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a33      	ldr	r2, [pc, #204]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 80022f8:	f023 0301 	bic.w	r3, r3, #1
 80022fc:	6213      	str	r3, [r2, #32]
 80022fe:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 8002300:	6a1b      	ldr	r3, [r3, #32]
 8002302:	4a30      	ldr	r2, [pc, #192]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 8002304:	f023 0304 	bic.w	r3, r3, #4
 8002308:	6213      	str	r3, [r2, #32]
 800230a:	e01d      	b.n	8002348 <HAL_RCC_OscConfig+0x8b8>
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2b05      	cmp	r3, #5
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x8a0>
 8002316:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 8002318:	6a1b      	ldr	r3, [r3, #32]
 800231a:	4a2a      	ldr	r2, [pc, #168]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 800231c:	f043 0304 	orr.w	r3, r3, #4
 8002320:	6213      	str	r3, [r2, #32]
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a27      	ldr	r2, [pc, #156]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0x8b8>
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 8002336:	f023 0301 	bic.w	r3, r3, #1
 800233a:	6213      	str	r3, [r2, #32]
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	4a20      	ldr	r2, [pc, #128]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 8002342:	f023 0304 	bic.w	r3, r3, #4
 8002346:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d06b      	beq.n	800242a <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002352:	f7fe fbb1 	bl	8000ab8 <HAL_GetTick>
 8002356:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800235c:	f7fe fbac 	bl	8000ab8 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	; 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e274      	b.n	800285e <HAL_RCC_OscConfig+0xdce>
 8002374:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002378:	2202      	movs	r2, #2
 800237a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	fa93 f2a3 	rbit	r2, r3
 8002386:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002390:	2202      	movs	r2, #2
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	fa93 f2a3 	rbit	r2, r3
 800239e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023a2:	601a      	str	r2, [r3, #0]
  return(result);
 80023a4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80023a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	f043 0302 	orr.w	r3, r3, #2
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d108      	bne.n	80023d0 <HAL_RCC_OscConfig+0x940>
 80023be:	4b01      	ldr	r3, [pc, #4]	; (80023c4 <HAL_RCC_OscConfig+0x934>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	e013      	b.n	80023ec <HAL_RCC_OscConfig+0x95c>
 80023c4:	40021000 	.word	0x40021000
 80023c8:	10908120 	.word	0x10908120
 80023cc:	40007000 	.word	0x40007000
 80023d0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023d4:	2202      	movs	r2, #2
 80023d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	fa93 f2a3 	rbit	r2, r3
 80023e2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	4bbb      	ldr	r3, [pc, #748]	; (80026d8 <HAL_RCC_OscConfig+0xc48>)
 80023ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ec:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80023f0:	2102      	movs	r1, #2
 80023f2:	6011      	str	r1, [r2, #0]
 80023f4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	fa92 f1a2 	rbit	r1, r2
 80023fe:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002402:	6011      	str	r1, [r2, #0]
  return(result);
 8002404:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	fab2 f282 	clz	r2, r2
 800240e:	b252      	sxtb	r2, r2
 8002410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002414:	b252      	sxtb	r2, r2
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	f002 021f 	and.w	r2, r2, #31
 800241c:	2101      	movs	r1, #1
 800241e:	fa01 f202 	lsl.w	r2, r1, r2
 8002422:	4013      	ands	r3, r2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d099      	beq.n	800235c <HAL_RCC_OscConfig+0x8cc>
 8002428:	e064      	b.n	80024f4 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242a:	f7fe fb45 	bl	8000ab8 <HAL_GetTick>
 800242e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002432:	e00b      	b.n	800244c <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe fb40 	bl	8000ab8 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	f241 3288 	movw	r2, #5000	; 0x1388
 8002444:	4293      	cmp	r3, r2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e208      	b.n	800285e <HAL_RCC_OscConfig+0xdce>
 800244c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002450:	2202      	movs	r2, #2
 8002452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002454:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	fa93 f2a3 	rbit	r2, r3
 800245e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002468:	2202      	movs	r2, #2
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	fa93 f2a3 	rbit	r2, r3
 8002476:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800247a:	601a      	str	r2, [r3, #0]
  return(result);
 800247c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002480:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	b2db      	uxtb	r3, r3
 8002488:	095b      	lsrs	r3, r3, #5
 800248a:	b2db      	uxtb	r3, r3
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b02      	cmp	r3, #2
 8002494:	d102      	bne.n	800249c <HAL_RCC_OscConfig+0xa0c>
 8002496:	4b90      	ldr	r3, [pc, #576]	; (80026d8 <HAL_RCC_OscConfig+0xc48>)
 8002498:	6a1b      	ldr	r3, [r3, #32]
 800249a:	e00d      	b.n	80024b8 <HAL_RCC_OscConfig+0xa28>
 800249c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024a0:	2202      	movs	r2, #2
 80024a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	fa93 f2a3 	rbit	r2, r3
 80024ae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	4b88      	ldr	r3, [pc, #544]	; (80026d8 <HAL_RCC_OscConfig+0xc48>)
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024bc:	2102      	movs	r1, #2
 80024be:	6011      	str	r1, [r2, #0]
 80024c0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024c4:	6812      	ldr	r2, [r2, #0]
 80024c6:	fa92 f1a2 	rbit	r1, r2
 80024ca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024ce:	6011      	str	r1, [r2, #0]
  return(result);
 80024d0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	fab2 f282 	clz	r2, r2
 80024da:	b252      	sxtb	r2, r2
 80024dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024e0:	b252      	sxtb	r2, r2
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	f002 021f 	and.w	r2, r2, #31
 80024e8:	2101      	movs	r1, #1
 80024ea:	fa01 f202 	lsl.w	r2, r1, r2
 80024ee:	4013      	ands	r3, r2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d19f      	bne.n	8002434 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024f4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d105      	bne.n	8002508 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fc:	4b76      	ldr	r3, [pc, #472]	; (80026d8 <HAL_RCC_OscConfig+0xc48>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	4a75      	ldr	r2, [pc, #468]	; (80026d8 <HAL_RCC_OscConfig+0xc48>)
 8002502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002506:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 81a4 	beq.w	800285c <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002514:	4b70      	ldr	r3, [pc, #448]	; (80026d8 <HAL_RCC_OscConfig+0xc48>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	f000 819b 	beq.w	8002858 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	2b02      	cmp	r3, #2
 800252a:	f040 8113 	bne.w	8002754 <HAL_RCC_OscConfig+0xcc4>
 800252e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002532:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002536:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fa93 f2a3 	rbit	r2, r3
 8002542:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002546:	601a      	str	r2, [r3, #0]
  return(result);
 8002548:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800254c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002556:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	461a      	mov	r2, r3
 800255e:	2300      	movs	r3, #0
 8002560:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002562:	f7fe faa9 	bl	8000ab8 <HAL_GetTick>
 8002566:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256a:	e009      	b.n	8002580 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800256c:	f7fe faa4 	bl	8000ab8 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e16e      	b.n	800285e <HAL_RCC_OscConfig+0xdce>
 8002580:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002584:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002588:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800258a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	fa93 f2a3 	rbit	r2, r3
 8002594:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002598:	601a      	str	r2, [r3, #0]
  return(result);
 800259a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800259e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	095b      	lsrs	r3, r3, #5
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d102      	bne.n	80025ba <HAL_RCC_OscConfig+0xb2a>
 80025b4:	4b48      	ldr	r3, [pc, #288]	; (80026d8 <HAL_RCC_OscConfig+0xc48>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	e01b      	b.n	80025f2 <HAL_RCC_OscConfig+0xb62>
 80025ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	fa93 f2a3 	rbit	r2, r3
 80025ce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	fa93 f2a3 	rbit	r2, r3
 80025e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	4b3a      	ldr	r3, [pc, #232]	; (80026d8 <HAL_RCC_OscConfig+0xc48>)
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80025f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025fa:	6011      	str	r1, [r2, #0]
 80025fc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	fa92 f1a2 	rbit	r1, r2
 8002606:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800260a:	6011      	str	r1, [r2, #0]
  return(result);
 800260c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	fab2 f282 	clz	r2, r2
 8002616:	b252      	sxtb	r2, r2
 8002618:	f042 0220 	orr.w	r2, r2, #32
 800261c:	b252      	sxtb	r2, r2
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	f002 021f 	and.w	r2, r2, #31
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f202 	lsl.w	r2, r1, r2
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d19d      	bne.n	800256c <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002630:	4b29      	ldr	r3, [pc, #164]	; (80026d8 <HAL_RCC_OscConfig+0xc48>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	430b      	orrs	r3, r1
 8002646:	4924      	ldr	r1, [pc, #144]	; (80026d8 <HAL_RCC_OscConfig+0xc48>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
 800264c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fa93 f2a3 	rbit	r2, r3
 8002660:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002664:	601a      	str	r2, [r3, #0]
  return(result);
 8002666:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800266a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002674:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	461a      	mov	r2, r3
 800267c:	2301      	movs	r3, #1
 800267e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002680:	f7fe fa1a 	bl	8000ab8 <HAL_GetTick>
 8002684:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002688:	e009      	b.n	800269e <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268a:	f7fe fa15 	bl	8000ab8 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0df      	b.n	800285e <HAL_RCC_OscConfig+0xdce>
 800269e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	fa93 f2a3 	rbit	r2, r3
 80026b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026b6:	601a      	str	r2, [r3, #0]
  return(result);
 80026b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f043 0301 	orr.w	r3, r3, #1
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d104      	bne.n	80026dc <HAL_RCC_OscConfig+0xc4c>
 80026d2:	4b01      	ldr	r3, [pc, #4]	; (80026d8 <HAL_RCC_OscConfig+0xc48>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	e01d      	b.n	8002714 <HAL_RCC_OscConfig+0xc84>
 80026d8:	40021000 	.word	0x40021000
 80026dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	fa93 f2a3 	rbit	r2, r3
 80026f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	fa93 f2a3 	rbit	r2, r3
 800270a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	4b55      	ldr	r3, [pc, #340]	; (8002868 <HAL_RCC_OscConfig+0xdd8>)
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002718:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800271c:	6011      	str	r1, [r2, #0]
 800271e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	fa92 f1a2 	rbit	r1, r2
 8002728:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800272c:	6011      	str	r1, [r2, #0]
  return(result);
 800272e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	fab2 f282 	clz	r2, r2
 8002738:	b252      	sxtb	r2, r2
 800273a:	f042 0220 	orr.w	r2, r2, #32
 800273e:	b252      	sxtb	r2, r2
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	f002 021f 	and.w	r2, r2, #31
 8002746:	2101      	movs	r1, #1
 8002748:	fa01 f202 	lsl.w	r2, r1, r2
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d09b      	beq.n	800268a <HAL_RCC_OscConfig+0xbfa>
 8002752:	e083      	b.n	800285c <HAL_RCC_OscConfig+0xdcc>
 8002754:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002758:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800275c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fa93 f2a3 	rbit	r2, r3
 8002768:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800276c:	601a      	str	r2, [r3, #0]
  return(result);
 800276e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002772:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800277c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	461a      	mov	r2, r3
 8002784:	2300      	movs	r3, #0
 8002786:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7fe f996 	bl	8000ab8 <HAL_GetTick>
 800278c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002790:	e009      	b.n	80027a6 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002792:	f7fe f991 	bl	8000ab8 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e05b      	b.n	800285e <HAL_RCC_OscConfig+0xdce>
 80027a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	fa93 f2a3 	rbit	r2, r3
 80027ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027be:	601a      	str	r2, [r3, #0]
  return(result);
 80027c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027c4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c6:	fab3 f383 	clz	r3, r3
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d102      	bne.n	80027e0 <HAL_RCC_OscConfig+0xd50>
 80027da:	4b23      	ldr	r3, [pc, #140]	; (8002868 <HAL_RCC_OscConfig+0xdd8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	e01b      	b.n	8002818 <HAL_RCC_OscConfig+0xd88>
 80027e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	fa93 f2a3 	rbit	r2, r3
 80027f4:	f107 0320 	add.w	r3, r7, #32
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	f107 031c 	add.w	r3, r7, #28
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f107 0318 	add.w	r3, r7, #24
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_RCC_OscConfig+0xdd8>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	f107 0214 	add.w	r2, r7, #20
 800281c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002820:	6011      	str	r1, [r2, #0]
 8002822:	f107 0214 	add.w	r2, r7, #20
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	fa92 f1a2 	rbit	r1, r2
 800282c:	f107 0210 	add.w	r2, r7, #16
 8002830:	6011      	str	r1, [r2, #0]
  return(result);
 8002832:	f107 0210 	add.w	r2, r7, #16
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	fab2 f282 	clz	r2, r2
 800283c:	b252      	sxtb	r2, r2
 800283e:	f042 0220 	orr.w	r2, r2, #32
 8002842:	b252      	sxtb	r2, r2
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	f002 021f 	and.w	r2, r2, #31
 800284a:	2101      	movs	r1, #1
 800284c:	fa01 f202 	lsl.w	r2, r1, r2
 8002850:	4013      	ands	r3, r2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d19d      	bne.n	8002792 <HAL_RCC_OscConfig+0xd02>
 8002856:	e001      	b.n	800285c <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40021000 	.word	0x40021000

0800286c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b09e      	sub	sp, #120	; 0x78
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002876:	2300      	movs	r3, #0
 8002878:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e164      	b.n	8002b4e <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002884:	4b92      	ldr	r3, [pc, #584]	; (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d910      	bls.n	80028b4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002892:	4b8f      	ldr	r3, [pc, #572]	; (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f023 0207 	bic.w	r2, r3, #7
 800289a:	498d      	ldr	r1, [pc, #564]	; (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	4313      	orrs	r3, r2
 80028a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b8b      	ldr	r3, [pc, #556]	; (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e14c      	b.n	8002b4e <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c0:	4b84      	ldr	r3, [pc, #528]	; (8002ad4 <HAL_RCC_ClockConfig+0x268>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4981      	ldr	r1, [pc, #516]	; (8002ad4 <HAL_RCC_ClockConfig+0x268>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80df 	beq.w	8002a9e <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d13d      	bne.n	8002964 <HAL_RCC_ClockConfig+0xf8>
 80028e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ec:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028f0:	fa93 f3a3 	rbit	r3, r3
 80028f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80028f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	095b      	lsrs	r3, r3, #5
 8002900:	b2db      	uxtb	r3, r3
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b01      	cmp	r3, #1
 800290a:	d102      	bne.n	8002912 <HAL_RCC_ClockConfig+0xa6>
 800290c:	4b71      	ldr	r3, [pc, #452]	; (8002ad4 <HAL_RCC_ClockConfig+0x268>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	e00f      	b.n	8002932 <HAL_RCC_ClockConfig+0xc6>
 8002912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002916:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800291a:	fa93 f3a3 	rbit	r3, r3
 800291e:	667b      	str	r3, [r7, #100]	; 0x64
 8002920:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002924:	663b      	str	r3, [r7, #96]	; 0x60
 8002926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800292e:	4b69      	ldr	r3, [pc, #420]	; (8002ad4 <HAL_RCC_ClockConfig+0x268>)
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002936:	65ba      	str	r2, [r7, #88]	; 0x58
 8002938:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800293a:	fa92 f2a2 	rbit	r2, r2
 800293e:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002940:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002942:	fab2 f282 	clz	r2, r2
 8002946:	b252      	sxtb	r2, r2
 8002948:	f042 0220 	orr.w	r2, r2, #32
 800294c:	b252      	sxtb	r2, r2
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	f002 021f 	and.w	r2, r2, #31
 8002954:	2101      	movs	r1, #1
 8002956:	fa01 f202 	lsl.w	r2, r1, r2
 800295a:	4013      	ands	r3, r2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d17d      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e0f4      	b.n	8002b4e <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d13d      	bne.n	80029e8 <HAL_RCC_ClockConfig+0x17c>
 800296c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002970:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002974:	fa93 f3a3 	rbit	r3, r3
 8002978:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800297a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297c:	fab3 f383 	clz	r3, r3
 8002980:	b2db      	uxtb	r3, r3
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d102      	bne.n	8002996 <HAL_RCC_ClockConfig+0x12a>
 8002990:	4b50      	ldr	r3, [pc, #320]	; (8002ad4 <HAL_RCC_ClockConfig+0x268>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	e00f      	b.n	80029b6 <HAL_RCC_ClockConfig+0x14a>
 8002996:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800299a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	647b      	str	r3, [r7, #68]	; 0x44
 80029a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029a8:	643b      	str	r3, [r7, #64]	; 0x40
 80029aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ac:	fa93 f3a3 	rbit	r3, r3
 80029b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029b2:	4b48      	ldr	r3, [pc, #288]	; (8002ad4 <HAL_RCC_ClockConfig+0x268>)
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029ba:	63ba      	str	r2, [r7, #56]	; 0x38
 80029bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029be:	fa92 f2a2 	rbit	r2, r2
 80029c2:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80029c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029c6:	fab2 f282 	clz	r2, r2
 80029ca:	b252      	sxtb	r2, r2
 80029cc:	f042 0220 	orr.w	r2, r2, #32
 80029d0:	b252      	sxtb	r2, r2
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	f002 021f 	and.w	r2, r2, #31
 80029d8:	2101      	movs	r1, #1
 80029da:	fa01 f202 	lsl.w	r2, r1, r2
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d13b      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e0b2      	b.n	8002b4e <HAL_RCC_ClockConfig+0x2e2>
 80029e8:	2302      	movs	r3, #2
 80029ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f6:	fab3 f383 	clz	r3, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d102      	bne.n	8002a10 <HAL_RCC_ClockConfig+0x1a4>
 8002a0a:	4b32      	ldr	r3, [pc, #200]	; (8002ad4 <HAL_RCC_ClockConfig+0x268>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	e00d      	b.n	8002a2c <HAL_RCC_ClockConfig+0x1c0>
 8002a10:	2302      	movs	r3, #2
 8002a12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	623b      	str	r3, [r7, #32]
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	4b2a      	ldr	r3, [pc, #168]	; (8002ad4 <HAL_RCC_ClockConfig+0x268>)
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	2202      	movs	r2, #2
 8002a2e:	61ba      	str	r2, [r7, #24]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	fa92 f2a2 	rbit	r2, r2
 8002a36:	617a      	str	r2, [r7, #20]
  return(result);
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	fab2 f282 	clz	r2, r2
 8002a3e:	b252      	sxtb	r2, r2
 8002a40:	f042 0220 	orr.w	r2, r2, #32
 8002a44:	b252      	sxtb	r2, r2
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	f002 021f 	and.w	r2, r2, #31
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e078      	b.n	8002b4e <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <HAL_RCC_ClockConfig+0x268>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f023 0203 	bic.w	r2, r3, #3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	491a      	ldr	r1, [pc, #104]	; (8002ad4 <HAL_RCC_ClockConfig+0x268>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a6e:	f7fe f823 	bl	8000ab8 <HAL_GetTick>
 8002a72:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a74:	e00a      	b.n	8002a8c <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a76:	f7fe f81f 	bl	8000ab8 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e060      	b.n	8002b4e <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <HAL_RCC_ClockConfig+0x268>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 020c 	and.w	r2, r3, #12
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d1eb      	bne.n	8002a76 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d215      	bcs.n	8002ad8 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aac:	4b08      	ldr	r3, [pc, #32]	; (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f023 0207 	bic.w	r2, r3, #7
 8002ab4:	4906      	ldr	r1, [pc, #24]	; (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <HAL_RCC_ClockConfig+0x264>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d006      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e03f      	b.n	8002b4e <HAL_RCC_ClockConfig+0x2e2>
 8002ace:	bf00      	nop
 8002ad0:	40022000 	.word	0x40022000
 8002ad4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae4:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <HAL_RCC_ClockConfig+0x2ec>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4919      	ldr	r1, [pc, #100]	; (8002b58 <HAL_RCC_ClockConfig+0x2ec>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <HAL_RCC_ClockConfig+0x2ec>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	4911      	ldr	r1, [pc, #68]	; (8002b58 <HAL_RCC_ClockConfig+0x2ec>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b16:	f000 f825 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b1a:	4601      	mov	r1, r0
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_RCC_ClockConfig+0x2ec>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b24:	23f0      	movs	r3, #240	; 0xf0
 8002b26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	fab3 f383 	clz	r3, r3
 8002b36:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3a:	4a08      	ldr	r2, [pc, #32]	; (8002b5c <HAL_RCC_ClockConfig+0x2f0>)
 8002b3c:	5cd3      	ldrb	r3, [r2, r3]
 8002b3e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b42:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <HAL_RCC_ClockConfig+0x2f4>)
 8002b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7fd ff72 	bl	8000a30 <HAL_InitTick>
  
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3778      	adds	r7, #120	; 0x78
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	0800503c 	.word	0x0800503c
 8002b60:	20000008 	.word	0x20000008

08002b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b08b      	sub	sp, #44	; 0x2c
 8002b68:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	2300      	movs	r3, #0
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b7e:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d002      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x30>
 8002b8e:	2b08      	cmp	r3, #8
 8002b90:	d003      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0x36>
 8002b92:	e03c      	b.n	8002c0e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b94:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b96:	623b      	str	r3, [r7, #32]
      break;
 8002b98:	e03c      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ba0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002ba4:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	fa93 f3a3 	rbit	r3, r3
 8002bac:	607b      	str	r3, [r7, #4]
  return(result);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bba:	5cd3      	ldrb	r3, [r2, r3]
 8002bbc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc2:	f003 020f 	and.w	r2, r3, #15
 8002bc6:	230f      	movs	r3, #15
 8002bc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	fab3 f383 	clz	r3, r3
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bdc:	4a14      	ldr	r2, [pc, #80]	; (8002c30 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bde:	5cd3      	ldrb	r3, [r2, r3]
 8002be0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002bec:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfc:	e004      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	4a0c      	ldr	r2, [pc, #48]	; (8002c34 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0a:	623b      	str	r3, [r7, #32]
      break;
 8002c0c:	e002      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c10:	623b      	str	r3, [r7, #32]
      break;
 8002c12:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c14:	6a3b      	ldr	r3, [r7, #32]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	372c      	adds	r7, #44	; 0x2c
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	40021000 	.word	0x40021000
 8002c28:	007a1200 	.word	0x007a1200
 8002c2c:	0800501c 	.word	0x0800501c
 8002c30:	0800502c 	.word	0x0800502c
 8002c34:	003d0900 	.word	0x003d0900

08002c38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b092      	sub	sp, #72	; 0x48
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	f000 80d6 	beq.w	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5c:	4b4d      	ldr	r3, [pc, #308]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c5e:	69db      	ldr	r3, [r3, #28]
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10e      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c68:	4b4a      	ldr	r3, [pc, #296]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c6a:	69db      	ldr	r3, [r3, #28]
 8002c6c:	4a49      	ldr	r2, [pc, #292]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c72:	61d3      	str	r3, [r2, #28]
 8002c74:	4b47      	ldr	r3, [pc, #284]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c80:	2301      	movs	r3, #1
 8002c82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c86:	4b44      	ldr	r3, [pc, #272]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d118      	bne.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c92:	4b41      	ldr	r3, [pc, #260]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a40      	ldr	r2, [pc, #256]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c9c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c9e:	f7fd ff0b 	bl	8000ab8 <HAL_GetTick>
 8002ca2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca4:	e008      	b.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ca6:	f7fd ff07 	bl	8000ab8 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b64      	cmp	r3, #100	; 0x64
 8002cb2:	d901      	bls.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e14a      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x316>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	4b37      	ldr	r3, [pc, #220]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0f0      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cc4:	4b33      	ldr	r3, [pc, #204]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8083 	beq.w	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d07b      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ce4:	4b2b      	ldr	r3, [pc, #172]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cf2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	461a      	mov	r2, r3
 8002d04:	4b25      	ldr	r3, [pc, #148]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b1d      	ldr	r3, [pc, #116]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	2300      	movs	r3, #0
 8002d30:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d32:	4a18      	ldr	r2, [pc, #96]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d36:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d04c      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7fd feb9 	bl	8000ab8 <HAL_GetTick>
 8002d46:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d48:	e00a      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d4a:	f7fd feb5 	bl	8000ab8 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0f6      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x316>
 8002d60:	2302      	movs	r3, #2
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	623b      	str	r3, [r7, #32]
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	61fb      	str	r3, [r7, #28]
  return(result);
 8002d78:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7a:	fab3 f383 	clz	r3, r3
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d108      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002d8e:	4b01      	ldr	r3, [pc, #4]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	e00d      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40007000 	.word	0x40007000
 8002d9c:	10908100 	.word	0x10908100
 8002da0:	2302      	movs	r3, #2
 8002da2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	4b6a      	ldr	r3, [pc, #424]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	2202      	movs	r2, #2
 8002db2:	613a      	str	r2, [r7, #16]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	fa92 f2a2 	rbit	r2, r2
 8002dba:	60fa      	str	r2, [r7, #12]
  return(result);
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	fab2 f282 	clz	r2, r2
 8002dc2:	b252      	sxtb	r2, r2
 8002dc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dc8:	b252      	sxtb	r2, r2
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	f002 021f 	and.w	r2, r2, #31
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0b6      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ddc:	4b5e      	ldr	r3, [pc, #376]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	495b      	ldr	r1, [pc, #364]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b58      	ldr	r3, [pc, #352]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4a57      	ldr	r2, [pc, #348]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e00:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e0e:	4b52      	ldr	r3, [pc, #328]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f023 0203 	bic.w	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	494f      	ldr	r1, [pc, #316]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e2c:	4b4a      	ldr	r3, [pc, #296]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f023 0210 	bic.w	r2, r3, #16
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	4947      	ldr	r1, [pc, #284]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e4a:	4b43      	ldr	r3, [pc, #268]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	4940      	ldr	r1, [pc, #256]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e68:	4b3b      	ldr	r3, [pc, #236]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6c:	f023 0220 	bic.w	r2, r3, #32
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	4938      	ldr	r1, [pc, #224]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e86:	4b34      	ldr	r3, [pc, #208]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	4931      	ldr	r1, [pc, #196]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ea4:	4b2c      	ldr	r3, [pc, #176]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4929      	ldr	r1, [pc, #164]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d008      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002ec2:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	4922      	ldr	r1, [pc, #136]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	491a      	ldr	r1, [pc, #104]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002efe:	4b16      	ldr	r3, [pc, #88]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	4913      	ldr	r1, [pc, #76]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002f1c:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f20:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	490b      	ldr	r1, [pc, #44]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d008      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002f3a:	4b07      	ldr	r3, [pc, #28]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f46:	4904      	ldr	r1, [pc, #16]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3748      	adds	r7, #72	; 0x48
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000

08002f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e01d      	b.n	8002faa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d106      	bne.n	8002f88 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f001 fe76 	bl	8004c74 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	3304      	adds	r3, #4
 8002f98:	4619      	mov	r1, r3
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	f000 fbda 	bl	8003754 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b082      	sub	sp, #8
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e01d      	b.n	8003000 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d106      	bne.n	8002fde <HAL_TIM_OC_Init+0x2c>
  {   
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f815 	bl	8003008 <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	3304      	adds	r3, #4
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4610      	mov	r0, r2
 8002ff2:	f000 fbaf 	bl	8003754 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e01d      	b.n	800306a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d106      	bne.n	8003048 <HAL_TIM_IC_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f001 fe76 	bl	8004d34 <HAL_TIM_IC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY; 
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	3304      	adds	r3, #4
 8003058:	4619      	mov	r1, r3
 800305a:	4610      	mov	r0, r2
 800305c:	f000 fb7a 	bl	8003754 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
 800307a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
    
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e083      	b.n	800319a <HAL_TIM_Encoder_Init+0x128>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f87b 	bl	80031a2 <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6812      	ldr	r2, [r2, #0]
 80030be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c2:	f023 0307 	bic.w	r3, r3, #7
 80030c6:	6093      	str	r3, [r2, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3304      	adds	r3, #4
 80030d0:	4619      	mov	r1, r3
 80030d2:	4610      	mov	r0, r2
 80030d4:	f000 fb3e 	bl	8003754 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6a1b      	ldr	r3, [r3, #32]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003100:	f023 0303 	bic.w	r3, r3, #3
 8003104:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	4313      	orrs	r3, r2
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
  
  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800311e:	f023 030c 	bic.w	r3, r3, #12
 8003122:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800312a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800312e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	69db      	ldr	r3, [r3, #28]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	4313      	orrs	r3, r2
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	011a      	lsls	r2, r3, #4
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	031b      	lsls	r3, r3, #12
 800314e:	4313      	orrs	r3, r2
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800315c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003164:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	4313      	orrs	r3, r2
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}

080031a2 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80031aa:	bf00      	nop
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d122      	bne.n	8003212 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d11b      	bne.n	8003212 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f06f 0202 	mvn.w	r2, #2
 80031e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80031f8:	6878      	ldr	r0, [r7, #4]
 80031fa:	f000 fa8d 	bl	8003718 <HAL_TIM_IC_CaptureCallback>
 80031fe:	e005      	b.n	800320c <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fa7f 	bl	8003704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 fa90 	bl	800372c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b04      	cmp	r3, #4
 800321e:	d122      	bne.n	8003266 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b04      	cmp	r3, #4
 800322c:	d11b      	bne.n	8003266 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f06f 0204 	mvn.w	r2, #4
 8003236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fa63 	bl	8003718 <HAL_TIM_IC_CaptureCallback>
 8003252:	e005      	b.n	8003260 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 fa55 	bl	8003704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 fa66 	bl	800372c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	2b08      	cmp	r3, #8
 8003272:	d122      	bne.n	80032ba <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b08      	cmp	r3, #8
 8003280:	d11b      	bne.n	80032ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f06f 0208 	mvn.w	r2, #8
 800328a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2204      	movs	r2, #4
 8003290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	f003 0303 	and.w	r3, r3, #3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fa39 	bl	8003718 <HAL_TIM_IC_CaptureCallback>
 80032a6:	e005      	b.n	80032b4 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f000 fa2b 	bl	8003704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 fa3c 	bl	800372c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	f003 0310 	and.w	r3, r3, #16
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d122      	bne.n	800330e <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d11b      	bne.n	800330e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f06f 0210 	mvn.w	r2, #16
 80032de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2208      	movs	r2, #8
 80032e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	69db      	ldr	r3, [r3, #28]
 80032ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f000 fa0f 	bl	8003718 <HAL_TIM_IC_CaptureCallback>
 80032fa:	e005      	b.n	8003308 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 fa01 	bl	8003704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 fa12 	bl	800372c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b01      	cmp	r3, #1
 800331a:	d10e      	bne.n	800333a <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b01      	cmp	r3, #1
 8003328:	d107      	bne.n	800333a <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f06f 0201 	mvn.w	r2, #1
 8003332:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f9db 	bl	80036f0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003344:	2b80      	cmp	r3, #128	; 0x80
 8003346:	d10e      	bne.n	8003366 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003352:	2b80      	cmp	r3, #128	; 0x80
 8003354:	d107      	bne.n	8003366 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800335e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 ff81 	bl	8004268 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003374:	d10e      	bne.n	8003394 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003380:	2b80      	cmp	r3, #128	; 0x80
 8003382:	d107      	bne.n	8003394 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800338c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 ff74 	bl	800427c <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	d10e      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d107      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033b8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f9c0 	bl	8003740 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d10e      	bne.n	80033ec <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d107      	bne.n	80033ec <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0220 	mvn.w	r2, #32
 80033e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 ff34 	bl	8004254 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d101      	bne.n	800340e <HAL_TIM_IC_ConfigChannel+0x1a>
 800340a:	2302      	movs	r3, #2
 800340c:	e08a      	b.n	8003524 <HAL_TIM_IC_ConfigChannel+0x130>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2202      	movs	r2, #2
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  if (Channel == TIM_CHANNEL_1)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d11b      	bne.n	800345c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	6819      	ldr	r1, [r3, #0]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f000 fbfe 	bl	8003c34 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f022 020c 	bic.w	r2, r2, #12
 8003446:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6999      	ldr	r1, [r3, #24]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	689a      	ldr	r2, [r3, #8]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	619a      	str	r2, [r3, #24]
 800345a:	e05a      	b.n	8003512 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b04      	cmp	r3, #4
 8003460:	d11c      	bne.n	800349c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
    TIM_TI2_SetConfig(htim->Instance, 
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6818      	ldr	r0, [r3, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	6819      	ldr	r1, [r3, #0]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f000 fc6c 	bl	8003d4e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);
               
    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003484:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6999      	ldr	r1, [r3, #24]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	021a      	lsls	r2, r3, #8
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	619a      	str	r2, [r3, #24]
 800349a:	e03a      	b.n	8003512 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b08      	cmp	r3, #8
 80034a0:	d11b      	bne.n	80034da <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
    
    TIM_TI3_SetConfig(htim->Instance,  
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	6819      	ldr	r1, [r3, #0]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f000 fcc1 	bl	8003e38 <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f022 020c 	bic.w	r2, r2, #12
 80034c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69d9      	ldr	r1, [r3, #28]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	61da      	str	r2, [r3, #28]
 80034d8:	e01b      	b.n	8003512 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
    
    TIM_TI4_SetConfig(htim->Instance, 
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6818      	ldr	r0, [r3, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	6819      	ldr	r1, [r3, #0]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	f000 fce5 	bl	8003eb8 <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	69da      	ldr	r2, [r3, #28]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80034fc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69d9      	ldr	r1, [r3, #28]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	021a      	lsls	r2, r3, #8
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	61da      	str	r2, [r3, #28]
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK; 
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_TIM_ConfigClockSource+0x1c>
 8003544:	2302      	movs	r3, #2
 8003546:	e0cf      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x1bc>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003566:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800356a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003572:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d07c      	beq.n	800367e <HAL_TIM_ConfigClockSource+0x152>
 8003584:	2b40      	cmp	r3, #64	; 0x40
 8003586:	d80f      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x7c>
 8003588:	2b10      	cmp	r3, #16
 800358a:	f000 808f 	beq.w	80036ac <HAL_TIM_ConfigClockSource+0x180>
 800358e:	2b10      	cmp	r3, #16
 8003590:	d803      	bhi.n	800359a <HAL_TIM_ConfigClockSource+0x6e>
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 8083 	beq.w	800369e <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8003598:	e09d      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 800359a:	2b20      	cmp	r3, #32
 800359c:	f000 808d 	beq.w	80036ba <HAL_TIM_ConfigClockSource+0x18e>
 80035a0:	2b30      	cmp	r3, #48	; 0x30
 80035a2:	f000 8091 	beq.w	80036c8 <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 80035a6:	e096      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 80035a8:	2b70      	cmp	r3, #112	; 0x70
 80035aa:	d018      	beq.n	80035de <HAL_TIM_ConfigClockSource+0xb2>
 80035ac:	2b70      	cmp	r3, #112	; 0x70
 80035ae:	d804      	bhi.n	80035ba <HAL_TIM_ConfigClockSource+0x8e>
 80035b0:	2b50      	cmp	r3, #80	; 0x50
 80035b2:	d044      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x112>
 80035b4:	2b60      	cmp	r3, #96	; 0x60
 80035b6:	d052      	beq.n	800365e <HAL_TIM_ConfigClockSource+0x132>
    break;    
 80035b8:	e08d      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 80035ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035be:	d003      	beq.n	80035c8 <HAL_TIM_ConfigClockSource+0x9c>
 80035c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c4:	d028      	beq.n	8003618 <HAL_TIM_ConfigClockSource+0xec>
    break;    
 80035c6:	e086      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6812      	ldr	r2, [r2, #0]
 80035d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d6:	f023 0307 	bic.w	r3, r3, #7
 80035da:	6093      	str	r3, [r2, #8]
    break;
 80035dc:	e07b      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6899      	ldr	r1, [r3, #8]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	f000 fcc4 	bl	8003f7a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003600:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003604:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800360c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	609a      	str	r2, [r3, #8]
    break;
 8003616:	e05e      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6899      	ldr	r1, [r3, #8]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f000 fca7 	bl	8003f7a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800363a:	609a      	str	r2, [r3, #8]
    break;
 800363c:	e04b      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	6859      	ldr	r1, [r3, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	461a      	mov	r2, r3
 800364c:	f000 fb4c 	bl	8003ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2150      	movs	r1, #80	; 0x50
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fc6f 	bl	8003f3a <TIM_ITRx_SetConfig>
    break;
 800365c:	e03b      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6818      	ldr	r0, [r3, #0]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	6859      	ldr	r1, [r3, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	461a      	mov	r2, r3
 800366c:	f000 fbb0 	bl	8003dd0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2160      	movs	r1, #96	; 0x60
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fc5f 	bl	8003f3a <TIM_ITRx_SetConfig>
    break;
 800367c:	e02b      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	461a      	mov	r2, r3
 800368c:	f000 fb2c 	bl	8003ce8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2140      	movs	r1, #64	; 0x40
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fc4f 	bl	8003f3a <TIM_ITRx_SetConfig>
    break;
 800369c:	e01b      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2100      	movs	r1, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fc48 	bl	8003f3a <TIM_ITRx_SetConfig>
    break;
 80036aa:	e014      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2110      	movs	r1, #16
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 fc41 	bl	8003f3a <TIM_ITRx_SetConfig>
    break;
 80036b8:	e00d      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2120      	movs	r1, #32
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fc3a 	bl	8003f3a <TIM_ITRx_SetConfig>
    break;
 80036c6:	e006      	b.n	80036d6 <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2130      	movs	r1, #48	; 0x30
 80036ce:	4618      	mov	r0, r3
 80036d0:	f000 fc33 	bl	8003f3a <TIM_ITRx_SetConfig>
    break;
 80036d4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003734:	bf00      	nop
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a2e      	ldr	r2, [pc, #184]	; (8003824 <TIM_Base_SetConfig+0xd0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d003      	beq.n	8003778 <TIM_Base_SetConfig+0x24>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003776:	d108      	bne.n	800378a <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a25      	ldr	r2, [pc, #148]	; (8003824 <TIM_Base_SetConfig+0xd0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d00f      	beq.n	80037b2 <TIM_Base_SetConfig+0x5e>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003798:	d00b      	beq.n	80037b2 <TIM_Base_SetConfig+0x5e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a22      	ldr	r2, [pc, #136]	; (8003828 <TIM_Base_SetConfig+0xd4>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d007      	beq.n	80037b2 <TIM_Base_SetConfig+0x5e>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a21      	ldr	r2, [pc, #132]	; (800382c <TIM_Base_SetConfig+0xd8>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d003      	beq.n	80037b2 <TIM_Base_SetConfig+0x5e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a20      	ldr	r2, [pc, #128]	; (8003830 <TIM_Base_SetConfig+0xdc>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d108      	bne.n	80037c4 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a0e      	ldr	r2, [pc, #56]	; (8003824 <TIM_Base_SetConfig+0xd0>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00b      	beq.n	8003808 <TIM_Base_SetConfig+0xb4>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a0d      	ldr	r2, [pc, #52]	; (8003828 <TIM_Base_SetConfig+0xd4>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d007      	beq.n	8003808 <TIM_Base_SetConfig+0xb4>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a0c      	ldr	r2, [pc, #48]	; (800382c <TIM_Base_SetConfig+0xd8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d003      	beq.n	8003808 <TIM_Base_SetConfig+0xb4>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a0b      	ldr	r2, [pc, #44]	; (8003830 <TIM_Base_SetConfig+0xdc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d103      	bne.n	8003810 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	615a      	str	r2, [r3, #20]
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40014000 	.word	0x40014000
 800382c:	40014400 	.word	0x40014400
 8003830:	40014800 	.word	0x40014800

08003834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8003846:	2300      	movs	r3, #0
 8003848:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	f023 0201 	bic.w	r2, r3, #1
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f023 0303 	bic.w	r3, r3, #3
 800387a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4313      	orrs	r3, r2
 8003884:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f023 0302 	bic.w	r3, r3, #2
 800388c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a28      	ldr	r2, [pc, #160]	; (800393c <TIM_OC1_SetConfig+0x108>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00b      	beq.n	80038b8 <TIM_OC1_SetConfig+0x84>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a27      	ldr	r2, [pc, #156]	; (8003940 <TIM_OC1_SetConfig+0x10c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d007      	beq.n	80038b8 <TIM_OC1_SetConfig+0x84>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a26      	ldr	r2, [pc, #152]	; (8003944 <TIM_OC1_SetConfig+0x110>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d003      	beq.n	80038b8 <TIM_OC1_SetConfig+0x84>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a25      	ldr	r2, [pc, #148]	; (8003948 <TIM_OC1_SetConfig+0x114>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d10c      	bne.n	80038d2 <TIM_OC1_SetConfig+0x9e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	f023 0308 	bic.w	r3, r3, #8
 80038be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	697a      	ldr	r2, [r7, #20]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f023 0304 	bic.w	r3, r3, #4
 80038d0:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a19      	ldr	r2, [pc, #100]	; (800393c <TIM_OC1_SetConfig+0x108>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00b      	beq.n	80038f2 <TIM_OC1_SetConfig+0xbe>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a18      	ldr	r2, [pc, #96]	; (8003940 <TIM_OC1_SetConfig+0x10c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <TIM_OC1_SetConfig+0xbe>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a17      	ldr	r2, [pc, #92]	; (8003944 <TIM_OC1_SetConfig+0x110>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d003      	beq.n	80038f2 <TIM_OC1_SetConfig+0xbe>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a16      	ldr	r2, [pc, #88]	; (8003948 <TIM_OC1_SetConfig+0x114>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d111      	bne.n	8003916 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	4313      	orrs	r3, r2
 8003914:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	621a      	str	r2, [r3, #32]
} 
 8003930:	bf00      	nop
 8003932:	371c      	adds	r7, #28
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	40012c00 	.word	0x40012c00
 8003940:	40014000 	.word	0x40014000
 8003944:	40014400 	.word	0x40014400
 8003948:	40014800 	.word	0x40014800

0800394c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a1b      	ldr	r3, [r3, #32]
 8003966:	f023 0210 	bic.w	r2, r3, #16
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800398a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003992:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	021b      	lsls	r3, r3, #8
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4313      	orrs	r3, r2
 800399e:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f023 0320 	bic.w	r3, r3, #32
 80039a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a24      	ldr	r2, [pc, #144]	; (8003a48 <TIM_OC2_SetConfig+0xfc>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d10d      	bne.n	80039d8 <TIM_OC2_SetConfig+0x8c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039d6:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <TIM_OC2_SetConfig+0xfc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00b      	beq.n	80039f8 <TIM_OC2_SetConfig+0xac>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a1a      	ldr	r2, [pc, #104]	; (8003a4c <TIM_OC2_SetConfig+0x100>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d007      	beq.n	80039f8 <TIM_OC2_SetConfig+0xac>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a19      	ldr	r2, [pc, #100]	; (8003a50 <TIM_OC2_SetConfig+0x104>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d003      	beq.n	80039f8 <TIM_OC2_SetConfig+0xac>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <TIM_OC2_SetConfig+0x108>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d113      	bne.n	8003a20 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039fe:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a06:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40012c00 	.word	0x40012c00
 8003a4c:	40014000 	.word	0x40014000
 8003a50:	40014400 	.word	0x40014400
 8003a54:	40014800 	.word	0x40014800

08003a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	021b      	lsls	r3, r3, #8
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a23      	ldr	r2, [pc, #140]	; (8003b50 <TIM_OC3_SetConfig+0xf8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d10d      	bne.n	8003ae2 <TIM_OC3_SetConfig+0x8a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003acc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	021b      	lsls	r3, r3, #8
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ae0:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a1a      	ldr	r2, [pc, #104]	; (8003b50 <TIM_OC3_SetConfig+0xf8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00b      	beq.n	8003b02 <TIM_OC3_SetConfig+0xaa>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a19      	ldr	r2, [pc, #100]	; (8003b54 <TIM_OC3_SetConfig+0xfc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d007      	beq.n	8003b02 <TIM_OC3_SetConfig+0xaa>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <TIM_OC3_SetConfig+0x100>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d003      	beq.n	8003b02 <TIM_OC3_SetConfig+0xaa>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <TIM_OC3_SetConfig+0x104>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d113      	bne.n	8003b2a <TIM_OC3_SetConfig+0xd2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b10:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	621a      	str	r2, [r3, #32]
}
 8003b44:	bf00      	nop
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40014000 	.word	0x40014000
 8003b58:	40014400 	.word	0x40014400
 8003b5c:	40014800 	.word	0x40014800

08003b60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8003b72:	2300      	movs	r3, #0
 8003b74:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b9e:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba6:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	021b      	lsls	r3, r3, #8
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bba:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	031b      	lsls	r3, r3, #12
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a16      	ldr	r2, [pc, #88]	; (8003c24 <TIM_OC4_SetConfig+0xc4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00b      	beq.n	8003be8 <TIM_OC4_SetConfig+0x88>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a15      	ldr	r2, [pc, #84]	; (8003c28 <TIM_OC4_SetConfig+0xc8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <TIM_OC4_SetConfig+0x88>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a14      	ldr	r2, [pc, #80]	; (8003c2c <TIM_OC4_SetConfig+0xcc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <TIM_OC4_SetConfig+0x88>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a13      	ldr	r2, [pc, #76]	; (8003c30 <TIM_OC4_SetConfig+0xd0>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d109      	bne.n	8003bfc <TIM_OC4_SetConfig+0x9c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bee:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	019b      	lsls	r3, r3, #6
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	621a      	str	r2, [r3, #32]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40014400 	.word	0x40014400
 8003c30:	40014800 	.word	0x40014800

08003c34 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
 8003c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f023 0201 	bic.w	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4a1e      	ldr	r2, [pc, #120]	; (8003ce0 <TIM_TI1_SetConfig+0xac>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d007      	beq.n	8003c7a <TIM_TI1_SetConfig+0x46>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c70:	d003      	beq.n	8003c7a <TIM_TI1_SetConfig+0x46>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <TIM_TI1_SetConfig+0xb0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d101      	bne.n	8003c7e <TIM_TI1_SetConfig+0x4a>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <TIM_TI1_SetConfig+0x4c>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d008      	beq.n	8003c96 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f023 0303 	bic.w	r3, r3, #3
 8003c8a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
 8003c94:	e003      	b.n	8003c9e <TIM_TI1_SetConfig+0x6a>
  } 
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	617b      	str	r3, [r7, #20]
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ca4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f023 030a 	bic.w	r3, r3, #10
 8003cb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f003 030a 	and.w	r3, r3, #10
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40012c00 	.word	0x40012c00
 8003ce4:	40014000 	.word	0x40014000

08003ce8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	f023 0201 	bic.w	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f023 030a 	bic.w	r3, r3, #10
 8003d2c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	621a      	str	r2, [r3, #32]
}
 8003d42:	bf00      	nop
 8003d44:	371c      	adds	r7, #28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b087      	sub	sp, #28
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	f023 0210 	bic.w	r2, r3, #16
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d82:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	021b      	lsls	r3, r3, #8
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	031b      	lsls	r3, r3, #12
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003da8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	621a      	str	r2, [r3, #32]
}
 8003dc4:	bf00      	nop
 8003dc6:	371c      	adds	r7, #28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b087      	sub	sp, #28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f023 0210 	bic.w	r2, r3, #16
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e02:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	031b      	lsls	r3, r3, #12
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	621a      	str	r2, [r3, #32]
}
 8003e2c:	bf00      	nop
 8003e2e:	371c      	adds	r7, #28
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6a1b      	ldr	r3, [r3, #32]
 8003e52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 0303 	bic.w	r3, r3, #3
 8003e6c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003e90:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	021b      	lsls	r3, r3, #8
 8003e96:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	621a      	str	r2, [r3, #32]
}
 8003eac:	bf00      	nop
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003efe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	031b      	lsls	r3, r3, #12
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003f12:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	031b      	lsls	r3, r3, #12
 8003f18:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	621a      	str	r2, [r3, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	371c      	adds	r7, #28
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b085      	sub	sp, #20
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
 8003f42:	460b      	mov	r3, r1
 8003f44:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f56:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003f58:	887b      	ldrh	r3, [r7, #2]
 8003f5a:	f043 0307 	orr.w	r3, r3, #7
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	609a      	str	r2, [r3, #8]
}
 8003f6e:	bf00      	nop
 8003f70:	3714      	adds	r7, #20
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b087      	sub	sp, #28
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	60f8      	str	r0, [r7, #12]
 8003f82:	60b9      	str	r1, [r7, #8]
 8003f84:	607a      	str	r2, [r7, #4]
 8003f86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f98:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	021a      	lsls	r2, r3, #8
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	697a      	ldr	r2, [r7, #20]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	609a      	str	r2, [r3, #8]
} 
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef* sConfig,
                                           uint32_t Channel)
{  
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_TIM_OC_ConfigChannel+0x1a>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e06c      	b.n	80040b4 <HAL_TIM_OC_ConfigChannel+0xf4>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  switch (Channel)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b14      	cmp	r3, #20
 8003fee:	d857      	bhi.n	80040a0 <HAL_TIM_OC_ConfigChannel+0xe0>
 8003ff0:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <HAL_TIM_OC_ConfigChannel+0x38>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	0800404d 	.word	0x0800404d
 8003ffc:	080040a1 	.word	0x080040a1
 8004000:	080040a1 	.word	0x080040a1
 8004004:	080040a1 	.word	0x080040a1
 8004008:	0800405b 	.word	0x0800405b
 800400c:	080040a1 	.word	0x080040a1
 8004010:	080040a1 	.word	0x080040a1
 8004014:	080040a1 	.word	0x080040a1
 8004018:	08004069 	.word	0x08004069
 800401c:	080040a1 	.word	0x080040a1
 8004020:	080040a1 	.word	0x080040a1
 8004024:	080040a1 	.word	0x080040a1
 8004028:	08004077 	.word	0x08004077
 800402c:	080040a1 	.word	0x080040a1
 8004030:	080040a1 	.word	0x080040a1
 8004034:	080040a1 	.word	0x080040a1
 8004038:	08004085 	.word	0x08004085
 800403c:	080040a1 	.word	0x080040a1
 8004040:	080040a1 	.word	0x080040a1
 8004044:	080040a1 	.word	0x080040a1
 8004048:	08004093 	.word	0x08004093
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
     /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff fbee 	bl	8003834 <TIM_OC1_SetConfig>
    }
    break;
 8004058:	e023      	b.n	80040a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff fc73 	bl	800394c <TIM_OC2_SetConfig>
    }
    break;
 8004066:	e01c      	b.n	80040a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68b9      	ldr	r1, [r7, #8]
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff fcf2 	bl	8003a58 <TIM_OC3_SetConfig>
    }
    break;
 8004074:	e015      	b.n	80040a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff fd6f 	bl	8003b60 <TIM_OC4_SetConfig>
    }
    break;
 8004082:	e00e      	b.n	80040a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 5 in Output Compare */
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68b9      	ldr	r1, [r7, #8]
 800408a:	4618      	mov	r0, r3
 800408c:	f000 f900 	bl	8004290 <TIM_OC5_SetConfig>
    }
    break;
 8004090:	e007      	b.n	80040a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 6 in Output Compare */
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	4618      	mov	r0, r3
 800409a:	f000 f95d 	bl	8004358 <TIM_OC6_SetConfig>
    }
    break;
 800409e:	e000      	b.n	80040a2 <HAL_TIM_OC_ConfigChannel+0xe2>
        
    default:
    break;    
 80040a0:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim); 
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e038      	b.n	8004146 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a18      	ldr	r2, [pc, #96]	; (8004154 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d108      	bne.n	8004108 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	4313      	orrs	r3, r2
 8004106:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004120:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	4313      	orrs	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68ba      	ldr	r2, [r7, #8]
 800413a:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
} 
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40012c00 	.word	0x40012c00

08004158 <HAL_TIMEx_ConfigBreakDeadTime>:
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004170:	2302      	movs	r3, #2
 8004172:	e067      	b.n	8004244 <HAL_TIMEx_ConfigBreakDeadTime+0xec>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4313      	orrs	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041da:	4313      	orrs	r3, r2
 80041dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	041b      	lsls	r3, r3, #16
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a13      	ldr	r2, [pc, #76]	; (8004250 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d115      	bne.n	8004232 <HAL_TIMEx_ConfigBreakDeadTime+0xda>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	051b      	lsls	r3, r3, #20
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	40012c00 	.word	0x40012c00

08004254 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004290:	b480      	push	{r7}
 8004292:	b087      	sub	sp, #28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ce:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	693a      	ldr	r2, [r7, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80042e0:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a15      	ldr	r2, [pc, #84]	; (8004348 <TIM_OC5_SetConfig+0xb8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d00b      	beq.n	800430e <TIM_OC5_SetConfig+0x7e>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a14      	ldr	r2, [pc, #80]	; (800434c <TIM_OC5_SetConfig+0xbc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d007      	beq.n	800430e <TIM_OC5_SetConfig+0x7e>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a13      	ldr	r2, [pc, #76]	; (8004350 <TIM_OC5_SetConfig+0xc0>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d003      	beq.n	800430e <TIM_OC5_SetConfig+0x7e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a12      	ldr	r2, [pc, #72]	; (8004354 <TIM_OC5_SetConfig+0xc4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d109      	bne.n	8004322 <TIM_OC5_SetConfig+0x92>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004314:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	621a      	str	r2, [r3, #32]
}
 800433c:	bf00      	nop
 800433e:	371c      	adds	r7, #28
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr
 8004348:	40012c00 	.word	0x40012c00
 800434c:	40014000 	.word	0x40014000
 8004350:	40014400 	.word	0x40014400
 8004354:	40014800 	.word	0x40014800

08004358 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 800436a:	2300      	movs	r3, #0
 800436c:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004396:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043aa:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	051b      	lsls	r3, r3, #20
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a16      	ldr	r2, [pc, #88]	; (8004414 <TIM_OC6_SetConfig+0xbc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00b      	beq.n	80043d8 <TIM_OC6_SetConfig+0x80>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a15      	ldr	r2, [pc, #84]	; (8004418 <TIM_OC6_SetConfig+0xc0>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d007      	beq.n	80043d8 <TIM_OC6_SetConfig+0x80>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a14      	ldr	r2, [pc, #80]	; (800441c <TIM_OC6_SetConfig+0xc4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d003      	beq.n	80043d8 <TIM_OC6_SetConfig+0x80>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a13      	ldr	r2, [pc, #76]	; (8004420 <TIM_OC6_SetConfig+0xc8>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d109      	bne.n	80043ec <TIM_OC6_SetConfig+0x94>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	029b      	lsls	r3, r3, #10
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	621a      	str	r2, [r3, #32]
} 
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40014000 	.word	0x40014000
 800441c:	40014400 	.word	0x40014400
 8004420:	40014800 	.word	0x40014800

08004424 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800442a:	463b      	mov	r3, r7
 800442c:	2200      	movs	r2, #0
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	605a      	str	r2, [r3, #4]
 8004432:	609a      	str	r2, [r3, #8]
 8004434:	60da      	str	r2, [r3, #12]
 8004436:	611a      	str	r2, [r3, #16]
 8004438:	615a      	str	r2, [r3, #20]

  /** Common config 
  */
  hadc1.Instance = ADC1;
 800443a:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <MX_ADC1_Init+0xb0>)
 800443c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8004440:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004442:	4b24      	ldr	r3, [pc, #144]	; (80044d4 <MX_ADC1_Init+0xb0>)
 8004444:	2200      	movs	r2, #0
 8004446:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004448:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <MX_ADC1_Init+0xb0>)
 800444a:	2200      	movs	r2, #0
 800444c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800444e:	4b21      	ldr	r3, [pc, #132]	; (80044d4 <MX_ADC1_Init+0xb0>)
 8004450:	2200      	movs	r2, #0
 8004452:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004454:	4b1f      	ldr	r3, [pc, #124]	; (80044d4 <MX_ADC1_Init+0xb0>)
 8004456:	2200      	movs	r2, #0
 8004458:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800445a:	4b1e      	ldr	r3, [pc, #120]	; (80044d4 <MX_ADC1_Init+0xb0>)
 800445c:	2200      	movs	r2, #0
 800445e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004460:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <MX_ADC1_Init+0xb0>)
 8004462:	2200      	movs	r2, #0
 8004464:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004466:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <MX_ADC1_Init+0xb0>)
 8004468:	2201      	movs	r2, #1
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800446c:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <MX_ADC1_Init+0xb0>)
 800446e:	2200      	movs	r2, #0
 8004470:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8004472:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <MX_ADC1_Init+0xb0>)
 8004474:	2201      	movs	r2, #1
 8004476:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004478:	4b16      	ldr	r3, [pc, #88]	; (80044d4 <MX_ADC1_Init+0xb0>)
 800447a:	2200      	movs	r2, #0
 800447c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800447e:	4b15      	ldr	r3, [pc, #84]	; (80044d4 <MX_ADC1_Init+0xb0>)
 8004480:	2204      	movs	r2, #4
 8004482:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004484:	4b13      	ldr	r3, [pc, #76]	; (80044d4 <MX_ADC1_Init+0xb0>)
 8004486:	2200      	movs	r2, #0
 8004488:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800448a:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <MX_ADC1_Init+0xb0>)
 800448c:	2200      	movs	r2, #0
 800448e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004490:	4810      	ldr	r0, [pc, #64]	; (80044d4 <MX_ADC1_Init+0xb0>)
 8004492:	f7fc fb1d 	bl	8000ad0 <HAL_ADC_Init>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 800449c:	f000 f9c4 	bl	8004828 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80044a0:	2301      	movs	r3, #1
 80044a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80044a4:	2301      	movs	r3, #1
 80044a6:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80044ac:	2300      	movs	r3, #0
 80044ae:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80044b0:	2300      	movs	r3, #0
 80044b2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80044b8:	463b      	mov	r3, r7
 80044ba:	4619      	mov	r1, r3
 80044bc:	4805      	ldr	r0, [pc, #20]	; (80044d4 <MX_ADC1_Init+0xb0>)
 80044be:	f7fc fc8b 	bl	8000dd8 <HAL_ADC_ConfigChannel>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80044c8:	f000 f9ae 	bl	8004828 <Error_Handler>
  }

}
 80044cc:	bf00      	nop
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	20000094 	.word	0x20000094

080044d8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08a      	sub	sp, #40	; 0x28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e0:	f107 0314 	add.w	r3, r7, #20
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	605a      	str	r2, [r3, #4]
 80044ea:	609a      	str	r2, [r3, #8]
 80044ec:	60da      	str	r2, [r3, #12]
 80044ee:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044f8:	d13c      	bne.n	8004574 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80044fa:	4b20      	ldr	r3, [pc, #128]	; (800457c <HAL_ADC_MspInit+0xa4>)
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	4a1f      	ldr	r2, [pc, #124]	; (800457c <HAL_ADC_MspInit+0xa4>)
 8004500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004504:	6153      	str	r3, [r2, #20]
 8004506:	4b1d      	ldr	r3, [pc, #116]	; (800457c <HAL_ADC_MspInit+0xa4>)
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004512:	4b1a      	ldr	r3, [pc, #104]	; (800457c <HAL_ADC_MspInit+0xa4>)
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	4a19      	ldr	r2, [pc, #100]	; (800457c <HAL_ADC_MspInit+0xa4>)
 8004518:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800451c:	6153      	str	r3, [r2, #20]
 800451e:	4b17      	ldr	r3, [pc, #92]	; (800457c <HAL_ADC_MspInit+0xa4>)
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800452a:	4b14      	ldr	r3, [pc, #80]	; (800457c <HAL_ADC_MspInit+0xa4>)
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	4a13      	ldr	r2, [pc, #76]	; (800457c <HAL_ADC_MspInit+0xa4>)
 8004530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004534:	6153      	str	r3, [r2, #20]
 8004536:	4b11      	ldr	r3, [pc, #68]	; (800457c <HAL_ADC_MspInit+0xa4>)
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	60bb      	str	r3, [r7, #8]
 8004540:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = I_V_Pin|I_W_Pin|Temp__Sens__Pin|IHM09SPEED_VR_Pin;
 8004542:	230f      	movs	r3, #15
 8004544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004546:	2303      	movs	r3, #3
 8004548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454a:	2300      	movs	r3, #0
 800454c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800454e:	f107 0314 	add.w	r3, r7, #20
 8004552:	4619      	mov	r1, r3
 8004554:	480a      	ldr	r0, [pc, #40]	; (8004580 <HAL_ADC_MspInit+0xa8>)
 8004556:	f7fd f90d 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_U_Pin|V_DC_Pin;
 800455a:	2303      	movs	r3, #3
 800455c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800455e:	2303      	movs	r3, #3
 8004560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004566:	f107 0314 	add.w	r3, r7, #20
 800456a:	4619      	mov	r1, r3
 800456c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004570:	f7fd f900 	bl	8001774 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004574:	bf00      	nop
 8004576:	3728      	adds	r7, #40	; 0x28
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000
 8004580:	48000800 	.word	0x48000800

08004584 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800458a:	1d3b      	adds	r3, r7, #4
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	605a      	str	r2, [r3, #4]
 8004592:	609a      	str	r2, [r3, #8]

  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8004594:	4b0e      	ldr	r3, [pc, #56]	; (80045d0 <MX_DAC_Init+0x4c>)
 8004596:	4a0f      	ldr	r2, [pc, #60]	; (80045d4 <MX_DAC_Init+0x50>)
 8004598:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800459a:	480d      	ldr	r0, [pc, #52]	; (80045d0 <MX_DAC_Init+0x4c>)
 800459c:	f7fd f83f 	bl	800161e <HAL_DAC_Init>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d001      	beq.n	80045aa <MX_DAC_Init+0x26>
  {
    Error_Handler();
 80045a6:	f000 f93f 	bl	8004828 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 80045aa:	233c      	movs	r3, #60	; 0x3c
 80045ac:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80045b2:	1d3b      	adds	r3, r7, #4
 80045b4:	2200      	movs	r2, #0
 80045b6:	4619      	mov	r1, r3
 80045b8:	4805      	ldr	r0, [pc, #20]	; (80045d0 <MX_DAC_Init+0x4c>)
 80045ba:	f7fd f88d 	bl	80016d8 <HAL_DAC_ConfigChannel>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80045c4:	f000 f930 	bl	8004828 <Error_Handler>
  }

}
 80045c8:	bf00      	nop
 80045ca:	3710      	adds	r7, #16
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	200000e8 	.word	0x200000e8
 80045d4:	40007400 	.word	0x40007400

080045d8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	; 0x28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045e0:	f107 0314 	add.w	r3, r7, #20
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	605a      	str	r2, [r3, #4]
 80045ea:	609a      	str	r2, [r3, #8]
 80045ec:	60da      	str	r2, [r3, #12]
 80045ee:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a19      	ldr	r2, [pc, #100]	; (800465c <HAL_DAC_MspInit+0x84>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d12c      	bne.n	8004654 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80045fa:	4b19      	ldr	r3, [pc, #100]	; (8004660 <HAL_DAC_MspInit+0x88>)
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	4a18      	ldr	r2, [pc, #96]	; (8004660 <HAL_DAC_MspInit+0x88>)
 8004600:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004604:	61d3      	str	r3, [r2, #28]
 8004606:	4b16      	ldr	r3, [pc, #88]	; (8004660 <HAL_DAC_MspInit+0x88>)
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004612:	4b13      	ldr	r3, [pc, #76]	; (8004660 <HAL_DAC_MspInit+0x88>)
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	4a12      	ldr	r2, [pc, #72]	; (8004660 <HAL_DAC_MspInit+0x88>)
 8004618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800461c:	6153      	str	r3, [r2, #20]
 800461e:	4b10      	ldr	r3, [pc, #64]	; (8004660 <HAL_DAC_MspInit+0x88>)
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	60fb      	str	r3, [r7, #12]
 8004628:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800462a:	2310      	movs	r3, #16
 800462c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800462e:	2303      	movs	r3, #3
 8004630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004636:	f107 0314 	add.w	r3, r7, #20
 800463a:	4619      	mov	r1, r3
 800463c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004640:	f7fd f898 	bl	8001774 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004644:	2200      	movs	r2, #0
 8004646:	2100      	movs	r1, #0
 8004648:	2036      	movs	r0, #54	; 0x36
 800464a:	f7fc ffb2 	bl	80015b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800464e:	2036      	movs	r0, #54	; 0x36
 8004650:	f7fc ffcb 	bl	80015ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8004654:	bf00      	nop
 8004656:	3728      	adds	r7, #40	; 0x28
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40007400 	.word	0x40007400
 8004660:	40021000 	.word	0x40021000

08004664 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800466a:	f107 030c 	add.w	r3, r7, #12
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	605a      	str	r2, [r3, #4]
 8004674:	609a      	str	r2, [r3, #8]
 8004676:	60da      	str	r2, [r3, #12]
 8004678:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <MX_GPIO_Init+0x8c>)
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	4a1c      	ldr	r2, [pc, #112]	; (80046f0 <MX_GPIO_Init+0x8c>)
 8004680:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004684:	6153      	str	r3, [r2, #20]
 8004686:	4b1a      	ldr	r3, [pc, #104]	; (80046f0 <MX_GPIO_Init+0x8c>)
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800468e:	60bb      	str	r3, [r7, #8]
 8004690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004692:	4b17      	ldr	r3, [pc, #92]	; (80046f0 <MX_GPIO_Init+0x8c>)
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	4a16      	ldr	r2, [pc, #88]	; (80046f0 <MX_GPIO_Init+0x8c>)
 8004698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800469c:	6153      	str	r3, [r2, #20]
 800469e:	4b14      	ldr	r3, [pc, #80]	; (80046f0 <MX_GPIO_Init+0x8c>)
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	607b      	str	r3, [r7, #4]
 80046a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80046aa:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <MX_GPIO_Init+0x8c>)
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	4a10      	ldr	r2, [pc, #64]	; (80046f0 <MX_GPIO_Init+0x8c>)
 80046b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046b4:	6153      	str	r3, [r2, #20]
 80046b6:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <MX_GPIO_Init+0x8c>)
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IHM09LEDRED_GPIO_Port, IHM09LEDRED_Pin, GPIO_PIN_SET);
 80046c2:	2201      	movs	r2, #1
 80046c4:	2104      	movs	r1, #4
 80046c6:	480b      	ldr	r0, [pc, #44]	; (80046f4 <MX_GPIO_Init+0x90>)
 80046c8:	f7fd f9ca 	bl	8001a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IHM09LEDRED_Pin;
 80046cc:	2304      	movs	r3, #4
 80046ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046d0:	2301      	movs	r3, #1
 80046d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046d8:	2300      	movs	r3, #0
 80046da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IHM09LEDRED_GPIO_Port, &GPIO_InitStruct);
 80046dc:	f107 030c 	add.w	r3, r7, #12
 80046e0:	4619      	mov	r1, r3
 80046e2:	4804      	ldr	r0, [pc, #16]	; (80046f4 <MX_GPIO_Init+0x90>)
 80046e4:	f7fd f846 	bl	8001774 <HAL_GPIO_Init>

}
 80046e8:	bf00      	nop
 80046ea:	3720      	adds	r7, #32
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000
 80046f4:	48000400 	.word	0x48000400

080046f8 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8004702:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8004704:	edd7 7a01 	vldr	s15, [r7, #4]
 8004708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800470c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004710:	db0a      	blt.n	8004728 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8004712:	ed97 0a01 	vldr	s0, [r7, #4]
 8004716:	f000 fc1f 	bl	8004f58 <sqrtf>
 800471a:	eef0 7a40 	vmov.f32	s15, s0
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8004724:	2300      	movs	r3, #0
 8004726:	e005      	b.n	8004734 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8004730:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8004734:	4618      	mov	r0, r3
 8004736:	3708      	adds	r7, #8
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004742:	f7fc f95f 	bl	8000a04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004746:	f000 f816 	bl	8004776 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800474a:	f7ff ff8b 	bl	8004664 <MX_GPIO_Init>
  MX_ADC1_Init();
 800474e:	f7ff fe69 	bl	8004424 <MX_ADC1_Init>
  MX_DAC_Init();
 8004752:	f7ff ff17 	bl	8004584 <MX_DAC_Init>
  MX_TIM1_Init();
 8004756:	f000 f919 	bl	800498c <MX_TIM1_Init>
  MX_TIM2_Init();
 800475a:	f000 f9dd 	bl	8004b18 <MX_TIM2_Init>
  MX_TIM6_Init();
 800475e:	f000 fa51 	bl	8004c04 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  //math.hの動作確認用の適当な平方根計算
  float32_t sqrt_in = 1.0;
 8004762:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004766:	607b      	str	r3, [r7, #4]
  float32_t sqrt_out;
  arm_sqrt_f32(sqrt_in, &sqrt_out);
 8004768:	463b      	mov	r3, r7
 800476a:	4618      	mov	r0, r3
 800476c:	ed97 0a01 	vldr	s0, [r7, #4]
 8004770:	f7ff ffc2 	bl	80046f8 <arm_sqrt_f32>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004774:	e7fe      	b.n	8004774 <main+0x38>

08004776 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b09c      	sub	sp, #112	; 0x70
 800477a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800477c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004780:	2228      	movs	r2, #40	; 0x28
 8004782:	2100      	movs	r1, #0
 8004784:	4618      	mov	r0, r3
 8004786:	f000 fbdf 	bl	8004f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800478a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	605a      	str	r2, [r3, #4]
 8004794:	609a      	str	r2, [r3, #8]
 8004796:	60da      	str	r2, [r3, #12]
 8004798:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800479a:	463b      	mov	r3, r7
 800479c:	2234      	movs	r2, #52	; 0x34
 800479e:	2100      	movs	r1, #0
 80047a0:	4618      	mov	r0, r3
 80047a2:	f000 fbd1 	bl	8004f48 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80047a6:	2302      	movs	r3, #2
 80047a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80047aa:	2301      	movs	r3, #1
 80047ac:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80047ae:	2310      	movs	r3, #16
 80047b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047b2:	2302      	movs	r3, #2
 80047b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80047b6:	2300      	movs	r3, #0
 80047b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80047ba:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 80047be:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7fd f963 	bl	8001a90 <HAL_RCC_OscConfig>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80047d0:	f000 f82a 	bl	8004828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047d4:	230f      	movs	r3, #15
 80047d6:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047d8:	2302      	movs	r3, #2
 80047da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047dc:	2300      	movs	r3, #0
 80047de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80047e0:	2300      	movs	r3, #0
 80047e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80047e4:	2300      	movs	r3, #0
 80047e6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80047e8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80047ec:	2101      	movs	r1, #1
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe f83c 	bl	800286c <HAL_RCC_ClockConfig>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <SystemClock_Config+0x88>
  {
    Error_Handler();
 80047fa:	f000 f815 	bl	8004828 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
 80047fe:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8004802:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8004804:	2300      	movs	r3, #0
 8004806:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8004808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800480c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800480e:	463b      	mov	r3, r7
 8004810:	4618      	mov	r0, r3
 8004812:	f7fe fa11 	bl	8002c38 <HAL_RCCEx_PeriphCLKConfig>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800481c:	f000 f804 	bl	8004828 <Error_Handler>
  }
}
 8004820:	bf00      	nop
 8004822:	3770      	adds	r7, #112	; 0x70
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800482c:	bf00      	nop
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800483e:	4b0f      	ldr	r3, [pc, #60]	; (800487c <HAL_MspInit+0x44>)
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	4a0e      	ldr	r2, [pc, #56]	; (800487c <HAL_MspInit+0x44>)
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	6193      	str	r3, [r2, #24]
 800484a:	4b0c      	ldr	r3, [pc, #48]	; (800487c <HAL_MspInit+0x44>)
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	607b      	str	r3, [r7, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004856:	4b09      	ldr	r3, [pc, #36]	; (800487c <HAL_MspInit+0x44>)
 8004858:	69db      	ldr	r3, [r3, #28]
 800485a:	4a08      	ldr	r2, [pc, #32]	; (800487c <HAL_MspInit+0x44>)
 800485c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004860:	61d3      	str	r3, [r2, #28]
 8004862:	4b06      	ldr	r3, [pc, #24]	; (800487c <HAL_MspInit+0x44>)
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000

08004880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004880:	b480      	push	{r7}
 8004882:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800488e:	b480      	push	{r7}
 8004890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004892:	e7fe      	b.n	8004892 <HardFault_Handler+0x4>

08004894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004898:	e7fe      	b.n	8004898 <MemManage_Handler+0x4>

0800489a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800489a:	b480      	push	{r7}
 800489c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800489e:	e7fe      	b.n	800489e <BusFault_Handler+0x4>

080048a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048a4:	e7fe      	b.n	80048a4 <UsageFault_Handler+0x4>

080048a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048a6:	b480      	push	{r7}
 80048a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048aa:	bf00      	nop
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048b8:	bf00      	nop
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048c2:	b480      	push	{r7}
 80048c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048c6:	bf00      	nop
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048d4:	f7fc f8dc 	bl	8000a90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048d8:	bf00      	nop
 80048da:	bd80      	pop	{r7, pc}

080048dc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80048e0:	4803      	ldr	r0, [pc, #12]	; (80048f0 <TIM6_DAC_IRQHandler+0x14>)
 80048e2:	f7fe fc68 	bl	80031b6 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 80048e6:	4803      	ldr	r0, [pc, #12]	; (80048f4 <TIM6_DAC_IRQHandler+0x18>)
 80048e8:	f7fc fec5 	bl	8001676 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80048ec:	bf00      	nop
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	200000fc 	.word	0x200000fc
 80048f4:	200000e8 	.word	0x200000e8

080048f8 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048fc:	4b1f      	ldr	r3, [pc, #124]	; (800497c <SystemInit+0x84>)
 80048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004902:	4a1e      	ldr	r2, [pc, #120]	; (800497c <SystemInit+0x84>)
 8004904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800490c:	4b1c      	ldr	r3, [pc, #112]	; (8004980 <SystemInit+0x88>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a1b      	ldr	r2, [pc, #108]	; (8004980 <SystemInit+0x88>)
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004918:	4b19      	ldr	r3, [pc, #100]	; (8004980 <SystemInit+0x88>)
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	4918      	ldr	r1, [pc, #96]	; (8004980 <SystemInit+0x88>)
 800491e:	4b19      	ldr	r3, [pc, #100]	; (8004984 <SystemInit+0x8c>)
 8004920:	4013      	ands	r3, r2
 8004922:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004924:	4b16      	ldr	r3, [pc, #88]	; (8004980 <SystemInit+0x88>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a15      	ldr	r2, [pc, #84]	; (8004980 <SystemInit+0x88>)
 800492a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800492e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004932:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004934:	4b12      	ldr	r3, [pc, #72]	; (8004980 <SystemInit+0x88>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a11      	ldr	r2, [pc, #68]	; (8004980 <SystemInit+0x88>)
 800493a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800493e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004940:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <SystemInit+0x88>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <SystemInit+0x88>)
 8004946:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800494a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800494c:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <SystemInit+0x88>)
 800494e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004950:	4a0b      	ldr	r2, [pc, #44]	; (8004980 <SystemInit+0x88>)
 8004952:	f023 030f 	bic.w	r3, r3, #15
 8004956:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004958:	4b09      	ldr	r3, [pc, #36]	; (8004980 <SystemInit+0x88>)
 800495a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800495c:	4908      	ldr	r1, [pc, #32]	; (8004980 <SystemInit+0x88>)
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <SystemInit+0x90>)
 8004960:	4013      	ands	r3, r2
 8004962:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004964:	4b06      	ldr	r3, [pc, #24]	; (8004980 <SystemInit+0x88>)
 8004966:	2200      	movs	r2, #0
 8004968:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800496a:	4b04      	ldr	r3, [pc, #16]	; (800497c <SystemInit+0x84>)
 800496c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004970:	609a      	str	r2, [r3, #8]
#endif
}
 8004972:	bf00      	nop
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	e000ed00 	.word	0xe000ed00
 8004980:	40021000 	.word	0x40021000
 8004984:	f87fc00c 	.word	0xf87fc00c
 8004988:	ff00fccc 	.word	0xff00fccc

0800498c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b09a      	sub	sp, #104	; 0x68
 8004990:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004992:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	605a      	str	r2, [r3, #4]
 800499c:	609a      	str	r2, [r3, #8]
 800499e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	605a      	str	r2, [r3, #4]
 80049aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80049ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	60da      	str	r2, [r3, #12]
 80049ba:	611a      	str	r2, [r3, #16]
 80049bc:	615a      	str	r2, [r3, #20]
 80049be:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80049c0:	1d3b      	adds	r3, r7, #4
 80049c2:	222c      	movs	r2, #44	; 0x2c
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fabe 	bl	8004f48 <memset>

  htim1.Instance = TIM1;
 80049cc:	4b50      	ldr	r3, [pc, #320]	; (8004b10 <MX_TIM1_Init+0x184>)
 80049ce:	4a51      	ldr	r2, [pc, #324]	; (8004b14 <MX_TIM1_Init+0x188>)
 80049d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80049d2:	4b4f      	ldr	r3, [pc, #316]	; (8004b10 <MX_TIM1_Init+0x184>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80049d8:	4b4d      	ldr	r3, [pc, #308]	; (8004b10 <MX_TIM1_Init+0x184>)
 80049da:	2220      	movs	r2, #32
 80049dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 80049de:	4b4c      	ldr	r3, [pc, #304]	; (8004b10 <MX_TIM1_Init+0x184>)
 80049e0:	220a      	movs	r2, #10
 80049e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80049e4:	4b4a      	ldr	r3, [pc, #296]	; (8004b10 <MX_TIM1_Init+0x184>)
 80049e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80049ec:	4b48      	ldr	r3, [pc, #288]	; (8004b10 <MX_TIM1_Init+0x184>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049f2:	4b47      	ldr	r3, [pc, #284]	; (8004b10 <MX_TIM1_Init+0x184>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80049f8:	4845      	ldr	r0, [pc, #276]	; (8004b10 <MX_TIM1_Init+0x184>)
 80049fa:	f7fe faaf 	bl	8002f5c <HAL_TIM_Base_Init>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8004a04:	f7ff ff10 	bl	8004828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a0c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004a0e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004a12:	4619      	mov	r1, r3
 8004a14:	483e      	ldr	r0, [pc, #248]	; (8004b10 <MX_TIM1_Init+0x184>)
 8004a16:	f7fe fd89 	bl	800352c <HAL_TIM_ConfigClockSource>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8004a20:	f7ff ff02 	bl	8004828 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004a24:	483a      	ldr	r0, [pc, #232]	; (8004b10 <MX_TIM1_Init+0x184>)
 8004a26:	f7fe fac4 	bl	8002fb2 <HAL_TIM_OC_Init>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d001      	beq.n	8004a34 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8004a30:	f7ff fefa 	bl	8004828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a34:	2300      	movs	r3, #0
 8004a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004a40:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a44:	4619      	mov	r1, r3
 8004a46:	4832      	ldr	r0, [pc, #200]	; (8004b10 <MX_TIM1_Init+0x184>)
 8004a48:	f7ff fb38 	bl	80040bc <HAL_TIMEx_MasterConfigSynchronization>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8004a52:	f7ff fee9 	bl	8004828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8004a56:	2300      	movs	r3, #0
 8004a58:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004a62:	2300      	movs	r3, #0
 8004a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a66:	2300      	movs	r3, #0
 8004a68:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a76:	2200      	movs	r2, #0
 8004a78:	4619      	mov	r1, r3
 8004a7a:	4825      	ldr	r0, [pc, #148]	; (8004b10 <MX_TIM1_Init+0x184>)
 8004a7c:	f7ff faa0 	bl	8003fc0 <HAL_TIM_OC_ConfigChannel>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8004a86:	f7ff fecf 	bl	8004828 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004a8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a8e:	2204      	movs	r2, #4
 8004a90:	4619      	mov	r1, r3
 8004a92:	481f      	ldr	r0, [pc, #124]	; (8004b10 <MX_TIM1_Init+0x184>)
 8004a94:	f7ff fa94 	bl	8003fc0 <HAL_TIM_OC_ConfigChannel>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8004a9e:	f7ff fec3 	bl	8004828 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004aa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4819      	ldr	r0, [pc, #100]	; (8004b10 <MX_TIM1_Init+0x184>)
 8004aac:	f7ff fa88 	bl	8003fc0 <HAL_TIM_OC_ConfigChannel>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d001      	beq.n	8004aba <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8004ab6:	f7ff feb7 	bl	8004828 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004aba:	2300      	movs	r3, #0
 8004abc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 3;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8004aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ace:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004ad0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ad4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004ada:	2300      	movs	r3, #0
 8004adc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ae2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8004ae8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004aee:	1d3b      	adds	r3, r7, #4
 8004af0:	4619      	mov	r1, r3
 8004af2:	4807      	ldr	r0, [pc, #28]	; (8004b10 <MX_TIM1_Init+0x184>)
 8004af4:	f7ff fb30 	bl	8004158 <HAL_TIMEx_ConfigBreakDeadTime>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 8004afe:	f7ff fe93 	bl	8004828 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8004b02:	4803      	ldr	r0, [pc, #12]	; (8004b10 <MX_TIM1_Init+0x184>)
 8004b04:	f000 f976 	bl	8004df4 <HAL_TIM_MspPostInit>

}
 8004b08:	bf00      	nop
 8004b0a:	3768      	adds	r7, #104	; 0x68
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	2000013c 	.word	0x2000013c
 8004b14:	40012c00 	.word	0x40012c00

08004b18 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b090      	sub	sp, #64	; 0x40
 8004b1c:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8004b1e:	f107 031c 	add.w	r3, r7, #28
 8004b22:	2224      	movs	r2, #36	; 0x24
 8004b24:	2100      	movs	r1, #0
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fa0e 	bl	8004f48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b2c:	f107 0310 	add.w	r3, r7, #16
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	605a      	str	r2, [r3, #4]
 8004b36:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004b38:	463b      	mov	r3, r7
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	605a      	str	r2, [r3, #4]
 8004b40:	609a      	str	r2, [r3, #8]
 8004b42:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 8004b44:	4b2e      	ldr	r3, [pc, #184]	; (8004c00 <MX_TIM2_Init+0xe8>)
 8004b46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004b4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004b4c:	4b2c      	ldr	r3, [pc, #176]	; (8004c00 <MX_TIM2_Init+0xe8>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b52:	4b2b      	ldr	r3, [pc, #172]	; (8004c00 <MX_TIM2_Init+0xe8>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8004b58:	4b29      	ldr	r3, [pc, #164]	; (8004c00 <MX_TIM2_Init+0xe8>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b5e:	4b28      	ldr	r3, [pc, #160]	; (8004c00 <MX_TIM2_Init+0xe8>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b64:	4b26      	ldr	r3, [pc, #152]	; (8004c00 <MX_TIM2_Init+0xe8>)
 8004b66:	2200      	movs	r2, #0
 8004b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004b6a:	4825      	ldr	r0, [pc, #148]	; (8004c00 <MX_TIM2_Init+0xe8>)
 8004b6c:	f7fe fa56 	bl	800301c <HAL_TIM_IC_Init>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8004b76:	f7ff fe57 	bl	8004828 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004b82:	2301      	movs	r3, #1
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004b86:	2300      	movs	r3, #0
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Filter = 0;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004b92:	2301      	movs	r3, #1
 8004b94:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004b96:	2300      	movs	r3, #0
 8004b98:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Filter = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8004b9e:	f107 031c 	add.w	r3, r7, #28
 8004ba2:	4619      	mov	r1, r3
 8004ba4:	4816      	ldr	r0, [pc, #88]	; (8004c00 <MX_TIM2_Init+0xe8>)
 8004ba6:	f7fe fa64 	bl	8003072 <HAL_TIM_Encoder_Init>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004bb0:	f7ff fe3a 	bl	8004828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004bbc:	f107 0310 	add.w	r3, r7, #16
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	480f      	ldr	r0, [pc, #60]	; (8004c00 <MX_TIM2_Init+0xe8>)
 8004bc4:	f7ff fa7a 	bl	80040bc <HAL_TIMEx_MasterConfigSynchronization>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8004bce:	f7ff fe2b 	bl	8004828 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004bda:	2300      	movs	r3, #0
 8004bdc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8004bde:	2300      	movs	r3, #0
 8004be0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8004be2:	463b      	mov	r3, r7
 8004be4:	2208      	movs	r2, #8
 8004be6:	4619      	mov	r1, r3
 8004be8:	4805      	ldr	r0, [pc, #20]	; (8004c00 <MX_TIM2_Init+0xe8>)
 8004bea:	f7fe fc03 	bl	80033f4 <HAL_TIM_IC_ConfigChannel>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d001      	beq.n	8004bf8 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8004bf4:	f7ff fe18 	bl	8004828 <Error_Handler>
  }

}
 8004bf8:	bf00      	nop
 8004bfa:	3740      	adds	r7, #64	; 0x40
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	2000017c 	.word	0x2000017c

08004c04 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c0a:	1d3b      	adds	r3, r7, #4
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	605a      	str	r2, [r3, #4]
 8004c12:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 8004c14:	4b15      	ldr	r3, [pc, #84]	; (8004c6c <MX_TIM6_Init+0x68>)
 8004c16:	4a16      	ldr	r2, [pc, #88]	; (8004c70 <MX_TIM6_Init+0x6c>)
 8004c18:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 5000;
 8004c1a:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <MX_TIM6_Init+0x68>)
 8004c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c20:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <MX_TIM6_Init+0x68>)
 8004c24:	2200      	movs	r2, #0
 8004c26:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 8004c28:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <MX_TIM6_Init+0x68>)
 8004c2a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004c2e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c30:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <MX_TIM6_Init+0x68>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004c36:	480d      	ldr	r0, [pc, #52]	; (8004c6c <MX_TIM6_Init+0x68>)
 8004c38:	f7fe f990 	bl	8002f5c <HAL_TIM_Base_Init>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8004c42:	f7ff fdf1 	bl	8004828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8004c46:	2310      	movs	r3, #16
 8004c48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004c4e:	1d3b      	adds	r3, r7, #4
 8004c50:	4619      	mov	r1, r3
 8004c52:	4806      	ldr	r0, [pc, #24]	; (8004c6c <MX_TIM6_Init+0x68>)
 8004c54:	f7ff fa32 	bl	80040bc <HAL_TIMEx_MasterConfigSynchronization>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8004c5e:	f7ff fde3 	bl	8004828 <Error_Handler>
  }

}
 8004c62:	bf00      	nop
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	200000fc 	.word	0x200000fc
 8004c70:	40001000 	.word	0x40001000

08004c74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c7c:	f107 0314 	add.w	r3, r7, #20
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	609a      	str	r2, [r3, #8]
 8004c88:	60da      	str	r2, [r3, #12]
 8004c8a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a24      	ldr	r2, [pc, #144]	; (8004d24 <HAL_TIM_Base_MspInit+0xb0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d129      	bne.n	8004cea <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c96:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <HAL_TIM_Base_MspInit+0xb4>)
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	4a23      	ldr	r2, [pc, #140]	; (8004d28 <HAL_TIM_Base_MspInit+0xb4>)
 8004c9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ca0:	6193      	str	r3, [r2, #24]
 8004ca2:	4b21      	ldr	r3, [pc, #132]	; (8004d28 <HAL_TIM_Base_MspInit+0xb4>)
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004caa:	613b      	str	r3, [r7, #16]
 8004cac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cae:	4b1e      	ldr	r3, [pc, #120]	; (8004d28 <HAL_TIM_Base_MspInit+0xb4>)
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	4a1d      	ldr	r2, [pc, #116]	; (8004d28 <HAL_TIM_Base_MspInit+0xb4>)
 8004cb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cb8:	6153      	str	r3, [r2, #20]
 8004cba:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <HAL_TIM_Base_MspInit+0xb4>)
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PB12     ------> TIM1_BKIN 
    */
    GPIO_InitStruct.Pin = KILL_Pin;
 8004cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004cd8:	2306      	movs	r3, #6
 8004cda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(KILL_GPIO_Port, &GPIO_InitStruct);
 8004cdc:	f107 0314 	add.w	r3, r7, #20
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4812      	ldr	r0, [pc, #72]	; (8004d2c <HAL_TIM_Base_MspInit+0xb8>)
 8004ce4:	f7fc fd46 	bl	8001774 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8004ce8:	e018      	b.n	8004d1c <HAL_TIM_Base_MspInit+0xa8>
  else if(tim_baseHandle->Instance==TIM6)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a10      	ldr	r2, [pc, #64]	; (8004d30 <HAL_TIM_Base_MspInit+0xbc>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d113      	bne.n	8004d1c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004cf4:	4b0c      	ldr	r3, [pc, #48]	; (8004d28 <HAL_TIM_Base_MspInit+0xb4>)
 8004cf6:	69db      	ldr	r3, [r3, #28]
 8004cf8:	4a0b      	ldr	r2, [pc, #44]	; (8004d28 <HAL_TIM_Base_MspInit+0xb4>)
 8004cfa:	f043 0310 	orr.w	r3, r3, #16
 8004cfe:	61d3      	str	r3, [r2, #28]
 8004d00:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_TIM_Base_MspInit+0xb4>)
 8004d02:	69db      	ldr	r3, [r3, #28]
 8004d04:	f003 0310 	and.w	r3, r3, #16
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2100      	movs	r1, #0
 8004d10:	2036      	movs	r0, #54	; 0x36
 8004d12:	f7fc fc4e 	bl	80015b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004d16:	2036      	movs	r0, #54	; 0x36
 8004d18:	f7fc fc67 	bl	80015ea <HAL_NVIC_EnableIRQ>
}
 8004d1c:	bf00      	nop
 8004d1e:	3728      	adds	r7, #40	; 0x28
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40012c00 	.word	0x40012c00
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	48000400 	.word	0x48000400
 8004d30:	40001000 	.word	0x40001000

08004d34 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	; 0x28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d3c:	f107 0314 	add.w	r3, r7, #20
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d54:	d146      	bne.n	8004de4 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d56:	4b25      	ldr	r3, [pc, #148]	; (8004dec <HAL_TIM_IC_MspInit+0xb8>)
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	4a24      	ldr	r2, [pc, #144]	; (8004dec <HAL_TIM_IC_MspInit+0xb8>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	61d3      	str	r3, [r2, #28]
 8004d62:	4b22      	ldr	r3, [pc, #136]	; (8004dec <HAL_TIM_IC_MspInit+0xb8>)
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d6e:	4b1f      	ldr	r3, [pc, #124]	; (8004dec <HAL_TIM_IC_MspInit+0xb8>)
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	4a1e      	ldr	r2, [pc, #120]	; (8004dec <HAL_TIM_IC_MspInit+0xb8>)
 8004d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d78:	6153      	str	r3, [r2, #20]
 8004d7a:	4b1c      	ldr	r3, [pc, #112]	; (8004dec <HAL_TIM_IC_MspInit+0xb8>)
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d86:	4b19      	ldr	r3, [pc, #100]	; (8004dec <HAL_TIM_IC_MspInit+0xb8>)
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	4a18      	ldr	r2, [pc, #96]	; (8004dec <HAL_TIM_IC_MspInit+0xb8>)
 8004d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d90:	6153      	str	r3, [r2, #20]
 8004d92:	4b16      	ldr	r3, [pc, #88]	; (8004dec <HAL_TIM_IC_MspInit+0xb8>)
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9a:	60bb      	str	r3, [r7, #8]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = Z_Pin|B_Pin;
 8004d9e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8004da2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004da4:	2302      	movs	r3, #2
 8004da6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004da8:	2301      	movs	r3, #1
 8004daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dac:	2300      	movs	r3, #0
 8004dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004db0:	2301      	movs	r3, #1
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004db4:	f107 0314 	add.w	r3, r7, #20
 8004db8:	4619      	mov	r1, r3
 8004dba:	480d      	ldr	r0, [pc, #52]	; (8004df0 <HAL_TIM_IC_MspInit+0xbc>)
 8004dbc:	f7fc fcda 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_Pin;
 8004dc0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8004dd6:	f107 0314 	add.w	r3, r7, #20
 8004dda:	4619      	mov	r1, r3
 8004ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004de0:	f7fc fcc8 	bl	8001774 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8004de4:	bf00      	nop
 8004de6:	3728      	adds	r7, #40	; 0x28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	40021000 	.word	0x40021000
 8004df0:	48000400 	.word	0x48000400

08004df4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08a      	sub	sp, #40	; 0x28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dfc:	f107 0314 	add.w	r3, r7, #20
 8004e00:	2200      	movs	r2, #0
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	605a      	str	r2, [r3, #4]
 8004e06:	609a      	str	r2, [r3, #8]
 8004e08:	60da      	str	r2, [r3, #12]
 8004e0a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a20      	ldr	r2, [pc, #128]	; (8004e94 <HAL_TIM_MspPostInit+0xa0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d139      	bne.n	8004e8a <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e16:	4b20      	ldr	r3, [pc, #128]	; (8004e98 <HAL_TIM_MspPostInit+0xa4>)
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	4a1f      	ldr	r2, [pc, #124]	; (8004e98 <HAL_TIM_MspPostInit+0xa4>)
 8004e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e20:	6153      	str	r3, [r2, #20]
 8004e22:	4b1d      	ldr	r3, [pc, #116]	; (8004e98 <HAL_TIM_MspPostInit+0xa4>)
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e2e:	4b1a      	ldr	r3, [pc, #104]	; (8004e98 <HAL_TIM_MspPostInit+0xa4>)
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	4a19      	ldr	r2, [pc, #100]	; (8004e98 <HAL_TIM_MspPostInit+0xa4>)
 8004e34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e38:	6153      	str	r3, [r2, #20]
 8004e3a:	4b17      	ldr	r3, [pc, #92]	; (8004e98 <HAL_TIM_MspPostInit+0xa4>)
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = U_L_Pin|U_H_Pin|V_H_Pin|W_H_Pin;
 8004e46:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8004e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e54:	2300      	movs	r3, #0
 8004e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004e58:	2306      	movs	r3, #6
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e5c:	f107 0314 	add.w	r3, r7, #20
 8004e60:	4619      	mov	r1, r3
 8004e62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e66:	f7fc fc85 	bl	8001774 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_L_Pin|W_L_Pin;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e76:	2300      	movs	r3, #0
 8004e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004e7a:	2306      	movs	r3, #6
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e7e:	f107 0314 	add.w	r3, r7, #20
 8004e82:	4619      	mov	r1, r3
 8004e84:	4805      	ldr	r0, [pc, #20]	; (8004e9c <HAL_TIM_MspPostInit+0xa8>)
 8004e86:	f7fc fc75 	bl	8001774 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004e8a:	bf00      	nop
 8004e8c:	3728      	adds	r7, #40	; 0x28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40021000 	.word	0x40021000
 8004e9c:	48000400 	.word	0x48000400

08004ea0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004ed8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004ea4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004ea6:	e003      	b.n	8004eb0 <LoopCopyDataInit>

08004ea8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004ea8:	4b0c      	ldr	r3, [pc, #48]	; (8004edc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004eaa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004eac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004eae:	3104      	adds	r1, #4

08004eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004eb0:	480b      	ldr	r0, [pc, #44]	; (8004ee0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004eb4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004eb6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004eb8:	d3f6      	bcc.n	8004ea8 <CopyDataInit>
	ldr	r2, =_sbss
 8004eba:	4a0b      	ldr	r2, [pc, #44]	; (8004ee8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004ebc:	e002      	b.n	8004ec4 <LoopFillZerobss>

08004ebe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004ebe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004ec0:	f842 3b04 	str.w	r3, [r2], #4

08004ec4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004ec4:	4b09      	ldr	r3, [pc, #36]	; (8004eec <LoopForever+0x16>)
	cmp	r2, r3
 8004ec6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004ec8:	d3f9      	bcc.n	8004ebe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004eca:	f7ff fd15 	bl	80048f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ece:	f000 f817 	bl	8004f00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004ed2:	f7ff fc33 	bl	800473c <main>

08004ed6 <LoopForever>:

LoopForever:
    b LoopForever
 8004ed6:	e7fe      	b.n	8004ed6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004ed8:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8004edc:	0800505c 	.word	0x0800505c
	ldr	r0, =_sdata
 8004ee0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004ee4:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8004ee8:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8004eec:	200001bc 	.word	0x200001bc

08004ef0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004ef0:	e7fe      	b.n	8004ef0 <ADC1_IRQHandler>
	...

08004ef4 <__errno>:
 8004ef4:	4b01      	ldr	r3, [pc, #4]	; (8004efc <__errno+0x8>)
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	2000000c 	.word	0x2000000c

08004f00 <__libc_init_array>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	4e0d      	ldr	r6, [pc, #52]	; (8004f38 <__libc_init_array+0x38>)
 8004f04:	4c0d      	ldr	r4, [pc, #52]	; (8004f3c <__libc_init_array+0x3c>)
 8004f06:	1ba4      	subs	r4, r4, r6
 8004f08:	10a4      	asrs	r4, r4, #2
 8004f0a:	2500      	movs	r5, #0
 8004f0c:	42a5      	cmp	r5, r4
 8004f0e:	d109      	bne.n	8004f24 <__libc_init_array+0x24>
 8004f10:	4e0b      	ldr	r6, [pc, #44]	; (8004f40 <__libc_init_array+0x40>)
 8004f12:	4c0c      	ldr	r4, [pc, #48]	; (8004f44 <__libc_init_array+0x44>)
 8004f14:	f000 f876 	bl	8005004 <_init>
 8004f18:	1ba4      	subs	r4, r4, r6
 8004f1a:	10a4      	asrs	r4, r4, #2
 8004f1c:	2500      	movs	r5, #0
 8004f1e:	42a5      	cmp	r5, r4
 8004f20:	d105      	bne.n	8004f2e <__libc_init_array+0x2e>
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
 8004f24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f28:	4798      	blx	r3
 8004f2a:	3501      	adds	r5, #1
 8004f2c:	e7ee      	b.n	8004f0c <__libc_init_array+0xc>
 8004f2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004f32:	4798      	blx	r3
 8004f34:	3501      	adds	r5, #1
 8004f36:	e7f2      	b.n	8004f1e <__libc_init_array+0x1e>
 8004f38:	08005054 	.word	0x08005054
 8004f3c:	08005054 	.word	0x08005054
 8004f40:	08005054 	.word	0x08005054
 8004f44:	08005058 	.word	0x08005058

08004f48 <memset>:
 8004f48:	4402      	add	r2, r0
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d100      	bne.n	8004f52 <memset+0xa>
 8004f50:	4770      	bx	lr
 8004f52:	f803 1b01 	strb.w	r1, [r3], #1
 8004f56:	e7f9      	b.n	8004f4c <memset+0x4>

08004f58 <sqrtf>:
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	ed2d 8b02 	vpush	{d8}
 8004f5e:	b08a      	sub	sp, #40	; 0x28
 8004f60:	eeb0 8a40 	vmov.f32	s16, s0
 8004f64:	f000 f848 	bl	8004ff8 <__ieee754_sqrtf>
 8004f68:	4b21      	ldr	r3, [pc, #132]	; (8004ff0 <sqrtf+0x98>)
 8004f6a:	f993 4000 	ldrsb.w	r4, [r3]
 8004f6e:	1c63      	adds	r3, r4, #1
 8004f70:	d02c      	beq.n	8004fcc <sqrtf+0x74>
 8004f72:	eeb4 8a48 	vcmp.f32	s16, s16
 8004f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f7a:	d627      	bvs.n	8004fcc <sqrtf+0x74>
 8004f7c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8004f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f84:	d522      	bpl.n	8004fcc <sqrtf+0x74>
 8004f86:	2301      	movs	r3, #1
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	4b1a      	ldr	r3, [pc, #104]	; (8004ff4 <sqrtf+0x9c>)
 8004f8c:	9301      	str	r3, [sp, #4]
 8004f8e:	ee18 0a10 	vmov	r0, s16
 8004f92:	2300      	movs	r3, #0
 8004f94:	9308      	str	r3, [sp, #32]
 8004f96:	f7fb fa7b 	bl	8000490 <__aeabi_f2d>
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004fa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	b9ac      	cbnz	r4, 8004fd4 <sqrtf+0x7c>
 8004fa8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004fac:	4668      	mov	r0, sp
 8004fae:	f000 f826 	bl	8004ffe <matherr>
 8004fb2:	b1b8      	cbz	r0, 8004fe4 <sqrtf+0x8c>
 8004fb4:	9b08      	ldr	r3, [sp, #32]
 8004fb6:	b11b      	cbz	r3, 8004fc0 <sqrtf+0x68>
 8004fb8:	f7ff ff9c 	bl	8004ef4 <__errno>
 8004fbc:	9b08      	ldr	r3, [sp, #32]
 8004fbe:	6003      	str	r3, [r0, #0]
 8004fc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fc4:	f7fb fcce 	bl	8000964 <__aeabi_d2f>
 8004fc8:	ee00 0a10 	vmov	s0, r0
 8004fcc:	b00a      	add	sp, #40	; 0x28
 8004fce:	ecbd 8b02 	vpop	{d8}
 8004fd2:	bd10      	pop	{r4, pc}
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	f7fb fbdc 	bl	8000794 <__aeabi_ddiv>
 8004fdc:	2c02      	cmp	r4, #2
 8004fde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004fe2:	d1e3      	bne.n	8004fac <sqrtf+0x54>
 8004fe4:	f7ff ff86 	bl	8004ef4 <__errno>
 8004fe8:	2321      	movs	r3, #33	; 0x21
 8004fea:	6003      	str	r3, [r0, #0]
 8004fec:	e7e2      	b.n	8004fb4 <sqrtf+0x5c>
 8004fee:	bf00      	nop
 8004ff0:	20000070 	.word	0x20000070
 8004ff4:	0800504c 	.word	0x0800504c

08004ff8 <__ieee754_sqrtf>:
 8004ff8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004ffc:	4770      	bx	lr

08004ffe <matherr>:
 8004ffe:	2000      	movs	r0, #0
 8005000:	4770      	bx	lr
	...

08005004 <_init>:
 8005004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005006:	bf00      	nop
 8005008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800500a:	bc08      	pop	{r3}
 800500c:	469e      	mov	lr, r3
 800500e:	4770      	bx	lr

08005010 <_fini>:
 8005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005012:	bf00      	nop
 8005014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005016:	bc08      	pop	{r3}
 8005018:	469e      	mov	lr, r3
 800501a:	4770      	bx	lr
