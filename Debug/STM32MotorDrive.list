
STM32MotorDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004548  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004700  08004700  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004700  08004700  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004700  08004700  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004700  08004700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004704  08004704  00014704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004708  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  08004714  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08004714  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001360b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000226f  00000000  00000000  00033647  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  000358b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae0  00000000  00000000  00036480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001977b  00000000  00000000  00036f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bda4  00000000  00000000  000506db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c285  00000000  00000000  0005c47f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8704  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b0  00000000  00000000  000e8780  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046b8 	.word	0x080046b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080046b8 	.word	0x080046b8

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 fdc1 	bl	8000d60 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f003 ffb6 	bl	8004154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 fdd9 	bl	8000dca <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 fda1 	bl	8000d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000028 	.word	0x20000028

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b09c      	sub	sp, #112	; 0x70
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800029c:	2300      	movs	r3, #0
 800029e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80002a2:	2300      	movs	r3, #0
 80002a4:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d101      	bne.n	80002b4 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80002b0:	2301      	movs	r3, #1
 80002b2:	e167      	b.n	8000584 <HAL_ADC_Init+0x2f0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	691b      	ldr	r3, [r3, #16]
 80002b8:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002be:	f003 0310 	and.w	r3, r3, #16
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d176      	bne.n	80003b4 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d152      	bne.n	8000374 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2200      	movs	r2, #0
 80002d2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2200      	movs	r2, #0
 80002d8:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	2200      	movs	r2, #0
 80002de:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2200      	movs	r2, #0
 80002e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 80002e8:	6878      	ldr	r0, [r7, #4]
 80002ea:	f003 ff57 	bl	800419c <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d13b      	bne.n	8000374 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80002fc:	6878      	ldr	r0, [r7, #4]
 80002fe:	f000 fc03 	bl	8000b08 <ADC_Disable>
 8000302:	4603      	mov	r3, r0
 8000304:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800030c:	f003 0310 	and.w	r3, r3, #16
 8000310:	2b00      	cmp	r3, #0
 8000312:	d12f      	bne.n	8000374 <HAL_ADC_Init+0xe0>
 8000314:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000318:	2b00      	cmp	r3, #0
 800031a:	d12b      	bne.n	8000374 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000320:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000324:	f023 0302 	bic.w	r3, r3, #2
 8000328:	f043 0202 	orr.w	r2, r3, #2
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	689a      	ldr	r2, [r3, #8]
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800033e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	689a      	ldr	r2, [r3, #8]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800034e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000350:	4b8e      	ldr	r3, [pc, #568]	; (800058c <HAL_ADC_Init+0x2f8>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a8e      	ldr	r2, [pc, #568]	; (8000590 <HAL_ADC_Init+0x2fc>)
 8000356:	fba2 2303 	umull	r2, r3, r2, r3
 800035a:	0c9a      	lsrs	r2, r3, #18
 800035c:	4613      	mov	r3, r2
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	4413      	add	r3, r2
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000366:	e002      	b.n	800036e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	3b01      	subs	r3, #1
 800036c:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d1f9      	bne.n	8000368 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	689b      	ldr	r3, [r3, #8]
 800037a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800037e:	2b00      	cmp	r3, #0
 8000380:	d007      	beq.n	8000392 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800038c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000390:	d110      	bne.n	80003b4 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000396:	f023 0312 	bic.w	r3, r3, #18
 800039a:	f043 0210 	orr.w	r2, r3, #16
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80003a6:	f043 0201 	orr.w	r2, r3, #1
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 80003ae:	2301      	movs	r3, #1
 80003b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003b8:	f003 0310 	and.w	r3, r3, #16
 80003bc:	2b00      	cmp	r3, #0
 80003be:	f040 80d4 	bne.w	800056a <HAL_ADC_Init+0x2d6>
 80003c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	f040 80cf 	bne.w	800056a <HAL_ADC_Init+0x2d6>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	f040 80c7 	bne.w	800056a <HAL_ADC_Init+0x2d6>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80003e4:	f043 0202 	orr.w	r2, r3, #2
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80003ec:	4b69      	ldr	r3, [pc, #420]	; (8000594 <HAL_ADC_Init+0x300>)
 80003ee:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80003f0:	2300      	movs	r3, #0
 80003f2:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	689b      	ldr	r3, [r3, #8]
 80003fa:	f003 0303 	and.w	r3, r3, #3
 80003fe:	2b01      	cmp	r3, #1
 8000400:	d108      	bne.n	8000414 <HAL_ADC_Init+0x180>
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	f003 0301 	and.w	r3, r3, #1
 800040c:	2b01      	cmp	r3, #1
 800040e:	d101      	bne.n	8000414 <HAL_ADC_Init+0x180>
 8000410:	2301      	movs	r3, #1
 8000412:	e000      	b.n	8000416 <HAL_ADC_Init+0x182>
 8000414:	2300      	movs	r3, #0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d11c      	bne.n	8000454 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800041a:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800041c:	2b00      	cmp	r3, #0
 800041e:	d010      	beq.n	8000442 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	689b      	ldr	r3, [r3, #8]
 8000424:	f003 0303 	and.w	r3, r3, #3
 8000428:	2b01      	cmp	r3, #1
 800042a:	d107      	bne.n	800043c <HAL_ADC_Init+0x1a8>
 800042c:	693b      	ldr	r3, [r7, #16]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	f003 0301 	and.w	r3, r3, #1
 8000434:	2b01      	cmp	r3, #1
 8000436:	d101      	bne.n	800043c <HAL_ADC_Init+0x1a8>
 8000438:	2301      	movs	r3, #1
 800043a:	e000      	b.n	800043e <HAL_ADC_Init+0x1aa>
 800043c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800043e:	2b00      	cmp	r3, #0
 8000440:	d108      	bne.n	8000454 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	685b      	ldr	r3, [r3, #4]
 800044e:	431a      	orrs	r2, r3
 8000450:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000452:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	69db      	ldr	r3, [r3, #28]
 8000458:	035b      	lsls	r3, r3, #13
 800045a:	687a      	ldr	r2, [r7, #4]
 800045c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800045e:	2a01      	cmp	r2, #1
 8000460:	d002      	beq.n	8000468 <HAL_ADC_Init+0x1d4>
 8000462:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000466:	e000      	b.n	800046a <HAL_ADC_Init+0x1d6>
 8000468:	2200      	movs	r2, #0
 800046a:	431a      	orrs	r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	431a      	orrs	r2, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	689b      	ldr	r3, [r3, #8]
 8000476:	4313      	orrs	r3, r2
 8000478:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800047a:	4313      	orrs	r3, r2
 800047c:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000482:	2b01      	cmp	r3, #1
 8000484:	d11b      	bne.n	80004be <HAL_ADC_Init+0x22a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	69db      	ldr	r3, [r3, #28]
 800048a:	2b00      	cmp	r3, #0
 800048c:	d109      	bne.n	80004a2 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000492:	3b01      	subs	r3, #1
 8000494:	045a      	lsls	r2, r3, #17
 8000496:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000498:	4313      	orrs	r3, r2
 800049a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800049e:	66bb      	str	r3, [r7, #104]	; 0x68
 80004a0:	e00d      	b.n	80004be <HAL_ADC_Init+0x22a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004a6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80004aa:	f043 0220 	orr.w	r2, r3, #32
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004b6:	f043 0201 	orr.w	r2, r3, #1
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d007      	beq.n	80004d6 <HAL_ADC_Init+0x242>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ce:	4313      	orrs	r3, r2
 80004d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80004d2:	4313      	orrs	r3, r2
 80004d4:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	689b      	ldr	r3, [r3, #8]
 80004dc:	f003 030c 	and.w	r3, r3, #12
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d113      	bne.n	800050c <HAL_ADC_Init+0x278>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	68db      	ldr	r3, [r3, #12]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	6812      	ldr	r2, [r2, #0]
 80004ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80004f2:	f023 0302 	bic.w	r3, r3, #2
 80004f6:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	039a      	lsls	r2, r3, #14
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	4313      	orrs	r3, r2
 8000506:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000508:	4313      	orrs	r3, r2
 800050a:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	68da      	ldr	r2, [r3, #12]
 8000512:	4b21      	ldr	r3, [pc, #132]	; (8000598 <HAL_ADC_Init+0x304>)
 8000514:	4013      	ands	r3, r2
 8000516:	687a      	ldr	r2, [r7, #4]
 8000518:	6812      	ldr	r2, [r2, #0]
 800051a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800051c:	430b      	orrs	r3, r1
 800051e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	691b      	ldr	r3, [r3, #16]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d10c      	bne.n	8000542 <HAL_ADC_Init+0x2ae>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f023 010f 	bic.w	r1, r3, #15
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6a1b      	ldr	r3, [r3, #32]
 8000536:	1e5a      	subs	r2, r3, #1
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	430a      	orrs	r2, r1
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
 8000540:	e007      	b.n	8000552 <HAL_ADC_Init+0x2be>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f022 020f 	bic.w	r2, r2, #15
 8000550:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2200      	movs	r2, #0
 8000556:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800055c:	f023 0303 	bic.w	r3, r3, #3
 8000560:	f043 0201 	orr.w	r2, r3, #1
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	645a      	str	r2, [r3, #68]	; 0x44
 8000568:	e00a      	b.n	8000580 <HAL_ADC_Init+0x2ec>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800056e:	f023 0312 	bic.w	r3, r3, #18
 8000572:	f043 0210 	orr.w	r2, r3, #16
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800057a:	2301      	movs	r3, #1
 800057c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000580:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000584:	4618      	mov	r0, r3
 8000586:	3770      	adds	r7, #112	; 0x70
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	20000008 	.word	0x20000008
 8000590:	431bde83 	.word	0x431bde83
 8000594:	50000300 	.word	0x50000300
 8000598:	fff0c007 	.word	0xfff0c007

0800059c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800059c:	b480      	push	{r7}
 800059e:	b09d      	sub	sp, #116	; 0x74
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005a6:	2300      	movs	r3, #0
 80005a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80005b6:	2b01      	cmp	r3, #1
 80005b8:	d101      	bne.n	80005be <HAL_ADC_ConfigChannel+0x22>
 80005ba:	2302      	movs	r3, #2
 80005bc:	e299      	b.n	8000af2 <HAL_ADC_ConfigChannel+0x556>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2201      	movs	r2, #1
 80005c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	f003 0304 	and.w	r3, r3, #4
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	f040 827d 	bne.w	8000ad0 <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80005d6:	683b      	ldr	r3, [r7, #0]
 80005d8:	685b      	ldr	r3, [r3, #4]
 80005da:	2b04      	cmp	r3, #4
 80005dc:	d81c      	bhi.n	8000618 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	461a      	mov	r2, r3
 80005f2:	231f      	movs	r3, #31
 80005f4:	4093      	lsls	r3, r2
 80005f6:	43db      	mvns	r3, r3
 80005f8:	4019      	ands	r1, r3
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	6818      	ldr	r0, [r3, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	685a      	ldr	r2, [r3, #4]
 8000602:	4613      	mov	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	4413      	add	r3, r2
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	fa00 f203 	lsl.w	r2, r0, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	430a      	orrs	r2, r1
 8000614:	631a      	str	r2, [r3, #48]	; 0x30
 8000616:	e063      	b.n	80006e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	2b09      	cmp	r3, #9
 800061e:	d81e      	bhi.n	800065e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	4613      	mov	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	4413      	add	r3, r2
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	3b1e      	subs	r3, #30
 8000634:	221f      	movs	r2, #31
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	43db      	mvns	r3, r3
 800063c:	4019      	ands	r1, r3
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	6818      	ldr	r0, [r3, #0]
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	4613      	mov	r3, r2
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	4413      	add	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	3b1e      	subs	r3, #30
 8000650:	fa00 f203 	lsl.w	r2, r0, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	430a      	orrs	r2, r1
 800065a:	635a      	str	r2, [r3, #52]	; 0x34
 800065c:	e040      	b.n	80006e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	685b      	ldr	r3, [r3, #4]
 8000662:	2b0e      	cmp	r3, #14
 8000664:	d81e      	bhi.n	80006a4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	4613      	mov	r3, r2
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	4413      	add	r3, r2
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	3b3c      	subs	r3, #60	; 0x3c
 800067a:	221f      	movs	r2, #31
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	43db      	mvns	r3, r3
 8000682:	4019      	ands	r1, r3
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	685a      	ldr	r2, [r3, #4]
 800068c:	4613      	mov	r3, r2
 800068e:	005b      	lsls	r3, r3, #1
 8000690:	4413      	add	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	3b3c      	subs	r3, #60	; 0x3c
 8000696:	fa00 f203 	lsl.w	r2, r0, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	430a      	orrs	r2, r1
 80006a0:	639a      	str	r2, [r3, #56]	; 0x38
 80006a2:	e01d      	b.n	80006e0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	685a      	ldr	r2, [r3, #4]
 80006ae:	4613      	mov	r3, r2
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	4413      	add	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	3b5a      	subs	r3, #90	; 0x5a
 80006b8:	221f      	movs	r2, #31
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	43db      	mvns	r3, r3
 80006c0:	4019      	ands	r1, r3
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	6818      	ldr	r0, [r3, #0]
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	685a      	ldr	r2, [r3, #4]
 80006ca:	4613      	mov	r3, r2
 80006cc:	005b      	lsls	r3, r3, #1
 80006ce:	4413      	add	r3, r2
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	3b5a      	subs	r3, #90	; 0x5a
 80006d4:	fa00 f203 	lsl.w	r2, r0, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	430a      	orrs	r2, r1
 80006de:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	f003 030c 	and.w	r3, r3, #12
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	f040 80e5 	bne.w	80008ba <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b09      	cmp	r3, #9
 80006f6:	d91c      	bls.n	8000732 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	6999      	ldr	r1, [r3, #24]
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	3b1e      	subs	r3, #30
 800070a:	2207      	movs	r2, #7
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	43db      	mvns	r3, r3
 8000712:	4019      	ands	r1, r3
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	6898      	ldr	r0, [r3, #8]
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	4613      	mov	r3, r2
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4413      	add	r3, r2
 8000722:	3b1e      	subs	r3, #30
 8000724:	fa00 f203 	lsl.w	r2, r0, r3
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	430a      	orrs	r2, r1
 800072e:	619a      	str	r2, [r3, #24]
 8000730:	e019      	b.n	8000766 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6959      	ldr	r1, [r3, #20]
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	4613      	mov	r3, r2
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	4413      	add	r3, r2
 8000742:	2207      	movs	r2, #7
 8000744:	fa02 f303 	lsl.w	r3, r2, r3
 8000748:	43db      	mvns	r3, r3
 800074a:	4019      	ands	r1, r3
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	6898      	ldr	r0, [r3, #8]
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4613      	mov	r3, r2
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	4413      	add	r3, r2
 800075a:	fa00 f203 	lsl.w	r2, r0, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	430a      	orrs	r2, r1
 8000764:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	695a      	ldr	r2, [r3, #20]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	08db      	lsrs	r3, r3, #3
 8000772:	f003 0303 	and.w	r3, r3, #3
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	fa02 f303 	lsl.w	r3, r2, r3
 800077c:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	691b      	ldr	r3, [r3, #16]
 8000782:	3b01      	subs	r3, #1
 8000784:	2b03      	cmp	r3, #3
 8000786:	d84f      	bhi.n	8000828 <HAL_ADC_ConfigChannel+0x28c>
 8000788:	a201      	add	r2, pc, #4	; (adr r2, 8000790 <HAL_ADC_ConfigChannel+0x1f4>)
 800078a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800078e:	bf00      	nop
 8000790:	080007a1 	.word	0x080007a1
 8000794:	080007c3 	.word	0x080007c3
 8000798:	080007e5 	.word	0x080007e5
 800079c:	08000807 	.word	0x08000807
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80007a6:	4b99      	ldr	r3, [pc, #612]	; (8000a0c <HAL_ADC_ConfigChannel+0x470>)
 80007a8:	4013      	ands	r3, r2
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	6812      	ldr	r2, [r2, #0]
 80007ae:	0691      	lsls	r1, r2, #26
 80007b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80007b2:	430a      	orrs	r2, r1
 80007b4:	431a      	orrs	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80007be:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80007c0:	e07e      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80007c8:	4b90      	ldr	r3, [pc, #576]	; (8000a0c <HAL_ADC_ConfigChannel+0x470>)
 80007ca:	4013      	ands	r3, r2
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	6812      	ldr	r2, [r2, #0]
 80007d0:	0691      	lsls	r1, r2, #26
 80007d2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80007d4:	430a      	orrs	r2, r1
 80007d6:	431a      	orrs	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80007e0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80007e2:	e06d      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80007ea:	4b88      	ldr	r3, [pc, #544]	; (8000a0c <HAL_ADC_ConfigChannel+0x470>)
 80007ec:	4013      	ands	r3, r2
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	6812      	ldr	r2, [r2, #0]
 80007f2:	0691      	lsls	r1, r2, #26
 80007f4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80007f6:	430a      	orrs	r2, r1
 80007f8:	431a      	orrs	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000802:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000804:	e05c      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800080c:	4b7f      	ldr	r3, [pc, #508]	; (8000a0c <HAL_ADC_ConfigChannel+0x470>)
 800080e:	4013      	ands	r3, r2
 8000810:	683a      	ldr	r2, [r7, #0]
 8000812:	6812      	ldr	r2, [r2, #0]
 8000814:	0691      	lsls	r1, r2, #26
 8000816:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000818:	430a      	orrs	r2, r1
 800081a:	431a      	orrs	r2, r3
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000824:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000826:	e04b      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800082e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	069b      	lsls	r3, r3, #26
 8000838:	429a      	cmp	r2, r3
 800083a:	d107      	bne.n	800084c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800084a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000852:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	069b      	lsls	r3, r3, #26
 800085c:	429a      	cmp	r2, r3
 800085e:	d107      	bne.n	8000870 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800086e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000876:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	069b      	lsls	r3, r3, #26
 8000880:	429a      	cmp	r2, r3
 8000882:	d107      	bne.n	8000894 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000892:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800089a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	069b      	lsls	r3, r3, #26
 80008a4:	429a      	cmp	r2, r3
 80008a6:	d10a      	bne.n	80008be <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80008b6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80008b8:	e001      	b.n	80008be <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80008ba:	bf00      	nop
 80008bc:	e000      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x324>
      break;
 80008be:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	f003 0303 	and.w	r3, r3, #3
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d108      	bne.n	80008e0 <HAL_ADC_ConfigChannel+0x344>
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d101      	bne.n	80008e0 <HAL_ADC_ConfigChannel+0x344>
 80008dc:	2301      	movs	r3, #1
 80008de:	e000      	b.n	80008e2 <HAL_ADC_ConfigChannel+0x346>
 80008e0:	2300      	movs	r3, #0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	f040 80ff 	bne.w	8000ae6 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d00f      	beq.n	8000910 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	2201      	movs	r2, #1
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43da      	mvns	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	400a      	ands	r2, r1
 800090a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800090e:	e049      	b.n	80009a4 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2201      	movs	r2, #1
 800091e:	409a      	lsls	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	430a      	orrs	r2, r1
 8000926:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b09      	cmp	r3, #9
 8000930:	d91c      	bls.n	800096c <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	6999      	ldr	r1, [r3, #24]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4613      	mov	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4413      	add	r3, r2
 8000942:	3b1b      	subs	r3, #27
 8000944:	2207      	movs	r2, #7
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	43db      	mvns	r3, r3
 800094c:	4019      	ands	r1, r3
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	6898      	ldr	r0, [r3, #8]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	681a      	ldr	r2, [r3, #0]
 8000956:	4613      	mov	r3, r2
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	4413      	add	r3, r2
 800095c:	3b1b      	subs	r3, #27
 800095e:	fa00 f203 	lsl.w	r2, r0, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	430a      	orrs	r2, r1
 8000968:	619a      	str	r2, [r3, #24]
 800096a:	e01b      	b.n	80009a4 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	6959      	ldr	r1, [r3, #20]
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	1c5a      	adds	r2, r3, #1
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	2207      	movs	r2, #7
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	4019      	ands	r1, r3
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	6898      	ldr	r0, [r3, #8]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	1c5a      	adds	r2, r3, #1
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	fa00 f203 	lsl.w	r2, r0, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	430a      	orrs	r2, r1
 80009a2:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <HAL_ADC_ConfigChannel+0x474>)
 80009a6:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b10      	cmp	r3, #16
 80009ae:	d105      	bne.n	80009bc <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80009b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d014      	beq.n	80009e6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80009c0:	2b11      	cmp	r3, #17
 80009c2:	d105      	bne.n	80009d0 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80009c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00a      	beq.n	80009e6 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80009d4:	2b12      	cmp	r3, #18
 80009d6:	f040 8086 	bne.w	8000ae6 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80009da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80009dc:	689b      	ldr	r3, [r3, #8]
 80009de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d17f      	bne.n	8000ae6 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	689b      	ldr	r3, [r3, #8]
 80009f0:	f003 0303 	and.w	r3, r3, #3
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d10d      	bne.n	8000a14 <HAL_ADC_ConfigChannel+0x478>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d106      	bne.n	8000a14 <HAL_ADC_ConfigChannel+0x478>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e005      	b.n	8000a16 <HAL_ADC_ConfigChannel+0x47a>
 8000a0a:	bf00      	nop
 8000a0c:	83fff000 	.word	0x83fff000
 8000a10:	50000300 	.word	0x50000300
 8000a14:	2300      	movs	r3, #0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d150      	bne.n	8000abc <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a1a:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d010      	beq.n	8000a42 <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	689b      	ldr	r3, [r3, #8]
 8000a24:	f003 0303 	and.w	r3, r3, #3
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d107      	bne.n	8000a3c <HAL_ADC_ConfigChannel+0x4a0>
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f003 0301 	and.w	r3, r3, #1
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d101      	bne.n	8000a3c <HAL_ADC_ConfigChannel+0x4a0>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e000      	b.n	8000a3e <HAL_ADC_ConfigChannel+0x4a2>
 8000a3c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d13c      	bne.n	8000abc <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b10      	cmp	r3, #16
 8000a48:	d11d      	bne.n	8000a86 <HAL_ADC_ConfigChannel+0x4ea>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a52:	d118      	bne.n	8000a86 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000a54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a5e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <HAL_ADC_ConfigChannel+0x564>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a27      	ldr	r2, [pc, #156]	; (8000b04 <HAL_ADC_ConfigChannel+0x568>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	0c9a      	lsrs	r2, r3, #18
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4413      	add	r3, r2
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000a76:	e002      	b.n	8000a7e <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d1f9      	bne.n	8000a78 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000a84:	e02e      	b.n	8000ae4 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2b11      	cmp	r3, #17
 8000a8c:	d10b      	bne.n	8000aa6 <HAL_ADC_ConfigChannel+0x50a>
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a96:	d106      	bne.n	8000aa6 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000aa2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000aa4:	e01e      	b.n	8000ae4 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b12      	cmp	r3, #18
 8000aac:	d11a      	bne.n	8000ae4 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000aae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000ab6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000ab8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000aba:	e013      	b.n	8000ae4 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac0:	f043 0220 	orr.w	r2, r3, #32
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000ace:	e00a      	b.n	8000ae6 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad4:	f043 0220 	orr.w	r2, r3, #32
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8000ae2:	e000      	b.n	8000ae6 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000ae4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8000aee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3774      	adds	r7, #116	; 0x74
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	20000008 	.word	0x20000008
 8000b04:	431bde83 	.word	0x431bde83

08000b08 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d108      	bne.n	8000b34 <ADC_Disable+0x2c>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 0301 	and.w	r3, r3, #1
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d101      	bne.n	8000b34 <ADC_Disable+0x2c>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e000      	b.n	8000b36 <ADC_Disable+0x2e>
 8000b34:	2300      	movs	r3, #0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d040      	beq.n	8000bbc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	f003 030d 	and.w	r3, r3, #13
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d10f      	bne.n	8000b68 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f042 0202 	orr.w	r2, r2, #2
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8000b60:	f7ff fb8c 	bl	800027c <HAL_GetTick>
 8000b64:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000b66:	e022      	b.n	8000bae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6c:	f043 0210 	orr.w	r2, r3, #16
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b78:	f043 0201 	orr.w	r2, r3, #1
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e01c      	b.n	8000bbe <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000b84:	f7ff fb7a 	bl	800027c <HAL_GetTick>
 8000b88:	4602      	mov	r2, r0
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	1ad3      	subs	r3, r2, r3
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d90d      	bls.n	8000bae <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	f043 0210 	orr.w	r2, r3, #16
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ba2:	f043 0201 	orr.w	r2, r3, #1
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e007      	b.n	8000bbe <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d0e3      	beq.n	8000b84 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <NVIC_SetPriorityGrouping+0x44>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <NVIC_SetPriorityGrouping+0x44>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <NVIC_GetPriorityGrouping+0x18>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0307 	and.w	r3, r3, #7
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	f003 021f 	and.w	r2, r3, #31
 8000c3c:	4907      	ldr	r1, [pc, #28]	; (8000c5c <NVIC_EnableIRQ+0x30>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	095b      	lsrs	r3, r3, #5
 8000c44:	2001      	movs	r0, #1
 8000c46:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c4e:	bf00      	nop
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000e100 	.word	0xe000e100

08000c60 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	6039      	str	r1, [r7, #0]
 8000c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	da0b      	bge.n	8000c8c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	490c      	ldr	r1, [pc, #48]	; (8000cac <NVIC_SetPriority+0x4c>)
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	f003 030f 	and.w	r3, r3, #15
 8000c80:	3b04      	subs	r3, #4
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8a:	e009      	b.n	8000ca0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <NVIC_SetPriority+0x50>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	0112      	lsls	r2, r2, #4
 8000c98:	b2d2      	uxtb	r2, r2
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr
 8000cac:	e000ed00 	.word	0xe000ed00
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b089      	sub	sp, #36	; 0x24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	f1c3 0307 	rsb	r3, r3, #7
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	bf28      	it	cs
 8000cd2:	2304      	movcs	r3, #4
 8000cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	3304      	adds	r3, #4
 8000cda:	2b06      	cmp	r3, #6
 8000cdc:	d902      	bls.n	8000ce4 <NVIC_EncodePriority+0x30>
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3b03      	subs	r3, #3
 8000ce2:	e000      	b.n	8000ce6 <NVIC_EncodePriority+0x32>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	43da      	mvns	r2, r3
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	401a      	ands	r2, r3
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	fa01 f303 	lsl.w	r3, r1, r3
 8000d06:	43d9      	mvns	r1, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d0c:	4313      	orrs	r3, r2
         );
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3724      	adds	r7, #36	; 0x24
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
	...

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d2c:	d301      	bcc.n	8000d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <SysTick_Config+0x40>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f7ff ff8e 	bl	8000c60 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <SysTick_Config+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SysTick_Config+0x40>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff2d 	bl	8000bc8 <NVIC_SetPriorityGrouping>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d88:	f7ff ff42 	bl	8000c10 <NVIC_GetPriorityGrouping>
 8000d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f7ff ff8e 	bl	8000cb4 <NVIC_EncodePriority>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff5d 	bl	8000c60 <NVIC_SetPriority>
}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff35 	bl	8000c2c <NVIC_EnableIRQ>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffa2 	bl	8000d1c <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d101      	bne.n	8000df4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	e014      	b.n	8000e1e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	791b      	ldrb	r3, [r3, #4]
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d105      	bne.n	8000e0a <HAL_DAC_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f003 fa1f 	bl	8004248 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2200      	movs	r2, #0
 8000e14:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3708      	adds	r7, #8
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000e26:	b480      	push	{r7}
 8000e28:	b083      	sub	sp, #12
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(struct __DAC_HandleTypeDef* hdac)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e50:	d120      	bne.n	8000e94 <HAL_DAC_IRQHandler+0x5a>
  {  
    /* Check underrun flag of DAC channel 1U */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e60:	d118      	bne.n	8000e94 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2204      	movs	r2, #4
 8000e66:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	691b      	ldr	r3, [r3, #16]
 8000e6c:	f043 0201 	orr.w	r2, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e7c:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e8c:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffc9 	bl	8000e26 <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	795b      	ldrb	r3, [r3, #5]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d101      	bne.n	8000ebc <HAL_DAC_ConfigChannel+0x20>
 8000eb8:	2302      	movs	r3, #2
 8000eba:	e036      	b.n	8000f2a <HAL_DAC_ConfigChannel+0x8e>
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000ed0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6819      	ldr	r1, [r3, #0]
 8000f0a:	22c0      	movs	r2, #192	; 0xc0
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43da      	mvns	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	400a      	ands	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2201      	movs	r2, #1
 8000f20:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	2200      	movs	r2, #0
 8000f26:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	371c      	adds	r7, #28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f4e:	e14e      	b.n	80011ee <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2101      	movs	r1, #1
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	f000 8140 	beq.w	80011e8 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x40>
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2b12      	cmp	r3, #18
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	6939      	ldr	r1, [r7, #16]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d00b      	beq.n	8001014 <HAL_GPIO_Init+0xdc>
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	2b02      	cmp	r3, #2
 8001002:	d007      	beq.n	8001014 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001008:	2b11      	cmp	r3, #17
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b12      	cmp	r3, #18
 8001012:	d130      	bne.n	8001076 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68da      	ldr	r2, [r3, #12]
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104a:	2201      	movs	r2, #1
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	43db      	mvns	r3, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	091b      	lsrs	r3, r3, #4
 8001060:	f003 0201 	and.w	r2, r3, #1
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	f000 809a 	beq.w	80011e8 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b4:	4b55      	ldr	r3, [pc, #340]	; (800120c <HAL_GPIO_Init+0x2d4>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a54      	ldr	r2, [pc, #336]	; (800120c <HAL_GPIO_Init+0x2d4>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b52      	ldr	r3, [pc, #328]	; (800120c <HAL_GPIO_Init+0x2d4>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	60bb      	str	r3, [r7, #8]
 80010ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80010cc:	4a50      	ldr	r2, [pc, #320]	; (8001210 <HAL_GPIO_Init+0x2d8>)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010d8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	220f      	movs	r2, #15
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	43db      	mvns	r3, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4013      	ands	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010f6:	d013      	beq.n	8001120 <HAL_GPIO_Init+0x1e8>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a46      	ldr	r2, [pc, #280]	; (8001214 <HAL_GPIO_Init+0x2dc>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d00d      	beq.n	800111c <HAL_GPIO_Init+0x1e4>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a45      	ldr	r2, [pc, #276]	; (8001218 <HAL_GPIO_Init+0x2e0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d007      	beq.n	8001118 <HAL_GPIO_Init+0x1e0>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a44      	ldr	r2, [pc, #272]	; (800121c <HAL_GPIO_Init+0x2e4>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d101      	bne.n	8001114 <HAL_GPIO_Init+0x1dc>
 8001110:	2303      	movs	r3, #3
 8001112:	e006      	b.n	8001122 <HAL_GPIO_Init+0x1ea>
 8001114:	2305      	movs	r3, #5
 8001116:	e004      	b.n	8001122 <HAL_GPIO_Init+0x1ea>
 8001118:	2302      	movs	r3, #2
 800111a:	e002      	b.n	8001122 <HAL_GPIO_Init+0x1ea>
 800111c:	2301      	movs	r3, #1
 800111e:	e000      	b.n	8001122 <HAL_GPIO_Init+0x1ea>
 8001120:	2300      	movs	r3, #0
 8001122:	697a      	ldr	r2, [r7, #20]
 8001124:	f002 0203 	and.w	r2, r2, #3
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	4093      	lsls	r3, r2
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4313      	orrs	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001132:	4937      	ldr	r1, [pc, #220]	; (8001210 <HAL_GPIO_Init+0x2d8>)
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001140:	4b37      	ldr	r3, [pc, #220]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001164:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	43db      	mvns	r3, r3
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4313      	orrs	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800118e:	4a24      	ldr	r2, [pc, #144]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001194:	4b22      	ldr	r3, [pc, #136]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43db      	mvns	r3, r3
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011b8:	4a19      	ldr	r2, [pc, #100]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4313      	orrs	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011e2:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <HAL_GPIO_Init+0x2e8>)
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	3301      	adds	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	fa22 f303 	lsr.w	r3, r2, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f47f aea9 	bne.w	8000f50 <HAL_GPIO_Init+0x18>
  }
}
 80011fe:	bf00      	nop
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000
 8001214:	48000400 	.word	0x48000400
 8001218:	48000800 	.word	0x48000800
 800121c:	48000c00 	.word	0x48000c00
 8001220:	40010400 	.word	0x40010400

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001240:	e002      	b.n	8001248 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001242:	887a      	ldrh	r2, [r7, #2]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800125a:	af00      	add	r7, sp, #0
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	f000 beda 	b.w	8002022 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 816e 	beq.w	800155a <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800127e:	4bb5      	ldr	r3, [pc, #724]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 030c 	and.w	r3, r3, #12
 8001286:	2b04      	cmp	r3, #4
 8001288:	d00c      	beq.n	80012a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800128a:	4bb2      	ldr	r3, [pc, #712]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b08      	cmp	r3, #8
 8001294:	d15a      	bne.n	800134c <HAL_RCC_OscConfig+0xf8>
 8001296:	4baf      	ldr	r3, [pc, #700]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800129e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a2:	d153      	bne.n	800134c <HAL_RCC_OscConfig+0xf8>
 80012a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012a8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80012b0:	fa93 f3a3 	rbit	r3, r3
 80012b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80012b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012bc:	fab3 f383 	clz	r3, r3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	095b      	lsrs	r3, r3, #5
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d102      	bne.n	80012d6 <HAL_RCC_OscConfig+0x82>
 80012d0:	4ba0      	ldr	r3, [pc, #640]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	e015      	b.n	8001302 <HAL_RCC_OscConfig+0xae>
 80012d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80012ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012ee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80012f2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80012fe:	4b95      	ldr	r3, [pc, #596]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001306:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800130a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800130e:	fa92 f2a2 	rbit	r2, r2
 8001312:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001316:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800131a:	fab2 f282 	clz	r2, r2
 800131e:	b252      	sxtb	r2, r2
 8001320:	f042 0220 	orr.w	r2, r2, #32
 8001324:	b252      	sxtb	r2, r2
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	f002 021f 	and.w	r2, r2, #31
 800132c:	2101      	movs	r1, #1
 800132e:	fa01 f202 	lsl.w	r2, r1, r2
 8001332:	4013      	ands	r3, r2
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 810f 	beq.w	8001558 <HAL_RCC_OscConfig+0x304>
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	f040 8109 	bne.w	8001558 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	f000 be6b 	b.w	8002022 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001356:	d106      	bne.n	8001366 <HAL_RCC_OscConfig+0x112>
 8001358:	4b7e      	ldr	r3, [pc, #504]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a7d      	ldr	r2, [pc, #500]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 800135e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	e030      	b.n	80013c8 <HAL_RCC_OscConfig+0x174>
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d10c      	bne.n	800138a <HAL_RCC_OscConfig+0x136>
 8001370:	4b78      	ldr	r3, [pc, #480]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a77      	ldr	r2, [pc, #476]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 8001376:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b75      	ldr	r3, [pc, #468]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a74      	ldr	r2, [pc, #464]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 8001382:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001386:	6013      	str	r3, [r2, #0]
 8001388:	e01e      	b.n	80013c8 <HAL_RCC_OscConfig+0x174>
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x15c>
 8001396:	4b6f      	ldr	r3, [pc, #444]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a6e      	ldr	r2, [pc, #440]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b6c      	ldr	r3, [pc, #432]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a6b      	ldr	r2, [pc, #428]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0x174>
 80013b0:	4b68      	ldr	r3, [pc, #416]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a67      	ldr	r2, [pc, #412]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b65      	ldr	r3, [pc, #404]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a64      	ldr	r2, [pc, #400]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013c6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013c8:	4b62      	ldr	r3, [pc, #392]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 80013ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013cc:	f023 020f 	bic.w	r2, r3, #15
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	495f      	ldr	r1, [pc, #380]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d05a      	beq.n	800149c <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e6:	f7fe ff49 	bl	800027c <HAL_GetTick>
 80013ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ee:	e00a      	b.n	8001406 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f0:	f7fe ff44 	bl	800027c <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2b64      	cmp	r3, #100	; 0x64
 80013fe:	d902      	bls.n	8001406 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	f000 be0e 	b.w	8002022 <HAL_RCC_OscConfig+0xdce>
 8001406:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800140a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 800141a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141e:	fab3 f383 	clz	r3, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	095b      	lsrs	r3, r3, #5
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b01      	cmp	r3, #1
 8001430:	d102      	bne.n	8001438 <HAL_RCC_OscConfig+0x1e4>
 8001432:	4b48      	ldr	r3, [pc, #288]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	e015      	b.n	8001464 <HAL_RCC_OscConfig+0x210>
 8001438:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800143c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001440:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001444:	fa93 f3a3 	rbit	r3, r3
 8001448:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800144c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001450:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001454:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001458:	fa93 f3a3 	rbit	r3, r3
 800145c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001460:	4b3c      	ldr	r3, [pc, #240]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001468:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800146c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001470:	fa92 f2a2 	rbit	r2, r2
 8001474:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001478:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800147c:	fab2 f282 	clz	r2, r2
 8001480:	b252      	sxtb	r2, r2
 8001482:	f042 0220 	orr.w	r2, r2, #32
 8001486:	b252      	sxtb	r2, r2
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	f002 021f 	and.w	r2, r2, #31
 800148e:	2101      	movs	r1, #1
 8001490:	fa01 f202 	lsl.w	r2, r1, r2
 8001494:	4013      	ands	r3, r2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d0aa      	beq.n	80013f0 <HAL_RCC_OscConfig+0x19c>
 800149a:	e05e      	b.n	800155a <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7fe feee 	bl	800027c <HAL_GetTick>
 80014a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014a4:	e00a      	b.n	80014bc <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a6:	f7fe fee9 	bl	800027c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b64      	cmp	r3, #100	; 0x64
 80014b4:	d902      	bls.n	80014bc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	f000 bdb3 	b.w	8002022 <HAL_RCC_OscConfig+0xdce>
 80014bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80014c8:	fa93 f3a3 	rbit	r3, r3
 80014cc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 80014d0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d4:	fab3 f383 	clz	r3, r3
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d102      	bne.n	80014ee <HAL_RCC_OscConfig+0x29a>
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0x2c6>
 80014ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001506:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800150a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_RCC_OscConfig+0x300>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800151e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001522:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001526:	fa92 f2a2 	rbit	r2, r2
 800152a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 800152e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001532:	fab2 f282 	clz	r2, r2
 8001536:	b252      	sxtb	r2, r2
 8001538:	f042 0220 	orr.w	r2, r2, #32
 800153c:	b252      	sxtb	r2, r2
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	f002 021f 	and.w	r2, r2, #31
 8001544:	2101      	movs	r1, #1
 8001546:	fa01 f202 	lsl.w	r2, r1, r2
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1aa      	bne.n	80014a6 <HAL_RCC_OscConfig+0x252>
 8001550:	e003      	b.n	800155a <HAL_RCC_OscConfig+0x306>
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 8170 	beq.w	800184a <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800156a:	4bd0      	ldr	r3, [pc, #832]	; (80018ac <HAL_RCC_OscConfig+0x658>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00b      	beq.n	800158e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001576:	4bcd      	ldr	r3, [pc, #820]	; (80018ac <HAL_RCC_OscConfig+0x658>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b08      	cmp	r3, #8
 8001580:	d16d      	bne.n	800165e <HAL_RCC_OscConfig+0x40a>
 8001582:	4bca      	ldr	r3, [pc, #808]	; (80018ac <HAL_RCC_OscConfig+0x658>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d167      	bne.n	800165e <HAL_RCC_OscConfig+0x40a>
 800158e:	2302      	movs	r3, #2
 8001590:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001594:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001598:	fa93 f3a3 	rbit	r3, r3
 800159c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 80015a0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	095b      	lsrs	r3, r3, #5
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d102      	bne.n	80015be <HAL_RCC_OscConfig+0x36a>
 80015b8:	4bbc      	ldr	r3, [pc, #752]	; (80018ac <HAL_RCC_OscConfig+0x658>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	e013      	b.n	80015e6 <HAL_RCC_OscConfig+0x392>
 80015be:	2302      	movs	r3, #2
 80015c0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80015c8:	fa93 f3a3 	rbit	r3, r3
 80015cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80015d0:	2302      	movs	r3, #2
 80015d2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80015d6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80015e2:	4bb2      	ldr	r3, [pc, #712]	; (80018ac <HAL_RCC_OscConfig+0x658>)
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	2202      	movs	r2, #2
 80015e8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80015ec:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80015f0:	fa92 f2a2 	rbit	r2, r2
 80015f4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80015f8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80015fc:	fab2 f282 	clz	r2, r2
 8001600:	b252      	sxtb	r2, r2
 8001602:	f042 0220 	orr.w	r2, r2, #32
 8001606:	b252      	sxtb	r2, r2
 8001608:	b2d2      	uxtb	r2, r2
 800160a:	f002 021f 	and.w	r2, r2, #31
 800160e:	2101      	movs	r1, #1
 8001610:	fa01 f202 	lsl.w	r2, r1, r2
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d007      	beq.n	800162a <HAL_RCC_OscConfig+0x3d6>
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d002      	beq.n	800162a <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	f000 bcfc 	b.w	8002022 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162a:	4ba0      	ldr	r3, [pc, #640]	; (80018ac <HAL_RCC_OscConfig+0x658>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6959      	ldr	r1, [r3, #20]
 8001638:	23f8      	movs	r3, #248	; 0xf8
 800163a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001642:	fa93 f3a3 	rbit	r3, r3
 8001646:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 800164a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800164e:	fab3 f383 	clz	r3, r3
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	4995      	ldr	r1, [pc, #596]	; (80018ac <HAL_RCC_OscConfig+0x658>)
 8001658:	4313      	orrs	r3, r2
 800165a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165c:	e0f5      	b.n	800184a <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	2b00      	cmp	r3, #0
 8001666:	f000 8085 	beq.w	8001774 <HAL_RCC_OscConfig+0x520>
 800166a:	2301      	movs	r3, #1
 800166c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001670:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001674:	fa93 f3a3 	rbit	r3, r3
 8001678:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 800167c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001680:	fab3 f383 	clz	r3, r3
 8001684:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001688:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	461a      	mov	r2, r3
 8001690:	2301      	movs	r3, #1
 8001692:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001694:	f7fe fdf2 	bl	800027c <HAL_GetTick>
 8001698:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169e:	f7fe fded 	bl	800027c <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d902      	bls.n	80016b4 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	f000 bcb7 	b.w	8002022 <HAL_RCC_OscConfig+0xdce>
 80016b4:	2302      	movs	r3, #2
 80016b6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ba:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80016be:	fa93 f3a3 	rbit	r3, r3
 80016c2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 80016c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ca:	fab3 f383 	clz	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	095b      	lsrs	r3, r3, #5
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d102      	bne.n	80016e4 <HAL_RCC_OscConfig+0x490>
 80016de:	4b73      	ldr	r3, [pc, #460]	; (80018ac <HAL_RCC_OscConfig+0x658>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	e013      	b.n	800170c <HAL_RCC_OscConfig+0x4b8>
 80016e4:	2302      	movs	r3, #2
 80016e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80016ee:	fa93 f3a3 	rbit	r3, r3
 80016f2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80016f6:	2302      	movs	r3, #2
 80016f8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80016fc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_OscConfig+0x658>)
 800170a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170c:	2202      	movs	r2, #2
 800170e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001712:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001716:	fa92 f2a2 	rbit	r2, r2
 800171a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 800171e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001722:	fab2 f282 	clz	r2, r2
 8001726:	b252      	sxtb	r2, r2
 8001728:	f042 0220 	orr.w	r2, r2, #32
 800172c:	b252      	sxtb	r2, r2
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	f002 021f 	and.w	r2, r2, #31
 8001734:	2101      	movs	r1, #1
 8001736:	fa01 f202 	lsl.w	r2, r1, r2
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0ae      	beq.n	800169e <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001740:	4b5a      	ldr	r3, [pc, #360]	; (80018ac <HAL_RCC_OscConfig+0x658>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6959      	ldr	r1, [r3, #20]
 800174e:	23f8      	movs	r3, #248	; 0xf8
 8001750:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8001760:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	fa01 f303 	lsl.w	r3, r1, r3
 800176c:	494f      	ldr	r1, [pc, #316]	; (80018ac <HAL_RCC_OscConfig+0x658>)
 800176e:	4313      	orrs	r3, r2
 8001770:	600b      	str	r3, [r1, #0]
 8001772:	e06a      	b.n	800184a <HAL_RCC_OscConfig+0x5f6>
 8001774:	2301      	movs	r3, #1
 8001776:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800177a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800177e:	fa93 f3a3 	rbit	r3, r3
 8001782:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001786:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800178a:	fab3 f383 	clz	r3, r3
 800178e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001792:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	461a      	mov	r2, r3
 800179a:	2300      	movs	r3, #0
 800179c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800179e:	f7fe fd6d 	bl	800027c <HAL_GetTick>
 80017a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017a6:	e00a      	b.n	80017be <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017a8:	f7fe fd68 	bl	800027c <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d902      	bls.n	80017be <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	f000 bc32 	b.w	8002022 <HAL_RCC_OscConfig+0xdce>
 80017be:	2302      	movs	r3, #2
 80017c0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80017c8:	fa93 f3a3 	rbit	r3, r3
 80017cc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80017d0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017d4:	fab3 f383 	clz	r3, r3
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d102      	bne.n	80017ee <HAL_RCC_OscConfig+0x59a>
 80017e8:	4b30      	ldr	r3, [pc, #192]	; (80018ac <HAL_RCC_OscConfig+0x658>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	e013      	b.n	8001816 <HAL_RCC_OscConfig+0x5c2>
 80017ee:	2302      	movs	r3, #2
 80017f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017f8:	fa93 f3a3 	rbit	r3, r3
 80017fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001800:	2302      	movs	r3, #2
 8001802:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001806:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800180a:	fa93 f3a3 	rbit	r3, r3
 800180e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <HAL_RCC_OscConfig+0x658>)
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	2202      	movs	r2, #2
 8001818:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800181c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001820:	fa92 f2a2 	rbit	r2, r2
 8001824:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8001828:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800182c:	fab2 f282 	clz	r2, r2
 8001830:	b252      	sxtb	r2, r2
 8001832:	f042 0220 	orr.w	r2, r2, #32
 8001836:	b252      	sxtb	r2, r2
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	f002 021f 	and.w	r2, r2, #31
 800183e:	2101      	movs	r1, #1
 8001840:	fa01 f202 	lsl.w	r2, r1, r2
 8001844:	4013      	ands	r3, r2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ae      	bne.n	80017a8 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0308 	and.w	r3, r3, #8
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 80d8 	beq.w	8001a0a <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d067      	beq.n	8001934 <HAL_RCC_OscConfig+0x6e0>
 8001864:	2301      	movs	r3, #1
 8001866:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800186e:	fa93 f3a3 	rbit	r3, r3
 8001872:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001876:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800187a:	fab3 f383 	clz	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_RCC_OscConfig+0x65c>)
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	461a      	mov	r2, r3
 8001888:	2301      	movs	r3, #1
 800188a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188c:	f7fe fcf6 	bl	800027c <HAL_GetTick>
 8001890:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001894:	e00e      	b.n	80018b4 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001896:	f7fe fcf1 	bl	800027c <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d906      	bls.n	80018b4 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e3bb      	b.n	8002022 <HAL_RCC_OscConfig+0xdce>
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	10908120 	.word	0x10908120
 80018b4:	2302      	movs	r3, #2
 80018b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018be:	fa93 f3a3 	rbit	r3, r3
 80018c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80018c6:	2302      	movs	r3, #2
 80018c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80018cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80018d0:	fa93 f2a3 	rbit	r2, r3
 80018d4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80018de:	2202      	movs	r2, #2
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	fa93 f2a3 	rbit	r2, r3
 80018ec:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80018f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018f2:	4ba5      	ldr	r3, [pc, #660]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 80018f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018f6:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80018fa:	2102      	movs	r1, #2
 80018fc:	6019      	str	r1, [r3, #0]
 80018fe:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	fa93 f1a3 	rbit	r1, r3
 8001908:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800190c:	6019      	str	r1, [r3, #0]
  return(result);
 800190e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	fab3 f383 	clz	r3, r3
 8001918:	b25b      	sxtb	r3, r3
 800191a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800191e:	b25b      	sxtb	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f003 031f 	and.w	r3, r3, #31
 8001926:	2101      	movs	r1, #1
 8001928:	fa01 f303 	lsl.w	r3, r1, r3
 800192c:	4013      	ands	r3, r2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0b1      	beq.n	8001896 <HAL_RCC_OscConfig+0x642>
 8001932:	e06a      	b.n	8001a0a <HAL_RCC_OscConfig+0x7b6>
 8001934:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	fa93 f2a3 	rbit	r2, r3
 8001946:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800194a:	601a      	str	r2, [r3, #0]
  return(result);
 800194c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001950:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	461a      	mov	r2, r3
 8001958:	4b8c      	ldr	r3, [pc, #560]	; (8001b8c <HAL_RCC_OscConfig+0x938>)
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	461a      	mov	r2, r3
 8001960:	2300      	movs	r3, #0
 8001962:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001964:	f7fe fc8a 	bl	800027c <HAL_GetTick>
 8001968:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	e009      	b.n	8001982 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800196e:	f7fe fc85 	bl	800027c <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e34f      	b.n	8002022 <HAL_RCC_OscConfig+0xdce>
 8001982:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001986:	2202      	movs	r2, #2
 8001988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800199e:	2202      	movs	r2, #2
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	fa93 f2a3 	rbit	r2, r3
 80019ac:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019b6:	2202      	movs	r2, #2
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	fa93 f2a3 	rbit	r2, r3
 80019c4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ca:	4b6f      	ldr	r3, [pc, #444]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 80019cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019ce:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019d2:	2102      	movs	r1, #2
 80019d4:	6019      	str	r1, [r3, #0]
 80019d6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	fa93 f1a3 	rbit	r1, r3
 80019e0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019e4:	6019      	str	r1, [r3, #0]
  return(result);
 80019e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fab3 f383 	clz	r3, r3
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	2101      	movs	r1, #1
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1b1      	bne.n	800196e <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0304 	and.w	r3, r3, #4
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	f000 8159 	beq.w	8001ccc <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a20:	4b59      	ldr	r3, [pc, #356]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d112      	bne.n	8001a52 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a2c:	4b56      	ldr	r3, [pc, #344]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001a2e:	69db      	ldr	r3, [r3, #28]
 8001a30:	4a55      	ldr	r2, [pc, #340]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a36:	61d3      	str	r3, [r2, #28]
 8001a38:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a52:	4b4f      	ldr	r3, [pc, #316]	; (8001b90 <HAL_RCC_OscConfig+0x93c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d11a      	bne.n	8001a94 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a5e:	4b4c      	ldr	r3, [pc, #304]	; (8001b90 <HAL_RCC_OscConfig+0x93c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a4b      	ldr	r2, [pc, #300]	; (8001b90 <HAL_RCC_OscConfig+0x93c>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a6a:	f7fe fc07 	bl	800027c <HAL_GetTick>
 8001a6e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a72:	e009      	b.n	8001a88 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a74:	f7fe fc02 	bl	800027c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b64      	cmp	r3, #100	; 0x64
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e2cc      	b.n	8002022 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a88:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <HAL_RCC_OscConfig+0x93c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0ef      	beq.n	8001a74 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d106      	bne.n	8001aac <HAL_RCC_OscConfig+0x858>
 8001a9e:	4b3a      	ldr	r3, [pc, #232]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a39      	ldr	r2, [pc, #228]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6213      	str	r3, [r2, #32]
 8001aaa:	e02f      	b.n	8001b0c <HAL_RCC_OscConfig+0x8b8>
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x87c>
 8001ab6:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001ab8:	6a1b      	ldr	r3, [r3, #32]
 8001aba:	4a33      	ldr	r2, [pc, #204]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	6213      	str	r3, [r2, #32]
 8001ac2:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	4a30      	ldr	r2, [pc, #192]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001ac8:	f023 0304 	bic.w	r3, r3, #4
 8001acc:	6213      	str	r3, [r2, #32]
 8001ace:	e01d      	b.n	8001b0c <HAL_RCC_OscConfig+0x8b8>
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	2b05      	cmp	r3, #5
 8001ad8:	d10c      	bne.n	8001af4 <HAL_RCC_OscConfig+0x8a0>
 8001ada:	4b2b      	ldr	r3, [pc, #172]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	4a2a      	ldr	r2, [pc, #168]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001ae0:	f043 0304 	orr.w	r3, r3, #4
 8001ae4:	6213      	str	r3, [r2, #32]
 8001ae6:	4b28      	ldr	r3, [pc, #160]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001ae8:	6a1b      	ldr	r3, [r3, #32]
 8001aea:	4a27      	ldr	r2, [pc, #156]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6213      	str	r3, [r2, #32]
 8001af2:	e00b      	b.n	8001b0c <HAL_RCC_OscConfig+0x8b8>
 8001af4:	4b24      	ldr	r3, [pc, #144]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001afa:	f023 0301 	bic.w	r3, r3, #1
 8001afe:	6213      	str	r3, [r2, #32]
 8001b00:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4a20      	ldr	r2, [pc, #128]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001b06:	f023 0304 	bic.w	r3, r3, #4
 8001b0a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b0c:	1d3b      	adds	r3, r7, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d06b      	beq.n	8001bee <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b16:	f7fe fbb1 	bl	800027c <HAL_GetTick>
 8001b1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b20:	f7fe fbac 	bl	800027c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e274      	b.n	8002022 <HAL_RCC_OscConfig+0xdce>
 8001b38:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	fa93 f2a3 	rbit	r2, r3
 8001b4a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b54:	2202      	movs	r2, #2
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	fa93 f2a3 	rbit	r2, r3
 8001b62:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b66:	601a      	str	r2, [r3, #0]
  return(result);
 8001b68:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001b6c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6e:	fab3 f383 	clz	r3, r3
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	095b      	lsrs	r3, r3, #5
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d108      	bne.n	8001b94 <HAL_RCC_OscConfig+0x940>
 8001b82:	4b01      	ldr	r3, [pc, #4]	; (8001b88 <HAL_RCC_OscConfig+0x934>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	e013      	b.n	8001bb0 <HAL_RCC_OscConfig+0x95c>
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	10908120 	.word	0x10908120
 8001b90:	40007000 	.word	0x40007000
 8001b94:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b98:	2202      	movs	r2, #2
 8001b9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	fa93 f2a3 	rbit	r2, r3
 8001ba6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	4bbb      	ldr	r3, [pc, #748]	; (8001e9c <HAL_RCC_OscConfig+0xc48>)
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	6011      	str	r1, [r2, #0]
 8001bb8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	fa92 f1a2 	rbit	r1, r2
 8001bc2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001bc6:	6011      	str	r1, [r2, #0]
  return(result);
 8001bc8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001bcc:	6812      	ldr	r2, [r2, #0]
 8001bce:	fab2 f282 	clz	r2, r2
 8001bd2:	b252      	sxtb	r2, r2
 8001bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bd8:	b252      	sxtb	r2, r2
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	f002 021f 	and.w	r2, r2, #31
 8001be0:	2101      	movs	r1, #1
 8001be2:	fa01 f202 	lsl.w	r2, r1, r2
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d099      	beq.n	8001b20 <HAL_RCC_OscConfig+0x8cc>
 8001bec:	e064      	b.n	8001cb8 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7fe fb45 	bl	800027c <HAL_GetTick>
 8001bf2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf6:	e00b      	b.n	8001c10 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7fe fb40 	bl	800027c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e208      	b.n	8002022 <HAL_RCC_OscConfig+0xdce>
 8001c10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c14:	2202      	movs	r2, #2
 8001c16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	fa93 f2a3 	rbit	r2, r3
 8001c22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	fa93 f2a3 	rbit	r2, r3
 8001c3a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c3e:	601a      	str	r2, [r3, #0]
  return(result);
 8001c40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001c44:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c46:	fab3 f383 	clz	r3, r3
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	095b      	lsrs	r3, r3, #5
 8001c4e:	b2db      	uxtb	r3, r3
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d102      	bne.n	8001c60 <HAL_RCC_OscConfig+0xa0c>
 8001c5a:	4b90      	ldr	r3, [pc, #576]	; (8001e9c <HAL_RCC_OscConfig+0xc48>)
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	e00d      	b.n	8001c7c <HAL_RCC_OscConfig+0xa28>
 8001c60:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c64:	2202      	movs	r2, #2
 8001c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	fa93 f2a3 	rbit	r2, r3
 8001c72:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	4b88      	ldr	r3, [pc, #544]	; (8001e9c <HAL_RCC_OscConfig+0xc48>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001c80:	2102      	movs	r1, #2
 8001c82:	6011      	str	r1, [r2, #0]
 8001c84:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	fa92 f1a2 	rbit	r1, r2
 8001c8e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c92:	6011      	str	r1, [r2, #0]
  return(result);
 8001c94:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	fab2 f282 	clz	r2, r2
 8001c9e:	b252      	sxtb	r2, r2
 8001ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ca4:	b252      	sxtb	r2, r2
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f002 021f 	and.w	r2, r2, #31
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d19f      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001cb8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d105      	bne.n	8001ccc <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cc0:	4b76      	ldr	r3, [pc, #472]	; (8001e9c <HAL_RCC_OscConfig+0xc48>)
 8001cc2:	69db      	ldr	r3, [r3, #28]
 8001cc4:	4a75      	ldr	r2, [pc, #468]	; (8001e9c <HAL_RCC_OscConfig+0xc48>)
 8001cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cca:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ccc:	1d3b      	adds	r3, r7, #4
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	f000 81a4 	beq.w	8002020 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cd8:	4b70      	ldr	r3, [pc, #448]	; (8001e9c <HAL_RCC_OscConfig+0xc48>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 030c 	and.w	r3, r3, #12
 8001ce0:	2b08      	cmp	r3, #8
 8001ce2:	f000 819b 	beq.w	800201c <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	f040 8113 	bne.w	8001f18 <HAL_RCC_OscConfig+0xcc4>
 8001cf2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001cf6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	fa93 f2a3 	rbit	r2, r3
 8001d06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d0a:	601a      	str	r2, [r3, #0]
  return(result);
 8001d0c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d10:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	461a      	mov	r2, r3
 8001d22:	2300      	movs	r3, #0
 8001d24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d26:	f7fe faa9 	bl	800027c <HAL_GetTick>
 8001d2a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2e:	e009      	b.n	8001d44 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d30:	f7fe faa4 	bl	800027c <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d3a:	1ad3      	subs	r3, r2, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e16e      	b.n	8002022 <HAL_RCC_OscConfig+0xdce>
 8001d44:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	fa93 f2a3 	rbit	r2, r3
 8001d58:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d5c:	601a      	str	r2, [r3, #0]
  return(result);
 8001d5e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001d62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d64:	fab3 f383 	clz	r3, r3
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d102      	bne.n	8001d7e <HAL_RCC_OscConfig+0xb2a>
 8001d78:	4b48      	ldr	r3, [pc, #288]	; (8001e9c <HAL_RCC_OscConfig+0xc48>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	e01b      	b.n	8001db6 <HAL_RCC_OscConfig+0xb62>
 8001d7e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	fa93 f2a3 	rbit	r2, r3
 8001d92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	fa93 f2a3 	rbit	r2, r3
 8001dac:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	4b3a      	ldr	r3, [pc, #232]	; (8001e9c <HAL_RCC_OscConfig+0xc48>)
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001dba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001dbe:	6011      	str	r1, [r2, #0]
 8001dc0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	fa92 f1a2 	rbit	r1, r2
 8001dca:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dce:	6011      	str	r1, [r2, #0]
  return(result);
 8001dd0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001dd4:	6812      	ldr	r2, [r2, #0]
 8001dd6:	fab2 f282 	clz	r2, r2
 8001dda:	b252      	sxtb	r2, r2
 8001ddc:	f042 0220 	orr.w	r2, r2, #32
 8001de0:	b252      	sxtb	r2, r2
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	f002 021f 	and.w	r2, r2, #31
 8001de8:	2101      	movs	r1, #1
 8001dea:	fa01 f202 	lsl.w	r2, r1, r2
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d19d      	bne.n	8001d30 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df4:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <HAL_RCC_OscConfig+0xc48>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	4924      	ldr	r1, [pc, #144]	; (8001e9c <HAL_RCC_OscConfig+0xc48>)
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	604b      	str	r3, [r1, #4]
 8001e10:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	fa93 f2a3 	rbit	r2, r3
 8001e24:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e28:	601a      	str	r2, [r3, #0]
  return(result);
 8001e2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001e2e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e38:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	461a      	mov	r2, r3
 8001e40:	2301      	movs	r3, #1
 8001e42:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e44:	f7fe fa1a 	bl	800027c <HAL_GetTick>
 8001e48:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e4c:	e009      	b.n	8001e62 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e4e:	f7fe fa15 	bl	800027c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d901      	bls.n	8001e62 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e0df      	b.n	8002022 <HAL_RCC_OscConfig+0xdce>
 8001e62:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	fa93 f2a3 	rbit	r2, r3
 8001e76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e7a:	601a      	str	r2, [r3, #0]
  return(result);
 8001e7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e80:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e82:	fab3 f383 	clz	r3, r3
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	095b      	lsrs	r3, r3, #5
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d104      	bne.n	8001ea0 <HAL_RCC_OscConfig+0xc4c>
 8001e96:	4b01      	ldr	r3, [pc, #4]	; (8001e9c <HAL_RCC_OscConfig+0xc48>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	e01d      	b.n	8001ed8 <HAL_RCC_OscConfig+0xc84>
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ea4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	fa93 f2a3 	rbit	r2, r3
 8001eb4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ebe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	fa93 f2a3 	rbit	r2, r3
 8001ece:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	4b55      	ldr	r3, [pc, #340]	; (800202c <HAL_RCC_OscConfig+0xdd8>)
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001edc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ee0:	6011      	str	r1, [r2, #0]
 8001ee2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	fa92 f1a2 	rbit	r1, r2
 8001eec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ef0:	6011      	str	r1, [r2, #0]
  return(result);
 8001ef2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ef6:	6812      	ldr	r2, [r2, #0]
 8001ef8:	fab2 f282 	clz	r2, r2
 8001efc:	b252      	sxtb	r2, r2
 8001efe:	f042 0220 	orr.w	r2, r2, #32
 8001f02:	b252      	sxtb	r2, r2
 8001f04:	b2d2      	uxtb	r2, r2
 8001f06:	f002 021f 	and.w	r2, r2, #31
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f10:	4013      	ands	r3, r2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d09b      	beq.n	8001e4e <HAL_RCC_OscConfig+0xbfa>
 8001f16:	e083      	b.n	8002020 <HAL_RCC_OscConfig+0xdcc>
 8001f18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	fa93 f2a3 	rbit	r2, r3
 8001f2c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f30:	601a      	str	r2, [r3, #0]
  return(result);
 8001f32:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f36:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f38:	fab3 f383 	clz	r3, r3
 8001f3c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f40:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	461a      	mov	r2, r3
 8001f48:	2300      	movs	r3, #0
 8001f4a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4c:	f7fe f996 	bl	800027c <HAL_GetTick>
 8001f50:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f54:	e009      	b.n	8001f6a <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f56:	f7fe f991 	bl	800027c <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e05b      	b.n	8002022 <HAL_RCC_OscConfig+0xdce>
 8001f6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	fa93 f2a3 	rbit	r2, r3
 8001f7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f82:	601a      	str	r2, [r3, #0]
  return(result);
 8001f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f88:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f8a:	fab3 f383 	clz	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	095b      	lsrs	r3, r3, #5
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d102      	bne.n	8001fa4 <HAL_RCC_OscConfig+0xd50>
 8001f9e:	4b23      	ldr	r3, [pc, #140]	; (800202c <HAL_RCC_OscConfig+0xdd8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	e01b      	b.n	8001fdc <HAL_RCC_OscConfig+0xd88>
 8001fa4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	fa93 f2a3 	rbit	r2, r3
 8001fb8:	f107 0320 	add.w	r3, r7, #32
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f107 031c 	add.w	r3, r7, #28
 8001fc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	fa93 f2a3 	rbit	r2, r3
 8001fd2:	f107 0318 	add.w	r3, r7, #24
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	4b14      	ldr	r3, [pc, #80]	; (800202c <HAL_RCC_OscConfig+0xdd8>)
 8001fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fdc:	f107 0214 	add.w	r2, r7, #20
 8001fe0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fe4:	6011      	str	r1, [r2, #0]
 8001fe6:	f107 0214 	add.w	r2, r7, #20
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	fa92 f1a2 	rbit	r1, r2
 8001ff0:	f107 0210 	add.w	r2, r7, #16
 8001ff4:	6011      	str	r1, [r2, #0]
  return(result);
 8001ff6:	f107 0210 	add.w	r2, r7, #16
 8001ffa:	6812      	ldr	r2, [r2, #0]
 8001ffc:	fab2 f282 	clz	r2, r2
 8002000:	b252      	sxtb	r2, r2
 8002002:	f042 0220 	orr.w	r2, r2, #32
 8002006:	b252      	sxtb	r2, r2
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	f002 021f 	and.w	r2, r2, #31
 800200e:	2101      	movs	r1, #1
 8002010:	fa01 f202 	lsl.w	r2, r1, r2
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d19d      	bne.n	8001f56 <HAL_RCC_OscConfig+0xd02>
 800201a:	e001      	b.n	8002020 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000

08002030 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b09e      	sub	sp, #120	; 0x78
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800203a:	2300      	movs	r3, #0
 800203c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e164      	b.n	8002312 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002048:	4b92      	ldr	r3, [pc, #584]	; (8002294 <HAL_RCC_ClockConfig+0x264>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d910      	bls.n	8002078 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002056:	4b8f      	ldr	r3, [pc, #572]	; (8002294 <HAL_RCC_ClockConfig+0x264>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 0207 	bic.w	r2, r3, #7
 800205e:	498d      	ldr	r1, [pc, #564]	; (8002294 <HAL_RCC_ClockConfig+0x264>)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002066:	4b8b      	ldr	r3, [pc, #556]	; (8002294 <HAL_RCC_ClockConfig+0x264>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	429a      	cmp	r2, r3
 8002072:	d001      	beq.n	8002078 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e14c      	b.n	8002312 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002084:	4b84      	ldr	r3, [pc, #528]	; (8002298 <HAL_RCC_ClockConfig+0x268>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	4981      	ldr	r1, [pc, #516]	; (8002298 <HAL_RCC_ClockConfig+0x268>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	2b00      	cmp	r3, #0
 80020a0:	f000 80df 	beq.w	8002262 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d13d      	bne.n	8002128 <HAL_RCC_ClockConfig+0xf8>
 80020ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020b0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020b4:	fa93 f3a3 	rbit	r3, r3
 80020b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80020ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d102      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xa6>
 80020d0:	4b71      	ldr	r3, [pc, #452]	; (8002298 <HAL_RCC_ClockConfig+0x268>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	e00f      	b.n	80020f6 <HAL_RCC_ClockConfig+0xc6>
 80020d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	667b      	str	r3, [r7, #100]	; 0x64
 80020e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020e8:	663b      	str	r3, [r7, #96]	; 0x60
 80020ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80020f2:	4b69      	ldr	r3, [pc, #420]	; (8002298 <HAL_RCC_ClockConfig+0x268>)
 80020f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020fa:	65ba      	str	r2, [r7, #88]	; 0x58
 80020fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80020fe:	fa92 f2a2 	rbit	r2, r2
 8002102:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002104:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002106:	fab2 f282 	clz	r2, r2
 800210a:	b252      	sxtb	r2, r2
 800210c:	f042 0220 	orr.w	r2, r2, #32
 8002110:	b252      	sxtb	r2, r2
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	f002 021f 	and.w	r2, r2, #31
 8002118:	2101      	movs	r1, #1
 800211a:	fa01 f202 	lsl.w	r2, r1, r2
 800211e:	4013      	ands	r3, r2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d17d      	bne.n	8002220 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e0f4      	b.n	8002312 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b02      	cmp	r3, #2
 800212e:	d13d      	bne.n	80021ac <HAL_RCC_ClockConfig+0x17c>
 8002130:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002134:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800213e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002140:	fab3 f383 	clz	r3, r3
 8002144:	b2db      	uxtb	r3, r3
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	b2db      	uxtb	r3, r3
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b01      	cmp	r3, #1
 8002152:	d102      	bne.n	800215a <HAL_RCC_ClockConfig+0x12a>
 8002154:	4b50      	ldr	r3, [pc, #320]	; (8002298 <HAL_RCC_ClockConfig+0x268>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	e00f      	b.n	800217a <HAL_RCC_ClockConfig+0x14a>
 800215a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800215e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	647b      	str	r3, [r7, #68]	; 0x44
 8002168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800216c:	643b      	str	r3, [r7, #64]	; 0x40
 800216e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002176:	4b48      	ldr	r3, [pc, #288]	; (8002298 <HAL_RCC_ClockConfig+0x268>)
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800217e:	63ba      	str	r2, [r7, #56]	; 0x38
 8002180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002182:	fa92 f2a2 	rbit	r2, r2
 8002186:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800218a:	fab2 f282 	clz	r2, r2
 800218e:	b252      	sxtb	r2, r2
 8002190:	f042 0220 	orr.w	r2, r2, #32
 8002194:	b252      	sxtb	r2, r2
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	f002 021f 	and.w	r2, r2, #31
 800219c:	2101      	movs	r1, #1
 800219e:	fa01 f202 	lsl.w	r2, r1, r2
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d13b      	bne.n	8002220 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0b2      	b.n	8002312 <HAL_RCC_ClockConfig+0x2e2>
 80021ac:	2302      	movs	r3, #2
 80021ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80021b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	fab3 f383 	clz	r3, r3
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	095b      	lsrs	r3, r3, #5
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d102      	bne.n	80021d4 <HAL_RCC_ClockConfig+0x1a4>
 80021ce:	4b32      	ldr	r3, [pc, #200]	; (8002298 <HAL_RCC_ClockConfig+0x268>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	e00d      	b.n	80021f0 <HAL_RCC_ClockConfig+0x1c0>
 80021d4:	2302      	movs	r3, #2
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	627b      	str	r3, [r7, #36]	; 0x24
 80021e0:	2302      	movs	r3, #2
 80021e2:	623b      	str	r3, [r7, #32]
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	4b2a      	ldr	r3, [pc, #168]	; (8002298 <HAL_RCC_ClockConfig+0x268>)
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	2202      	movs	r2, #2
 80021f2:	61ba      	str	r2, [r7, #24]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	fa92 f2a2 	rbit	r2, r2
 80021fa:	617a      	str	r2, [r7, #20]
  return(result);
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	fab2 f282 	clz	r2, r2
 8002202:	b252      	sxtb	r2, r2
 8002204:	f042 0220 	orr.w	r2, r2, #32
 8002208:	b252      	sxtb	r2, r2
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	f002 021f 	and.w	r2, r2, #31
 8002210:	2101      	movs	r1, #1
 8002212:	fa01 f202 	lsl.w	r2, r1, r2
 8002216:	4013      	ands	r3, r2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e078      	b.n	8002312 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002220:	4b1d      	ldr	r3, [pc, #116]	; (8002298 <HAL_RCC_ClockConfig+0x268>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 0203 	bic.w	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	491a      	ldr	r1, [pc, #104]	; (8002298 <HAL_RCC_ClockConfig+0x268>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002232:	f7fe f823 	bl	800027c <HAL_GetTick>
 8002236:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002238:	e00a      	b.n	8002250 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223a:	f7fe f81f 	bl	800027c <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	f241 3288 	movw	r2, #5000	; 0x1388
 8002248:	4293      	cmp	r3, r2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e060      	b.n	8002312 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_RCC_ClockConfig+0x268>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 020c 	and.w	r2, r3, #12
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	429a      	cmp	r2, r3
 8002260:	d1eb      	bne.n	800223a <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <HAL_RCC_ClockConfig+0x264>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d215      	bcs.n	800229c <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <HAL_RCC_ClockConfig+0x264>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f023 0207 	bic.w	r2, r3, #7
 8002278:	4906      	ldr	r1, [pc, #24]	; (8002294 <HAL_RCC_ClockConfig+0x264>)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <HAL_RCC_ClockConfig+0x264>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d006      	beq.n	800229c <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e03f      	b.n	8002312 <HAL_RCC_ClockConfig+0x2e2>
 8002292:	bf00      	nop
 8002294:	40022000 	.word	0x40022000
 8002298:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a8:	4b1c      	ldr	r3, [pc, #112]	; (800231c <HAL_RCC_ClockConfig+0x2ec>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4919      	ldr	r1, [pc, #100]	; (800231c <HAL_RCC_ClockConfig+0x2ec>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_RCC_ClockConfig+0x2ec>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	4911      	ldr	r1, [pc, #68]	; (800231c <HAL_RCC_ClockConfig+0x2ec>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80022da:	f000 f825 	bl	8002328 <HAL_RCC_GetSysClockFreq>
 80022de:	4601      	mov	r1, r0
 80022e0:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_RCC_ClockConfig+0x2ec>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022e8:	23f0      	movs	r3, #240	; 0xf0
 80022ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	fab3 f383 	clz	r3, r3
 80022fa:	fa22 f303 	lsr.w	r3, r2, r3
 80022fe:	4a08      	ldr	r2, [pc, #32]	; (8002320 <HAL_RCC_ClockConfig+0x2f0>)
 8002300:	5cd3      	ldrb	r3, [r2, r3]
 8002302:	fa21 f303 	lsr.w	r3, r1, r3
 8002306:	4a07      	ldr	r2, [pc, #28]	; (8002324 <HAL_RCC_ClockConfig+0x2f4>)
 8002308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800230a:	2000      	movs	r0, #0
 800230c:	f7fd ff72 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3778      	adds	r7, #120	; 0x78
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	080046f0 	.word	0x080046f0
 8002324:	20000008 	.word	0x20000008

08002328 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b08b      	sub	sp, #44	; 0x2c
 800232c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b04      	cmp	r3, #4
 8002350:	d002      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x30>
 8002352:	2b08      	cmp	r3, #8
 8002354:	d003      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x36>
 8002356:	e03c      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002358:	4b24      	ldr	r3, [pc, #144]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc4>)
 800235a:	623b      	str	r3, [r7, #32]
      break;
 800235c:	e03c      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002364:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002368:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	607b      	str	r3, [r7, #4]
  return(result);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	fab3 f383 	clz	r3, r3
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002382:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	f003 020f 	and.w	r2, r3, #15
 800238a:	230f      	movs	r3, #15
 800238c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	fa93 f3a3 	rbit	r3, r3
 8002394:	60fb      	str	r3, [r7, #12]
  return(result);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	fab3 f383 	clz	r3, r3
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
 80023a0:	4a14      	ldr	r2, [pc, #80]	; (80023f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80023b0:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
 80023c0:	e004      	b.n	80023cc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80023c6:	fb02 f303 	mul.w	r3, r2, r3
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	623b      	str	r3, [r7, #32]
      break;
 80023d0:	e002      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc4>)
 80023d4:	623b      	str	r3, [r7, #32]
      break;
 80023d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d8:	6a3b      	ldr	r3, [r7, #32]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	372c      	adds	r7, #44	; 0x2c
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	007a1200 	.word	0x007a1200
 80023f0:	080046d0 	.word	0x080046d0
 80023f4:	080046e0 	.word	0x080046e0
 80023f8:	003d0900 	.word	0x003d0900

080023fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b092      	sub	sp, #72	; 0x48
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002404:	2300      	movs	r3, #0
 8002406:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002408:	2300      	movs	r3, #0
 800240a:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80d6 	beq.w	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002420:	4b4d      	ldr	r3, [pc, #308]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d10e      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800242c:	4b4a      	ldr	r3, [pc, #296]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	4a49      	ldr	r2, [pc, #292]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002432:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002436:	61d3      	str	r3, [r2, #28]
 8002438:	4b47      	ldr	r3, [pc, #284]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002444:	2301      	movs	r3, #1
 8002446:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800244a:	4b44      	ldr	r3, [pc, #272]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	2b00      	cmp	r3, #0
 8002454:	d118      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002456:	4b41      	ldr	r3, [pc, #260]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a40      	ldr	r2, [pc, #256]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002460:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002462:	f7fd ff0b 	bl	800027c <HAL_GetTick>
 8002466:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002468:	e008      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246a:	f7fd ff07 	bl	800027c <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b64      	cmp	r3, #100	; 0x64
 8002476:	d901      	bls.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e14a      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x316>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247c:	4b37      	ldr	r3, [pc, #220]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002488:	4b33      	ldr	r3, [pc, #204]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002490:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 8083 	beq.w	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d07b      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024a8:	4b2b      	ldr	r3, [pc, #172]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	fa93 f3a3 	rbit	r3, r3
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80024c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	4b25      	ldr	r3, [pc, #148]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	461a      	mov	r2, r3
 80024d0:	2301      	movs	r3, #1
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024dc:	fa93 f3a3 	rbit	r3, r3
 80024e0:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80024e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024e4:	fab3 f383 	clz	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b1d      	ldr	r3, [pc, #116]	; (8002560 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024ec:	4413      	add	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	461a      	mov	r2, r3
 80024f2:	2300      	movs	r3, #0
 80024f4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024f6:	4a18      	ldr	r2, [pc, #96]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80024f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024fa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	2b00      	cmp	r3, #0
 8002504:	d04c      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7fd feb9 	bl	800027c <HAL_GetTick>
 800250a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	e00a      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x128>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fd feb5 	bl	800027c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	f241 3288 	movw	r2, #5000	; 0x1388
 800251c:	4293      	cmp	r3, r2
 800251e:	d901      	bls.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x128>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e0f6      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x316>
 8002524:	2302      	movs	r3, #2
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800252a:	fa93 f3a3 	rbit	r3, r3
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
 8002530:	2302      	movs	r3, #2
 8002532:	623b      	str	r3, [r7, #32]
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	61fb      	str	r3, [r7, #28]
  return(result);
 800253c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253e:	fab3 f383 	clz	r3, r3
 8002542:	b2db      	uxtb	r3, r3
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d108      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002552:	4b01      	ldr	r3, [pc, #4]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	e00d      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002558:	40021000 	.word	0x40021000
 800255c:	40007000 	.word	0x40007000
 8002560:	10908100 	.word	0x10908100
 8002564:	2302      	movs	r3, #2
 8002566:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	fa93 f3a3 	rbit	r3, r3
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	4b6a      	ldr	r3, [pc, #424]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	2202      	movs	r2, #2
 8002576:	613a      	str	r2, [r7, #16]
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	fa92 f2a2 	rbit	r2, r2
 800257e:	60fa      	str	r2, [r7, #12]
  return(result);
 8002580:	68fa      	ldr	r2, [r7, #12]
 8002582:	fab2 f282 	clz	r2, r2
 8002586:	b252      	sxtb	r2, r2
 8002588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800258c:	b252      	sxtb	r2, r2
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	f002 021f 	and.w	r2, r2, #31
 8002594:	2101      	movs	r1, #1
 8002596:	fa01 f202 	lsl.w	r2, r1, r2
 800259a:	4013      	ands	r3, r2
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0b6      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x112>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80025a0:	4b5e      	ldr	r3, [pc, #376]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025a2:	6a1b      	ldr	r3, [r3, #32]
 80025a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	495b      	ldr	r1, [pc, #364]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d105      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ba:	4b58      	ldr	r3, [pc, #352]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025bc:	69db      	ldr	r3, [r3, #28]
 80025be:	4a57      	ldr	r2, [pc, #348]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d008      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025d2:	4b52      	ldr	r3, [pc, #328]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f023 0203 	bic.w	r2, r3, #3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	494f      	ldr	r1, [pc, #316]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d008      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025f0:	4b4a      	ldr	r3, [pc, #296]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f4:	f023 0210 	bic.w	r2, r3, #16
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	4947      	ldr	r1, [pc, #284]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d008      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800260e:	4b43      	ldr	r3, [pc, #268]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4940      	ldr	r1, [pc, #256]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800261c:	4313      	orrs	r3, r2
 800261e:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800262c:	4b3b      	ldr	r3, [pc, #236]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	f023 0220 	bic.w	r2, r3, #32
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	4938      	ldr	r1, [pc, #224]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800263a:	4313      	orrs	r3, r2
 800263c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800264a:	4b34      	ldr	r3, [pc, #208]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	4931      	ldr	r1, [pc, #196]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002658:	4313      	orrs	r3, r2
 800265a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002668:	4b2c      	ldr	r3, [pc, #176]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	4929      	ldr	r1, [pc, #164]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002682:	2b00      	cmp	r3, #0
 8002684:	d008      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8002686:	4b25      	ldr	r3, [pc, #148]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	4922      	ldr	r1, [pc, #136]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002694:	4313      	orrs	r3, r2
 8002696:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80026a4:	4b1d      	ldr	r3, [pc, #116]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	491a      	ldr	r1, [pc, #104]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d008      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80026c2:	4b16      	ldr	r3, [pc, #88]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ce:	4913      	ldr	r1, [pc, #76]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d008      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ec:	490b      	ldr	r1, [pc, #44]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80026fe:	4b07      	ldr	r3, [pc, #28]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	4904      	ldr	r1, [pc, #16]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800270c:	4313      	orrs	r3, r2
 800270e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	4618      	mov	r0, r3
 8002714:	3748      	adds	r7, #72	; 0x48
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000

08002720 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e01d      	b.n	800276e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f001 fdc4 	bl	80042d4 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2202      	movs	r2, #2
 8002750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3304      	adds	r3, #4
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f000 fbda 	bl	8002f18 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef* htim)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e01d      	b.n	80027c4 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b00      	cmp	r3, #0
 8002792:	d106      	bne.n	80027a2 <HAL_TIM_OC_Init+0x2c>
  {   
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f815 	bl	80027cc <HAL_TIM_OC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2202      	movs	r2, #2
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */  
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3304      	adds	r3, #4
 80027b2:	4619      	mov	r1, r3
 80027b4:	4610      	mov	r0, r2
 80027b6:	f000 fbaf 	bl	8002f18 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80027c2:	2300      	movs	r3, #0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e01d      	b.n	800282e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision)); 
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_TIM_IC_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f001 fdc4 	bl	8004394 <HAL_TIM_IC_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY; 
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Init the base time for the input capture */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	3304      	adds	r3, #4
 800281c:	4619      	mov	r1, r3
 800281e:	4610      	mov	r0, r2
 8002820:	f000 fb7a 	bl	8002f18 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b086      	sub	sp, #24
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
    
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_TIM_Encoder_Init+0x20>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e083      	b.n	800295e <HAL_TIM_Encoder_Init+0x128>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d106      	bne.n	8002870 <HAL_TIM_Encoder_Init+0x3a>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f87b 	bl	8002966 <HAL_TIM_Encoder_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2202      	movs	r2, #2
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6812      	ldr	r2, [r2, #0]
 8002882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002886:	f023 0307 	bic.w	r3, r3, #7
 800288a:	6093      	str	r3, [r2, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3304      	adds	r3, #4
 8002894:	4619      	mov	r1, r3
 8002896:	4610      	mov	r0, r2
 8002898:	f000 fb3e 	bl	8002f18 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
 80028aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028c4:	f023 0303 	bic.w	r3, r3, #3
 80028c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	4313      	orrs	r3, r2
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
  
  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80028e2:	f023 030c 	bic.w	r3, r3, #12
 80028e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	4313      	orrs	r3, r2
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	011a      	lsls	r2, r3, #4
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	031b      	lsls	r3, r3, #12
 8002912:	4313      	orrs	r3, r2
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002920:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002928:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	4313      	orrs	r3, r2
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	621a      	str	r2, [r3, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b02      	cmp	r3, #2
 800298e:	d122      	bne.n	80029d6 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b02      	cmp	r3, #2
 800299c:	d11b      	bne.n	80029d6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f06f 0202 	mvn.w	r2, #2
 80029a6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	699b      	ldr	r3, [r3, #24]
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d003      	beq.n	80029c4 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fa8d 	bl	8002edc <HAL_TIM_IC_CaptureCallback>
 80029c2:	e005      	b.n	80029d0 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fa7f 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fa90 	bl	8002ef0 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b04      	cmp	r3, #4
 80029e2:	d122      	bne.n	8002a2a <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d11b      	bne.n	8002a2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f06f 0204 	mvn.w	r2, #4
 80029fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2202      	movs	r2, #2
 8002a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fa63 	bl	8002edc <HAL_TIM_IC_CaptureCallback>
 8002a16:	e005      	b.n	8002a24 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 fa55 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fa66 	bl	8002ef0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d122      	bne.n	8002a7e <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68db      	ldr	r3, [r3, #12]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d11b      	bne.n	8002a7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f06f 0208 	mvn.w	r2, #8
 8002a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2204      	movs	r2, #4
 8002a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f000 fa39 	bl	8002edc <HAL_TIM_IC_CaptureCallback>
 8002a6a:	e005      	b.n	8002a78 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fa2b 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fa3c 	bl	8002ef0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	f003 0310 	and.w	r3, r3, #16
 8002a88:	2b10      	cmp	r3, #16
 8002a8a:	d122      	bne.n	8002ad2 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d11b      	bne.n	8002ad2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f06f 0210 	mvn.w	r2, #16
 8002aa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fa0f 	bl	8002edc <HAL_TIM_IC_CaptureCallback>
 8002abe:	e005      	b.n	8002acc <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 fa01 	bl	8002ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 fa12 	bl	8002ef0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d10e      	bne.n	8002afe <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f06f 0201 	mvn.w	r2, #1
 8002af6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f9db 	bl	8002eb4 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	691b      	ldr	r3, [r3, #16]
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	2b80      	cmp	r3, #128	; 0x80
 8002b0a:	d10e      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b16:	2b80      	cmp	r3, #128	; 0x80
 8002b18:	d107      	bne.n	8002b2a <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b22:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f000 ff81 	bl	8003a2c <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b38:	d10e      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b44:	2b80      	cmp	r3, #128	; 0x80
 8002b46:	d107      	bne.n	8002b58 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b50:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 ff74 	bl	8003a40 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b62:	2b40      	cmp	r3, #64	; 0x40
 8002b64:	d10e      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d107      	bne.n	8002b84 <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b7c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f000 f9c0 	bl	8002f04 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d10e      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0320 	and.w	r3, r3, #32
 8002b9c:	2b20      	cmp	r3, #32
 8002b9e:	d107      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0220 	mvn.w	r2, #32
 8002ba8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 ff34 	bl	8003a18 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef* sConfig, uint32_t Channel)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
  
  __HAL_LOCK(htim);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d101      	bne.n	8002bd2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e08a      	b.n	8002ce8 <HAL_TIM_IC_ConfigChannel+0x130>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  if (Channel == TIM_CHANNEL_1)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d11b      	bne.n	8002c20 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	6819      	ldr	r1, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f000 fbfe 	bl	80033f8 <TIM_TI1_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 020c 	bic.w	r2, r2, #12
 8002c0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6999      	ldr	r1, [r3, #24]
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	689a      	ldr	r2, [r3, #8]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	619a      	str	r2, [r3, #24]
 8002c1e:	e05a      	b.n	8002cd6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b04      	cmp	r3, #4
 8002c24:	d11c      	bne.n	8002c60 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    
    TIM_TI2_SetConfig(htim->Instance, 
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f000 fc6c 	bl	8003512 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);
               
    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002c48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6999      	ldr	r1, [r3, #24]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	021a      	lsls	r2, r3, #8
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	619a      	str	r2, [r3, #24]
 8002c5e:	e03a      	b.n	8002cd6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d11b      	bne.n	8002c9e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
    
    TIM_TI3_SetConfig(htim->Instance,  
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	6819      	ldr	r1, [r3, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f000 fcc1 	bl	80035fc <TIM_TI3_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69da      	ldr	r2, [r3, #28]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f022 020c 	bic.w	r2, r2, #12
 8002c88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69d9      	ldr	r1, [r3, #28]
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	61da      	str	r2, [r3, #28]
 8002c9c:	e01b      	b.n	8002cd6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
    
    TIM_TI4_SetConfig(htim->Instance, 
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6818      	ldr	r0, [r3, #0]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	6819      	ldr	r1, [r3, #0]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f000 fce5 	bl	800367c <TIM_TI4_SetConfig>
               sConfig->ICPolarity,
               sConfig->ICSelection,
               sConfig->ICFilter);
               
    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002cc0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69d9      	ldr	r1, [r3, #28]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	021a      	lsls	r2, r3, #8
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	61da      	str	r2, [r3, #28]
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK; 
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3710      	adds	r7, #16
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_TIM_ConfigClockSource+0x1c>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e0cf      	b.n	8002eac <HAL_TIM_ConfigClockSource+0x1bc>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d07c      	beq.n	8002e42 <HAL_TIM_ConfigClockSource+0x152>
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d80f      	bhi.n	8002d6c <HAL_TIM_ConfigClockSource+0x7c>
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	f000 808f 	beq.w	8002e70 <HAL_TIM_ConfigClockSource+0x180>
 8002d52:	2b10      	cmp	r3, #16
 8002d54:	d803      	bhi.n	8002d5e <HAL_TIM_ConfigClockSource+0x6e>
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 8083 	beq.w	8002e62 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 8002d5c:	e09d      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	f000 808d 	beq.w	8002e7e <HAL_TIM_ConfigClockSource+0x18e>
 8002d64:	2b30      	cmp	r3, #48	; 0x30
 8002d66:	f000 8091 	beq.w	8002e8c <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 8002d6a:	e096      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002d6c:	2b70      	cmp	r3, #112	; 0x70
 8002d6e:	d018      	beq.n	8002da2 <HAL_TIM_ConfigClockSource+0xb2>
 8002d70:	2b70      	cmp	r3, #112	; 0x70
 8002d72:	d804      	bhi.n	8002d7e <HAL_TIM_ConfigClockSource+0x8e>
 8002d74:	2b50      	cmp	r3, #80	; 0x50
 8002d76:	d044      	beq.n	8002e02 <HAL_TIM_ConfigClockSource+0x112>
 8002d78:	2b60      	cmp	r3, #96	; 0x60
 8002d7a:	d052      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x132>
    break;    
 8002d7c:	e08d      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 8002d7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d82:	d003      	beq.n	8002d8c <HAL_TIM_ConfigClockSource+0x9c>
 8002d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d88:	d028      	beq.n	8002ddc <HAL_TIM_ConfigClockSource+0xec>
    break;    
 8002d8a:	e086      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d9a:	f023 0307 	bic.w	r3, r3, #7
 8002d9e:	6093      	str	r3, [r2, #8]
    break;
 8002da0:	e07b      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6899      	ldr	r1, [r3, #8]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f000 fcc4 	bl	800373e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dc8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	609a      	str	r2, [r3, #8]
    break;
 8002dda:	e05e      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	6899      	ldr	r1, [r3, #8]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685a      	ldr	r2, [r3, #4]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	f000 fca7 	bl	800373e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689a      	ldr	r2, [r3, #8]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dfe:	609a      	str	r2, [r3, #8]
    break;
 8002e00:	e04b      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f000 fb4c 	bl	80034ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2150      	movs	r1, #80	; 0x50
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fc6f 	bl	80036fe <TIM_ITRx_SetConfig>
    break;
 8002e20:	e03b      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6859      	ldr	r1, [r3, #4]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f000 fbb0 	bl	8003594 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2160      	movs	r1, #96	; 0x60
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fc5f 	bl	80036fe <TIM_ITRx_SetConfig>
    break;
 8002e40:	e02b      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	6859      	ldr	r1, [r3, #4]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	f000 fb2c 	bl	80034ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2140      	movs	r1, #64	; 0x40
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 fc4f 	bl	80036fe <TIM_ITRx_SetConfig>
    break;
 8002e60:	e01b      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fc48 	bl	80036fe <TIM_ITRx_SetConfig>
    break;
 8002e6e:	e014      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2110      	movs	r1, #16
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 fc41 	bl	80036fe <TIM_ITRx_SetConfig>
    break;
 8002e7c:	e00d      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2120      	movs	r1, #32
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fc3a 	bl	80036fe <TIM_ITRx_SetConfig>
    break;
 8002e8a:	e006      	b.n	8002e9a <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2130      	movs	r1, #48	; 0x30
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fc33 	bl	80036fe <TIM_ITRx_SetConfig>
    break;
 8002e98:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
  
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a2e      	ldr	r2, [pc, #184]	; (8002fe8 <TIM_Base_SetConfig+0xd0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d003      	beq.n	8002f3c <TIM_Base_SetConfig+0x24>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3a:	d108      	bne.n	8002f4e <TIM_Base_SetConfig+0x36>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a25      	ldr	r2, [pc, #148]	; (8002fe8 <TIM_Base_SetConfig+0xd0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d00f      	beq.n	8002f76 <TIM_Base_SetConfig+0x5e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5c:	d00b      	beq.n	8002f76 <TIM_Base_SetConfig+0x5e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a22      	ldr	r2, [pc, #136]	; (8002fec <TIM_Base_SetConfig+0xd4>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <TIM_Base_SetConfig+0x5e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a21      	ldr	r2, [pc, #132]	; (8002ff0 <TIM_Base_SetConfig+0xd8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d003      	beq.n	8002f76 <TIM_Base_SetConfig+0x5e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a20      	ldr	r2, [pc, #128]	; (8002ff4 <TIM_Base_SetConfig+0xdc>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d108      	bne.n	8002f88 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a0e      	ldr	r2, [pc, #56]	; (8002fe8 <TIM_Base_SetConfig+0xd0>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d00b      	beq.n	8002fcc <TIM_Base_SetConfig+0xb4>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a0d      	ldr	r2, [pc, #52]	; (8002fec <TIM_Base_SetConfig+0xd4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d007      	beq.n	8002fcc <TIM_Base_SetConfig+0xb4>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a0c      	ldr	r2, [pc, #48]	; (8002ff0 <TIM_Base_SetConfig+0xd8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d003      	beq.n	8002fcc <TIM_Base_SetConfig+0xb4>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a0b      	ldr	r2, [pc, #44]	; (8002ff4 <TIM_Base_SetConfig+0xdc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d103      	bne.n	8002fd4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	615a      	str	r2, [r3, #20]
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40012c00 	.word	0x40012c00
 8002fec:	40014000 	.word	0x40014000
 8002ff0:	40014400 	.word	0x40014400
 8002ff4:	40014800 	.word	0x40014800

08002ff8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	f023 0201 	bic.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a1b      	ldr	r3, [r3, #32]
 800301e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0303 	bic.w	r3, r3, #3
 800303e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4313      	orrs	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	f023 0302 	bic.w	r3, r3, #2
 8003050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a28      	ldr	r2, [pc, #160]	; (8003100 <TIM_OC1_SetConfig+0x108>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00b      	beq.n	800307c <TIM_OC1_SetConfig+0x84>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a27      	ldr	r2, [pc, #156]	; (8003104 <TIM_OC1_SetConfig+0x10c>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d007      	beq.n	800307c <TIM_OC1_SetConfig+0x84>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a26      	ldr	r2, [pc, #152]	; (8003108 <TIM_OC1_SetConfig+0x110>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d003      	beq.n	800307c <TIM_OC1_SetConfig+0x84>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a25      	ldr	r2, [pc, #148]	; (800310c <TIM_OC1_SetConfig+0x114>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d10c      	bne.n	8003096 <TIM_OC1_SetConfig+0x9e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f023 0308 	bic.w	r3, r3, #8
 8003082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	4313      	orrs	r3, r2
 800308c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f023 0304 	bic.w	r3, r3, #4
 8003094:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a19      	ldr	r2, [pc, #100]	; (8003100 <TIM_OC1_SetConfig+0x108>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d00b      	beq.n	80030b6 <TIM_OC1_SetConfig+0xbe>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a18      	ldr	r2, [pc, #96]	; (8003104 <TIM_OC1_SetConfig+0x10c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d007      	beq.n	80030b6 <TIM_OC1_SetConfig+0xbe>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a17      	ldr	r2, [pc, #92]	; (8003108 <TIM_OC1_SetConfig+0x110>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d003      	beq.n	80030b6 <TIM_OC1_SetConfig+0xbe>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a16      	ldr	r2, [pc, #88]	; (800310c <TIM_OC1_SetConfig+0x114>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d111      	bne.n	80030da <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	4313      	orrs	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68fa      	ldr	r2, [r7, #12]
 80030e4:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	621a      	str	r2, [r3, #32]
} 
 80030f4:	bf00      	nop
 80030f6:	371c      	adds	r7, #28
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	40012c00 	.word	0x40012c00
 8003104:	40014000 	.word	0x40014000
 8003108:	40014400 	.word	0x40014400
 800310c:	40014800 	.word	0x40014800

08003110 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 8003122:	2300      	movs	r3, #0
 8003124:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	f023 0210 	bic.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a1b      	ldr	r3, [r3, #32]
 8003136:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800314e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003156:	60fb      	str	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4313      	orrs	r3, r2
 8003162:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f023 0320 	bic.w	r3, r3, #32
 800316a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a24      	ldr	r2, [pc, #144]	; (800320c <TIM_OC2_SetConfig+0xfc>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d10d      	bne.n	800319c <TIM_OC2_SetConfig+0x8c>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003186:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4313      	orrs	r3, r2
 8003192:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800319a:	617b      	str	r3, [r7, #20]
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a1b      	ldr	r2, [pc, #108]	; (800320c <TIM_OC2_SetConfig+0xfc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d00b      	beq.n	80031bc <TIM_OC2_SetConfig+0xac>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a1a      	ldr	r2, [pc, #104]	; (8003210 <TIM_OC2_SetConfig+0x100>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d007      	beq.n	80031bc <TIM_OC2_SetConfig+0xac>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a19      	ldr	r2, [pc, #100]	; (8003214 <TIM_OC2_SetConfig+0x104>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d003      	beq.n	80031bc <TIM_OC2_SetConfig+0xac>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a18      	ldr	r2, [pc, #96]	; (8003218 <TIM_OC2_SetConfig+0x108>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d113      	bne.n	80031e4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031c2:	613b      	str	r3, [r7, #16]
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80031ca:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	619a      	str	r2, [r3, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	621a      	str	r2, [r3, #32]
}
 80031fe:	bf00      	nop
 8003200:	371c      	adds	r7, #28
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	40012c00 	.word	0x40012c00
 8003210:	40014000 	.word	0x40014000
 8003214:	40014400 	.word	0x40014400
 8003218:	40014800 	.word	0x40014800

0800321c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800321c:	b480      	push	{r7}
 800321e:	b087      	sub	sp, #28
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U; 
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	613b      	str	r3, [r7, #16]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	4313      	orrs	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a23      	ldr	r2, [pc, #140]	; (8003314 <TIM_OC3_SetConfig+0xf8>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d10d      	bne.n	80032a6 <TIM_OC3_SetConfig+0x8a>
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	021b      	lsls	r3, r3, #8
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	4313      	orrs	r3, r2
 800329c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032a4:	617b      	str	r3, [r7, #20]
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a1a      	ldr	r2, [pc, #104]	; (8003314 <TIM_OC3_SetConfig+0xf8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00b      	beq.n	80032c6 <TIM_OC3_SetConfig+0xaa>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a19      	ldr	r2, [pc, #100]	; (8003318 <TIM_OC3_SetConfig+0xfc>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d007      	beq.n	80032c6 <TIM_OC3_SetConfig+0xaa>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a18      	ldr	r2, [pc, #96]	; (800331c <TIM_OC3_SetConfig+0x100>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d003      	beq.n	80032c6 <TIM_OC3_SetConfig+0xaa>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a17      	ldr	r2, [pc, #92]	; (8003320 <TIM_OC3_SetConfig+0x104>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d113      	bne.n	80032ee <TIM_OC3_SetConfig+0xd2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032d4:	613b      	str	r3, [r7, #16]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	697a      	ldr	r2, [r7, #20]
 8003306:	621a      	str	r2, [r3, #32]
}
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40012c00 	.word	0x40012c00
 8003318:	40014000 	.word	0x40014000
 800331c:	40014400 	.word	0x40014400
 8003320:	40014800 	.word	0x40014800

08003324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8003336:	2300      	movs	r3, #0
 8003338:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	617b      	str	r3, [r7, #20]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800335e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003362:	613b      	str	r3, [r7, #16]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336a:	613b      	str	r3, [r7, #16]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800337e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	031b      	lsls	r3, r3, #12
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a16      	ldr	r2, [pc, #88]	; (80033e8 <TIM_OC4_SetConfig+0xc4>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00b      	beq.n	80033ac <TIM_OC4_SetConfig+0x88>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a15      	ldr	r2, [pc, #84]	; (80033ec <TIM_OC4_SetConfig+0xc8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d007      	beq.n	80033ac <TIM_OC4_SetConfig+0x88>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <TIM_OC4_SetConfig+0xcc>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d003      	beq.n	80033ac <TIM_OC4_SetConfig+0x88>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <TIM_OC4_SetConfig+0xd0>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d109      	bne.n	80033c0 <TIM_OC4_SetConfig+0x9c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b2:	617b      	str	r3, [r7, #20]
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	019b      	lsls	r3, r3, #6
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	61da      	str	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	621a      	str	r2, [r3, #32]
}
 80033da:	bf00      	nop
 80033dc:	371c      	adds	r7, #28
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40014000 	.word	0x40014000
 80033f0:	40014400 	.word	0x40014400
 80033f4:	40014800 	.word	0x40014800

080033f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a1b      	ldr	r3, [r3, #32]
 8003424:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	4a1e      	ldr	r2, [pc, #120]	; (80034a4 <TIM_TI1_SetConfig+0xac>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d007      	beq.n	800343e <TIM_TI1_SetConfig+0x46>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003434:	d003      	beq.n	800343e <TIM_TI1_SetConfig+0x46>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	4a1b      	ldr	r2, [pc, #108]	; (80034a8 <TIM_TI1_SetConfig+0xb0>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <TIM_TI1_SetConfig+0x4a>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <TIM_TI1_SetConfig+0x4c>
 8003442:	2300      	movs	r3, #0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	e003      	b.n	8003462 <TIM_TI1_SetConfig+0x6a>
  } 
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	617b      	str	r3, [r7, #20]
  }
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003468:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	b2db      	uxtb	r3, r3
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	4313      	orrs	r3, r2
 8003474:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f023 030a 	bic.w	r3, r3, #10
 800347c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f003 030a 	and.w	r3, r3, #10
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	4313      	orrs	r3, r2
 8003488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40014000 	.word	0x40014000

080034ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	f023 0201 	bic.w	r2, r3, #1
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034de:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f023 030a 	bic.w	r3, r3, #10
 80034f0:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	621a      	str	r2, [r3, #32]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003512:	b480      	push	{r7}
 8003514:	b087      	sub	sp, #28
 8003516:	af00      	add	r7, sp, #0
 8003518:	60f8      	str	r0, [r7, #12]
 800351a:	60b9      	str	r1, [r7, #8]
 800351c:	607a      	str	r2, [r7, #4]
 800351e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8003520:	2300      	movs	r3, #0
 8003522:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	f023 0210 	bic.w	r2, r3, #16
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003546:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	021b      	lsls	r3, r3, #8
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003558:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	031b      	lsls	r3, r3, #12
 800355e:	b29b      	uxth	r3, r3
 8003560:	697a      	ldr	r2, [r7, #20]
 8003562:	4313      	orrs	r3, r2
 8003564:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800356c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	693a      	ldr	r2, [r7, #16]
 8003586:	621a      	str	r2, [r3, #32]
}
 8003588:	bf00      	nop
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	f023 0210 	bic.w	r2, r3, #16
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80035c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	031b      	lsls	r3, r3, #12
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80035d8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	697a      	ldr	r2, [r7, #20]
 80035e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	621a      	str	r2, [r3, #32]
}
 80035f0:	bf00      	nop
 80035f2:	371c      	adds	r7, #28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be 
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b087      	sub	sp, #28
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
 8003608:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800360a:	2300      	movs	r3, #0
 800360c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 0303 	bic.w	r3, r3, #3
 8003630:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003640:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	b2db      	uxtb	r3, r3
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003654:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	621a      	str	r2, [r3, #32]
}
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800368e:	2300      	movs	r3, #0
 8003690:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	031b      	lsls	r3, r3, #12
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80036d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	031b      	lsls	r3, r3, #12
 80036dc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	621a      	str	r2, [r3, #32]
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80036fe:	b480      	push	{r7}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	460b      	mov	r3, r1
 8003708:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800371a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800371c:	887b      	ldrh	r3, [r7, #2]
 800371e:	f043 0307 	orr.w	r3, r3, #7
 8003722:	b29b      	uxth	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	4313      	orrs	r3, r2
 800372a:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68fa      	ldr	r2, [r7, #12]
 8003730:	609a      	str	r2, [r3, #8]
}
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800373e:	b480      	push	{r7}
 8003740:	b087      	sub	sp, #28
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800375c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	021a      	lsls	r2, r3, #8
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	431a      	orrs	r2, r3
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4313      	orrs	r3, r2
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	609a      	str	r2, [r3, #8]
} 
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef* sConfig,
                                           uint32_t Channel)
{  
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel)); 
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  
  /* Check input state */
  __HAL_LOCK(htim); 
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_TIM_OC_ConfigChannel+0x1a>
 800379a:	2302      	movs	r3, #2
 800379c:	e06c      	b.n	8003878 <HAL_TIM_OC_ConfigChannel+0xf4>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  switch (Channel)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b14      	cmp	r3, #20
 80037b2:	d857      	bhi.n	8003864 <HAL_TIM_OC_ConfigChannel+0xe0>
 80037b4:	a201      	add	r2, pc, #4	; (adr r2, 80037bc <HAL_TIM_OC_ConfigChannel+0x38>)
 80037b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ba:	bf00      	nop
 80037bc:	08003811 	.word	0x08003811
 80037c0:	08003865 	.word	0x08003865
 80037c4:	08003865 	.word	0x08003865
 80037c8:	08003865 	.word	0x08003865
 80037cc:	0800381f 	.word	0x0800381f
 80037d0:	08003865 	.word	0x08003865
 80037d4:	08003865 	.word	0x08003865
 80037d8:	08003865 	.word	0x08003865
 80037dc:	0800382d 	.word	0x0800382d
 80037e0:	08003865 	.word	0x08003865
 80037e4:	08003865 	.word	0x08003865
 80037e8:	08003865 	.word	0x08003865
 80037ec:	0800383b 	.word	0x0800383b
 80037f0:	08003865 	.word	0x08003865
 80037f4:	08003865 	.word	0x08003865
 80037f8:	08003865 	.word	0x08003865
 80037fc:	08003849 	.word	0x08003849
 8003800:	08003865 	.word	0x08003865
 8003804:	08003865 	.word	0x08003865
 8003808:	08003865 	.word	0x08003865
 800380c:	08003857 	.word	0x08003857
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
     /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	4618      	mov	r0, r3
 8003818:	f7ff fbee 	bl	8002ff8 <TIM_OC1_SetConfig>
    }
    break;
 800381c:	e023      	b.n	8003866 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff fc73 	bl	8003110 <TIM_OC2_SetConfig>
    }
    break;
 800382a:	e01c      	b.n	8003866 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68b9      	ldr	r1, [r7, #8]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fcf2 	bl	800321c <TIM_OC3_SetConfig>
    }
    break;
 8003838:	e015      	b.n	8003866 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 4 in Output Compare */
       TIM_OC4_SetConfig(htim->Instance, sConfig);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff fd6f 	bl	8003324 <TIM_OC4_SetConfig>
    }
    break;
 8003846:	e00e      	b.n	8003866 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 5 in Output Compare */
       TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68b9      	ldr	r1, [r7, #8]
 800384e:	4618      	mov	r0, r3
 8003850:	f000 f900 	bl	8003a54 <TIM_OC5_SetConfig>
    }
    break;
 8003854:	e007      	b.n	8003866 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
       /* Configure the TIM Channel 6 in Output Compare */
       TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	4618      	mov	r0, r3
 800385e:	f000 f95d 	bl	8003b1c <TIM_OC6_SetConfig>
    }
    break;
 8003862:	e000      	b.n	8003866 <HAL_TIM_OC_ConfigChannel+0xe2>
        
    default:
    break;    
 8003864:	bf00      	nop
  }
  
  htim->State = HAL_TIM_STATE_READY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim); 
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3710      	adds	r7, #16
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003894:	2302      	movs	r3, #2
 8003896:	e038      	b.n	800390a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a18      	ldr	r2, [pc, #96]	; (8003918 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d108      	bne.n	80038cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4313      	orrs	r3, r2
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038e4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
} 
 800390a:	4618      	mov	r0, r3
 800390c:	3714      	adds	r7, #20
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40012c00 	.word	0x40012c00

0800391c <HAL_TIMEx_ConfigBreakDeadTime>:
            STM32F398xx and STM32F303x8 two break inputs can be configured.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim, 
                                                TIM_BreakDeadTimeConfigTypeDef * sBreakDeadTimeConfig)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0U;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003934:	2302      	movs	r3, #2
 8003936:	e067      	b.n	8003a08 <HAL_TIMEx_ConfigBreakDeadTime+0xec>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	4313      	orrs	r3, r2
 8003968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4313      	orrs	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ac:	4313      	orrs	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	041b      	lsls	r3, r3, #16
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a13      	ldr	r2, [pc, #76]	; (8003a14 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d115      	bne.n	80039f6 <HAL_TIMEx_ConfigBreakDeadTime+0xda>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d4:	051b      	lsls	r3, r3, #20
 80039d6:	4313      	orrs	r3, r2
 80039d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	40012c00 	.word	0x40012c00

08003a18 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b087      	sub	sp, #28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	613b      	str	r3, [r7, #16]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a92:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003aa4:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	041b      	lsls	r3, r3, #16
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <TIM_OC5_SetConfig+0xb8>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00b      	beq.n	8003ad2 <TIM_OC5_SetConfig+0x7e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <TIM_OC5_SetConfig+0xbc>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d007      	beq.n	8003ad2 <TIM_OC5_SetConfig+0x7e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <TIM_OC5_SetConfig+0xc0>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d003      	beq.n	8003ad2 <TIM_OC5_SetConfig+0x7e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <TIM_OC5_SetConfig+0xc4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d109      	bne.n	8003ae6 <TIM_OC5_SetConfig+0x92>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	021b      	lsls	r3, r3, #8
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	659a      	str	r2, [r3, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	621a      	str	r2, [r3, #32]
}
 8003b00:	bf00      	nop
 8003b02:	371c      	adds	r7, #28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	40012c00 	.word	0x40012c00
 8003b10:	40014000 	.word	0x40014000
 8003b14:	40014400 	.word	0x40014400
 8003b18:	40014800 	.word	0x40014800

08003b1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U; 
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	621a      	str	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	60fb      	str	r3, [r7, #12]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	613b      	str	r3, [r7, #16]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b5a:	613b      	str	r3, [r7, #16]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	021b      	lsls	r3, r3, #8
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	051b      	lsls	r3, r3, #20
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a16      	ldr	r2, [pc, #88]	; (8003bd8 <TIM_OC6_SetConfig+0xbc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00b      	beq.n	8003b9c <TIM_OC6_SetConfig+0x80>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <TIM_OC6_SetConfig+0xc0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d007      	beq.n	8003b9c <TIM_OC6_SetConfig+0x80>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <TIM_OC6_SetConfig+0xc4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_OC6_SetConfig+0x80>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <TIM_OC6_SetConfig+0xc8>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d109      	bne.n	8003bb0 <TIM_OC6_SetConfig+0x94>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	029b      	lsls	r3, r3, #10
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	605a      	str	r2, [r3, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	621a      	str	r2, [r3, #32]
} 
 8003bca:	bf00      	nop
 8003bcc:	371c      	adds	r7, #28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40012c00 	.word	0x40012c00
 8003bdc:	40014000 	.word	0x40014000
 8003be0:	40014400 	.word	0x40014400
 8003be4:	40014800 	.word	0x40014800

08003be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bec:	f7fc faec 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bf0:	f000 f80d 	bl	8003c0e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bf4:	f000 fa5c 	bl	80040b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003bf8:	f000 f862 	bl	8003cc0 <MX_ADC1_Init>
  MX_DAC_Init();
 8003bfc:	f000 f8ba 	bl	8003d74 <MX_DAC_Init>
  MX_TIM1_Init();
 8003c00:	f000 f8e2 	bl	8003dc8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003c04:	f000 f9a6 	bl	8003f54 <MX_TIM2_Init>
  MX_TIM6_Init();
 8003c08:	f000 fa1a 	bl	8004040 <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003c0c:	e7fe      	b.n	8003c0c <main+0x24>

08003c0e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b09c      	sub	sp, #112	; 0x70
 8003c12:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c18:	2228      	movs	r2, #40	; 0x28
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 fd43 	bl	80046a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c26:	2200      	movs	r2, #0
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
 8003c2c:	609a      	str	r2, [r3, #8]
 8003c2e:	60da      	str	r2, [r3, #12]
 8003c30:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c32:	463b      	mov	r3, r7
 8003c34:	2234      	movs	r2, #52	; 0x34
 8003c36:	2100      	movs	r1, #0
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fd35 	bl	80046a8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003c42:	2301      	movs	r3, #1
 8003c44:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c46:	2310      	movs	r3, #16
 8003c48:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8003c52:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8003c56:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f7fd faf9 	bl	8001254 <HAL_RCC_OscConfig>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003c68:	f000 fa6c 	bl	8004144 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c6c:	230f      	movs	r3, #15
 8003c6e:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c70:	2302      	movs	r3, #2
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c74:	2300      	movs	r3, #0
 8003c76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003c80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003c84:	2101      	movs	r1, #1
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe f9d2 	bl	8002030 <HAL_RCC_ClockConfig>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003c92:	f000 fa57 	bl	8004144 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC1;
 8003c96:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8003c9a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8003ca0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ca4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ca6:	463b      	mov	r3, r7
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fe fba7 	bl	80023fc <HAL_RCCEx_PeriphCLKConfig>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003cb4:	f000 fa46 	bl	8004144 <Error_Handler>
  }
}
 8003cb8:	bf00      	nop
 8003cba:	3770      	adds	r7, #112	; 0x70
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003cc6:	463b      	mov	r3, r7
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	60da      	str	r2, [r3, #12]
 8003cd2:	611a      	str	r2, [r3, #16]
 8003cd4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003cd6:	4b26      	ldr	r3, [pc, #152]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003cd8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003cdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003cde:	4b24      	ldr	r3, [pc, #144]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003ce4:	4b22      	ldr	r3, [pc, #136]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003cea:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003cf0:	4b1f      	ldr	r3, [pc, #124]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003cf6:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003cfc:	4b1c      	ldr	r3, [pc, #112]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d02:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003d0e:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003d14:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003d20:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003d26:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d2c:	4810      	ldr	r0, [pc, #64]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003d2e:	f7fc fab1 	bl	8000294 <HAL_ADC_Init>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8003d38:	f000 fa04 	bl	8004144 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d40:	2301      	movs	r3, #1
 8003d42:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003d44:	2300      	movs	r3, #0
 8003d46:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003d54:	463b      	mov	r3, r7
 8003d56:	4619      	mov	r1, r3
 8003d58:	4805      	ldr	r0, [pc, #20]	; (8003d70 <MX_ADC1_Init+0xb0>)
 8003d5a:	f7fc fc1f 	bl	800059c <HAL_ADC_ConfigChannel>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8003d64:	f000 f9ee 	bl	8004144 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003d68:	bf00      	nop
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	2000002c 	.word	0x2000002c

08003d74 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003d7a:	1d3b      	adds	r3, r7, #4
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 8003d84:	4b0e      	ldr	r3, [pc, #56]	; (8003dc0 <MX_DAC_Init+0x4c>)
 8003d86:	4a0f      	ldr	r2, [pc, #60]	; (8003dc4 <MX_DAC_Init+0x50>)
 8003d88:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003d8a:	480d      	ldr	r0, [pc, #52]	; (8003dc0 <MX_DAC_Init+0x4c>)
 8003d8c:	f7fd f829 	bl	8000de2 <HAL_DAC_Init>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8003d96:	f000 f9d5 	bl	8004144 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8003d9a:	233c      	movs	r3, #60	; 0x3c
 8003d9c:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003da2:	1d3b      	adds	r3, r7, #4
 8003da4:	2200      	movs	r2, #0
 8003da6:	4619      	mov	r1, r3
 8003da8:	4805      	ldr	r0, [pc, #20]	; (8003dc0 <MX_DAC_Init+0x4c>)
 8003daa:	f7fd f877 	bl	8000e9c <HAL_DAC_ConfigChannel>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8003db4:	f000 f9c6 	bl	8004144 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003db8:	bf00      	nop
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000080 	.word	0x20000080
 8003dc4:	40007400 	.word	0x40007400

08003dc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b09a      	sub	sp, #104	; 0x68
 8003dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003dce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	605a      	str	r2, [r3, #4]
 8003dd8:	609a      	str	r2, [r3, #8]
 8003dda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ddc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003de0:	2200      	movs	r2, #0
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003de8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
 8003df2:	609a      	str	r2, [r3, #8]
 8003df4:	60da      	str	r2, [r3, #12]
 8003df6:	611a      	str	r2, [r3, #16]
 8003df8:	615a      	str	r2, [r3, #20]
 8003dfa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003dfc:	1d3b      	adds	r3, r7, #4
 8003dfe:	222c      	movs	r2, #44	; 0x2c
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fc50 	bl	80046a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e08:	4b50      	ldr	r3, [pc, #320]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003e0a:	4a51      	ldr	r2, [pc, #324]	; (8003f50 <MX_TIM1_Init+0x188>)
 8003e0c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003e0e:	4b4f      	ldr	r3, [pc, #316]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003e14:	4b4d      	ldr	r3, [pc, #308]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003e16:	2220      	movs	r2, #32
 8003e18:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 8003e1a:	4b4c      	ldr	r3, [pc, #304]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003e1c:	220a      	movs	r2, #10
 8003e1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8003e20:	4b4a      	ldr	r3, [pc, #296]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e26:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e28:	4b48      	ldr	r3, [pc, #288]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e2e:	4b47      	ldr	r3, [pc, #284]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e34:	4845      	ldr	r0, [pc, #276]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003e36:	f7fe fc73 	bl	8002720 <HAL_TIM_Base_Init>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d001      	beq.n	8003e44 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003e40:	f000 f980 	bl	8004144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e48:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003e4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e4e:	4619      	mov	r1, r3
 8003e50:	483e      	ldr	r0, [pc, #248]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003e52:	f7fe ff4d 	bl	8002cf0 <HAL_TIM_ConfigClockSource>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003e5c:	f000 f972 	bl	8004144 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8003e60:	483a      	ldr	r0, [pc, #232]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003e62:	f7fe fc88 	bl	8002776 <HAL_TIM_OC_Init>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003e6c:	f000 f96a 	bl	8004144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e70:	2300      	movs	r3, #0
 8003e72:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e74:	2300      	movs	r3, #0
 8003e76:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003e7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e80:	4619      	mov	r1, r3
 8003e82:	4832      	ldr	r0, [pc, #200]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003e84:	f7ff fcfc 	bl	8003880 <HAL_TIMEx_MasterConfigSynchronization>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8003e8e:	f000 f959 	bl	8004144 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003e92:	2300      	movs	r3, #0
 8003e94:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8003e96:	2300      	movs	r3, #0
 8003e98:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003eae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4825      	ldr	r0, [pc, #148]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003eb8:	f7ff fc64 	bl	8003784 <HAL_TIM_OC_ConfigChannel>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8003ec2:	f000 f93f 	bl	8004144 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ec6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003eca:	2204      	movs	r2, #4
 8003ecc:	4619      	mov	r1, r3
 8003ece:	481f      	ldr	r0, [pc, #124]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003ed0:	f7ff fc58 	bl	8003784 <HAL_TIM_OC_ConfigChannel>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8003eda:	f000 f933 	bl	8004144 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003ede:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ee2:	2208      	movs	r2, #8
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	4819      	ldr	r0, [pc, #100]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003ee8:	f7ff fc4c 	bl	8003784 <HAL_TIM_OC_ConfigChannel>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8003ef2:	f000 f927 	bl	8004144 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 3;
 8003f02:	2303      	movs	r3, #3
 8003f04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8003f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f0a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f10:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003f1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8003f24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003f2a:	1d3b      	adds	r3, r7, #4
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4807      	ldr	r0, [pc, #28]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003f30:	f7ff fcf4 	bl	800391c <HAL_TIMEx_ConfigBreakDeadTime>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 8003f3a:	f000 f903 	bl	8004144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003f3e:	4803      	ldr	r0, [pc, #12]	; (8003f4c <MX_TIM1_Init+0x184>)
 8003f40:	f000 fa88 	bl	8004454 <HAL_TIM_MspPostInit>

}
 8003f44:	bf00      	nop
 8003f46:	3768      	adds	r7, #104	; 0x68
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	200000d4 	.word	0x200000d4
 8003f50:	40012c00 	.word	0x40012c00

08003f54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b090      	sub	sp, #64	; 0x40
 8003f58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003f5a:	f107 031c 	add.w	r3, r7, #28
 8003f5e:	2224      	movs	r2, #36	; 0x24
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f000 fba0 	bl	80046a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f68:	f107 0310 	add.w	r3, r7, #16
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	605a      	str	r2, [r3, #4]
 8003f72:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003f74:	463b      	mov	r3, r7
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	609a      	str	r2, [r3, #8]
 8003f7e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003f80:	4b2e      	ldr	r3, [pc, #184]	; (800403c <MX_TIM2_Init+0xe8>)
 8003f82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003f86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003f88:	4b2c      	ldr	r3, [pc, #176]	; (800403c <MX_TIM2_Init+0xe8>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f8e:	4b2b      	ldr	r3, [pc, #172]	; (800403c <MX_TIM2_Init+0xe8>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8003f94:	4b29      	ldr	r3, [pc, #164]	; (800403c <MX_TIM2_Init+0xe8>)
 8003f96:	2200      	movs	r2, #0
 8003f98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f9a:	4b28      	ldr	r3, [pc, #160]	; (800403c <MX_TIM2_Init+0xe8>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fa0:	4b26      	ldr	r3, [pc, #152]	; (800403c <MX_TIM2_Init+0xe8>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003fa6:	4825      	ldr	r0, [pc, #148]	; (800403c <MX_TIM2_Init+0xe8>)
 8003fa8:	f7fe fc1a 	bl	80027e0 <HAL_TIM_IC_Init>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8003fb2:	f000 f8c7 	bl	8004144 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Filter = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Filter = 0;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003fda:	f107 031c 	add.w	r3, r7, #28
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4816      	ldr	r0, [pc, #88]	; (800403c <MX_TIM2_Init+0xe8>)
 8003fe2:	f7fe fc28 	bl	8002836 <HAL_TIM_Encoder_Init>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d001      	beq.n	8003ff0 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003fec:	f000 f8aa 	bl	8004144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003ff8:	f107 0310 	add.w	r3, r7, #16
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	480f      	ldr	r0, [pc, #60]	; (800403c <MX_TIM2_Init+0xe8>)
 8004000:	f7ff fc3e 	bl	8003880 <HAL_TIMEx_MasterConfigSynchronization>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800400a:	f000 f89b 	bl	8004144 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800400e:	2300      	movs	r3, #0
 8004010:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004012:	2301      	movs	r3, #1
 8004014:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800401a:	2300      	movs	r3, #0
 800401c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800401e:	463b      	mov	r3, r7
 8004020:	2208      	movs	r2, #8
 8004022:	4619      	mov	r1, r3
 8004024:	4805      	ldr	r0, [pc, #20]	; (800403c <MX_TIM2_Init+0xe8>)
 8004026:	f7fe fdc7 	bl	8002bb8 <HAL_TIM_IC_ConfigChannel>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8004030:	f000 f888 	bl	8004144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004034:	bf00      	nop
 8004036:	3740      	adds	r7, #64	; 0x40
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}
 800403c:	20000114 	.word	0x20000114

08004040 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004046:	1d3b      	adds	r3, r7, #4
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004050:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <MX_TIM6_Init+0x68>)
 8004052:	4a16      	ldr	r2, [pc, #88]	; (80040ac <MX_TIM6_Init+0x6c>)
 8004054:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 5000;
 8004056:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <MX_TIM6_Init+0x68>)
 8004058:	f241 3288 	movw	r2, #5000	; 0x1388
 800405c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800405e:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <MX_TIM6_Init+0x68>)
 8004060:	2200      	movs	r2, #0
 8004062:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 8004064:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <MX_TIM6_Init+0x68>)
 8004066:	f24c 3250 	movw	r2, #50000	; 0xc350
 800406a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <MX_TIM6_Init+0x68>)
 800406e:	2200      	movs	r2, #0
 8004070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004072:	480d      	ldr	r0, [pc, #52]	; (80040a8 <MX_TIM6_Init+0x68>)
 8004074:	f7fe fb54 	bl	8002720 <HAL_TIM_Base_Init>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800407e:	f000 f861 	bl	8004144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8004082:	2310      	movs	r3, #16
 8004084:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800408a:	1d3b      	adds	r3, r7, #4
 800408c:	4619      	mov	r1, r3
 800408e:	4806      	ldr	r0, [pc, #24]	; (80040a8 <MX_TIM6_Init+0x68>)
 8004090:	f7ff fbf6 	bl	8003880 <HAL_TIMEx_MasterConfigSynchronization>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800409a:	f000 f853 	bl	8004144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000094 	.word	0x20000094
 80040ac:	40001000 	.word	0x40001000

080040b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b6:	f107 030c 	add.w	r3, r7, #12
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
 80040be:	605a      	str	r2, [r3, #4]
 80040c0:	609a      	str	r2, [r3, #8]
 80040c2:	60da      	str	r2, [r3, #12]
 80040c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80040c6:	4b1d      	ldr	r3, [pc, #116]	; (800413c <MX_GPIO_Init+0x8c>)
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	4a1c      	ldr	r2, [pc, #112]	; (800413c <MX_GPIO_Init+0x8c>)
 80040cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80040d0:	6153      	str	r3, [r2, #20]
 80040d2:	4b1a      	ldr	r3, [pc, #104]	; (800413c <MX_GPIO_Init+0x8c>)
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040de:	4b17      	ldr	r3, [pc, #92]	; (800413c <MX_GPIO_Init+0x8c>)
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	4a16      	ldr	r2, [pc, #88]	; (800413c <MX_GPIO_Init+0x8c>)
 80040e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e8:	6153      	str	r3, [r2, #20]
 80040ea:	4b14      	ldr	r3, [pc, #80]	; (800413c <MX_GPIO_Init+0x8c>)
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f2:	607b      	str	r3, [r7, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040f6:	4b11      	ldr	r3, [pc, #68]	; (800413c <MX_GPIO_Init+0x8c>)
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	4a10      	ldr	r2, [pc, #64]	; (800413c <MX_GPIO_Init+0x8c>)
 80040fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004100:	6153      	str	r3, [r2, #20]
 8004102:	4b0e      	ldr	r3, [pc, #56]	; (800413c <MX_GPIO_Init+0x8c>)
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IHM09LEDRED_GPIO_Port, IHM09LEDRED_Pin, GPIO_PIN_SET);
 800410e:	2201      	movs	r2, #1
 8004110:	2104      	movs	r1, #4
 8004112:	480b      	ldr	r0, [pc, #44]	; (8004140 <MX_GPIO_Init+0x90>)
 8004114:	f7fd f886 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IHM09LEDRED_Pin */
  GPIO_InitStruct.Pin = IHM09LEDRED_Pin;
 8004118:	2304      	movs	r3, #4
 800411a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800411c:	2301      	movs	r3, #1
 800411e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004124:	2300      	movs	r3, #0
 8004126:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IHM09LEDRED_GPIO_Port, &GPIO_InitStruct);
 8004128:	f107 030c 	add.w	r3, r7, #12
 800412c:	4619      	mov	r1, r3
 800412e:	4804      	ldr	r0, [pc, #16]	; (8004140 <MX_GPIO_Init+0x90>)
 8004130:	f7fc ff02 	bl	8000f38 <HAL_GPIO_Init>

}
 8004134:	bf00      	nop
 8004136:	3720      	adds	r7, #32
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40021000 	.word	0x40021000
 8004140:	48000400 	.word	0x48000400

08004144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800415a:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <HAL_MspInit+0x44>)
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	4a0e      	ldr	r2, [pc, #56]	; (8004198 <HAL_MspInit+0x44>)
 8004160:	f043 0301 	orr.w	r3, r3, #1
 8004164:	6193      	str	r3, [r2, #24]
 8004166:	4b0c      	ldr	r3, [pc, #48]	; (8004198 <HAL_MspInit+0x44>)
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	607b      	str	r3, [r7, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004172:	4b09      	ldr	r3, [pc, #36]	; (8004198 <HAL_MspInit+0x44>)
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	4a08      	ldr	r2, [pc, #32]	; (8004198 <HAL_MspInit+0x44>)
 8004178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800417c:	61d3      	str	r3, [r2, #28]
 800417e:	4b06      	ldr	r3, [pc, #24]	; (8004198 <HAL_MspInit+0x44>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800418a:	bf00      	nop
 800418c:	370c      	adds	r7, #12
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000

0800419c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08a      	sub	sp, #40	; 0x28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a4:	f107 0314 	add.w	r3, r7, #20
 80041a8:	2200      	movs	r2, #0
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	605a      	str	r2, [r3, #4]
 80041ae:	609a      	str	r2, [r3, #8]
 80041b0:	60da      	str	r2, [r3, #12]
 80041b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041bc:	d13c      	bne.n	8004238 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041be:	4b20      	ldr	r3, [pc, #128]	; (8004240 <HAL_ADC_MspInit+0xa4>)
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	4a1f      	ldr	r2, [pc, #124]	; (8004240 <HAL_ADC_MspInit+0xa4>)
 80041c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c8:	6153      	str	r3, [r2, #20]
 80041ca:	4b1d      	ldr	r3, [pc, #116]	; (8004240 <HAL_ADC_MspInit+0xa4>)
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041d6:	4b1a      	ldr	r3, [pc, #104]	; (8004240 <HAL_ADC_MspInit+0xa4>)
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	4a19      	ldr	r2, [pc, #100]	; (8004240 <HAL_ADC_MspInit+0xa4>)
 80041dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041e0:	6153      	str	r3, [r2, #20]
 80041e2:	4b17      	ldr	r3, [pc, #92]	; (8004240 <HAL_ADC_MspInit+0xa4>)
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ee:	4b14      	ldr	r3, [pc, #80]	; (8004240 <HAL_ADC_MspInit+0xa4>)
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	4a13      	ldr	r2, [pc, #76]	; (8004240 <HAL_ADC_MspInit+0xa4>)
 80041f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041f8:	6153      	str	r3, [r2, #20]
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <HAL_ADC_MspInit+0xa4>)
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN8
    PC3     ------> ADC1_IN9
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = I_V_Pin|I_W_Pin|Temp__Sens__Pin|IHM09SPEED_VR_Pin;
 8004206:	230f      	movs	r3, #15
 8004208:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800420a:	2303      	movs	r3, #3
 800420c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800420e:	2300      	movs	r3, #0
 8004210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004212:	f107 0314 	add.w	r3, r7, #20
 8004216:	4619      	mov	r1, r3
 8004218:	480a      	ldr	r0, [pc, #40]	; (8004244 <HAL_ADC_MspInit+0xa8>)
 800421a:	f7fc fe8d 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_U_Pin|V_DC_Pin;
 800421e:	2303      	movs	r3, #3
 8004220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004222:	2303      	movs	r3, #3
 8004224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004226:	2300      	movs	r3, #0
 8004228:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800422a:	f107 0314 	add.w	r3, r7, #20
 800422e:	4619      	mov	r1, r3
 8004230:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004234:	f7fc fe80 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004238:	bf00      	nop
 800423a:	3728      	adds	r7, #40	; 0x28
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	40021000 	.word	0x40021000
 8004244:	48000800 	.word	0x48000800

08004248 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08a      	sub	sp, #40	; 0x28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004250:	f107 0314 	add.w	r3, r7, #20
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]
 800425a:	609a      	str	r2, [r3, #8]
 800425c:	60da      	str	r2, [r3, #12]
 800425e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a19      	ldr	r2, [pc, #100]	; (80042cc <HAL_DAC_MspInit+0x84>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d12c      	bne.n	80042c4 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800426a:	4b19      	ldr	r3, [pc, #100]	; (80042d0 <HAL_DAC_MspInit+0x88>)
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	4a18      	ldr	r2, [pc, #96]	; (80042d0 <HAL_DAC_MspInit+0x88>)
 8004270:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004274:	61d3      	str	r3, [r2, #28]
 8004276:	4b16      	ldr	r3, [pc, #88]	; (80042d0 <HAL_DAC_MspInit+0x88>)
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800427e:	613b      	str	r3, [r7, #16]
 8004280:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004282:	4b13      	ldr	r3, [pc, #76]	; (80042d0 <HAL_DAC_MspInit+0x88>)
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	4a12      	ldr	r2, [pc, #72]	; (80042d0 <HAL_DAC_MspInit+0x88>)
 8004288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800428c:	6153      	str	r3, [r2, #20]
 800428e:	4b10      	ldr	r3, [pc, #64]	; (80042d0 <HAL_DAC_MspInit+0x88>)
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004296:	60fb      	str	r3, [r7, #12]
 8004298:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800429a:	2310      	movs	r3, #16
 800429c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800429e:	2303      	movs	r3, #3
 80042a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a6:	f107 0314 	add.w	r3, r7, #20
 80042aa:	4619      	mov	r1, r3
 80042ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042b0:	f7fc fe42 	bl	8000f38 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80042b4:	2200      	movs	r2, #0
 80042b6:	2100      	movs	r1, #0
 80042b8:	2036      	movs	r0, #54	; 0x36
 80042ba:	f7fc fd5c 	bl	8000d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80042be:	2036      	movs	r0, #54	; 0x36
 80042c0:	f7fc fd75 	bl	8000dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80042c4:	bf00      	nop
 80042c6:	3728      	adds	r7, #40	; 0x28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40007400 	.word	0x40007400
 80042d0:	40021000 	.word	0x40021000

080042d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	; 0x28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042dc:	f107 0314 	add.w	r3, r7, #20
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	60da      	str	r2, [r3, #12]
 80042ea:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a24      	ldr	r2, [pc, #144]	; (8004384 <HAL_TIM_Base_MspInit+0xb0>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d129      	bne.n	800434a <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042f6:	4b24      	ldr	r3, [pc, #144]	; (8004388 <HAL_TIM_Base_MspInit+0xb4>)
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	4a23      	ldr	r2, [pc, #140]	; (8004388 <HAL_TIM_Base_MspInit+0xb4>)
 80042fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004300:	6193      	str	r3, [r2, #24]
 8004302:	4b21      	ldr	r3, [pc, #132]	; (8004388 <HAL_TIM_Base_MspInit+0xb4>)
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800430a:	613b      	str	r3, [r7, #16]
 800430c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800430e:	4b1e      	ldr	r3, [pc, #120]	; (8004388 <HAL_TIM_Base_MspInit+0xb4>)
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	4a1d      	ldr	r2, [pc, #116]	; (8004388 <HAL_TIM_Base_MspInit+0xb4>)
 8004314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004318:	6153      	str	r3, [r2, #20]
 800431a:	4b1b      	ldr	r3, [pc, #108]	; (8004388 <HAL_TIM_Base_MspInit+0xb4>)
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PB12     ------> TIM1_BKIN 
    */
    GPIO_InitStruct.Pin = KILL_Pin;
 8004326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800432a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432c:	2302      	movs	r3, #2
 800432e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004330:	2300      	movs	r3, #0
 8004332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004334:	2300      	movs	r3, #0
 8004336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004338:	2306      	movs	r3, #6
 800433a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(KILL_GPIO_Port, &GPIO_InitStruct);
 800433c:	f107 0314 	add.w	r3, r7, #20
 8004340:	4619      	mov	r1, r3
 8004342:	4812      	ldr	r0, [pc, #72]	; (800438c <HAL_TIM_Base_MspInit+0xb8>)
 8004344:	f7fc fdf8 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004348:	e018      	b.n	800437c <HAL_TIM_Base_MspInit+0xa8>
  else if(htim_base->Instance==TIM6)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a10      	ldr	r2, [pc, #64]	; (8004390 <HAL_TIM_Base_MspInit+0xbc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d113      	bne.n	800437c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004354:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <HAL_TIM_Base_MspInit+0xb4>)
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	4a0b      	ldr	r2, [pc, #44]	; (8004388 <HAL_TIM_Base_MspInit+0xb4>)
 800435a:	f043 0310 	orr.w	r3, r3, #16
 800435e:	61d3      	str	r3, [r2, #28]
 8004360:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_TIM_Base_MspInit+0xb4>)
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	60bb      	str	r3, [r7, #8]
 800436a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800436c:	2200      	movs	r2, #0
 800436e:	2100      	movs	r1, #0
 8004370:	2036      	movs	r0, #54	; 0x36
 8004372:	f7fc fd00 	bl	8000d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004376:	2036      	movs	r0, #54	; 0x36
 8004378:	f7fc fd19 	bl	8000dae <HAL_NVIC_EnableIRQ>
}
 800437c:	bf00      	nop
 800437e:	3728      	adds	r7, #40	; 0x28
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40012c00 	.word	0x40012c00
 8004388:	40021000 	.word	0x40021000
 800438c:	48000400 	.word	0x48000400
 8004390:	40001000 	.word	0x40001000

08004394 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	; 0x28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800439c:	f107 0314 	add.w	r3, r7, #20
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043b4:	d146      	bne.n	8004444 <HAL_TIM_IC_MspInit+0xb0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80043b6:	4b25      	ldr	r3, [pc, #148]	; (800444c <HAL_TIM_IC_MspInit+0xb8>)
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	4a24      	ldr	r2, [pc, #144]	; (800444c <HAL_TIM_IC_MspInit+0xb8>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	61d3      	str	r3, [r2, #28]
 80043c2:	4b22      	ldr	r3, [pc, #136]	; (800444c <HAL_TIM_IC_MspInit+0xb8>)
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	613b      	str	r3, [r7, #16]
 80043cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ce:	4b1f      	ldr	r3, [pc, #124]	; (800444c <HAL_TIM_IC_MspInit+0xb8>)
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	4a1e      	ldr	r2, [pc, #120]	; (800444c <HAL_TIM_IC_MspInit+0xb8>)
 80043d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043d8:	6153      	str	r3, [r2, #20]
 80043da:	4b1c      	ldr	r3, [pc, #112]	; (800444c <HAL_TIM_IC_MspInit+0xb8>)
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043e6:	4b19      	ldr	r3, [pc, #100]	; (800444c <HAL_TIM_IC_MspInit+0xb8>)
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	4a18      	ldr	r2, [pc, #96]	; (800444c <HAL_TIM_IC_MspInit+0xb8>)
 80043ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f0:	6153      	str	r3, [r2, #20]
 80043f2:	4b16      	ldr	r3, [pc, #88]	; (800444c <HAL_TIM_IC_MspInit+0xb8>)
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = Z_Pin|B_Pin;
 80043fe:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8004402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004404:	2302      	movs	r3, #2
 8004406:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004408:	2301      	movs	r3, #1
 800440a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440c:	2300      	movs	r3, #0
 800440e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004410:	2301      	movs	r3, #1
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004414:	f107 0314 	add.w	r3, r7, #20
 8004418:	4619      	mov	r1, r3
 800441a:	480d      	ldr	r0, [pc, #52]	; (8004450 <HAL_TIM_IC_MspInit+0xbc>)
 800441c:	f7fc fd8c 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A_Pin;
 8004420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004424:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004426:	2302      	movs	r3, #2
 8004428:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800442a:	2301      	movs	r3, #1
 800442c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442e:	2300      	movs	r3, #0
 8004430:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004432:	2301      	movs	r3, #1
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(A_GPIO_Port, &GPIO_InitStruct);
 8004436:	f107 0314 	add.w	r3, r7, #20
 800443a:	4619      	mov	r1, r3
 800443c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004440:	f7fc fd7a 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004444:	bf00      	nop
 8004446:	3728      	adds	r7, #40	; 0x28
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40021000 	.word	0x40021000
 8004450:	48000400 	.word	0x48000400

08004454 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	; 0x28
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800445c:	f107 0314 	add.w	r3, r7, #20
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	60da      	str	r2, [r3, #12]
 800446a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a20      	ldr	r2, [pc, #128]	; (80044f4 <HAL_TIM_MspPostInit+0xa0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d139      	bne.n	80044ea <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004476:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_TIM_MspPostInit+0xa4>)
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <HAL_TIM_MspPostInit+0xa4>)
 800447c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004480:	6153      	str	r3, [r2, #20]
 8004482:	4b1d      	ldr	r3, [pc, #116]	; (80044f8 <HAL_TIM_MspPostInit+0xa4>)
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800448a:	613b      	str	r3, [r7, #16]
 800448c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800448e:	4b1a      	ldr	r3, [pc, #104]	; (80044f8 <HAL_TIM_MspPostInit+0xa4>)
 8004490:	695b      	ldr	r3, [r3, #20]
 8004492:	4a19      	ldr	r2, [pc, #100]	; (80044f8 <HAL_TIM_MspPostInit+0xa4>)
 8004494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004498:	6153      	str	r3, [r2, #20]
 800449a:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <HAL_TIM_MspPostInit+0xa4>)
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
    PB1     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = U_L_Pin|U_H_Pin|V_H_Pin|W_H_Pin;
 80044a6:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80044aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ac:	2302      	movs	r3, #2
 80044ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b0:	2300      	movs	r3, #0
 80044b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b4:	2300      	movs	r3, #0
 80044b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80044b8:	2306      	movs	r3, #6
 80044ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044bc:	f107 0314 	add.w	r3, r7, #20
 80044c0:	4619      	mov	r1, r3
 80044c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044c6:	f7fc fd37 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_L_Pin|W_L_Pin;
 80044ca:	2303      	movs	r3, #3
 80044cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ce:	2302      	movs	r3, #2
 80044d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d6:	2300      	movs	r3, #0
 80044d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80044da:	2306      	movs	r3, #6
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044de:	f107 0314 	add.w	r3, r7, #20
 80044e2:	4619      	mov	r1, r3
 80044e4:	4805      	ldr	r0, [pc, #20]	; (80044fc <HAL_TIM_MspPostInit+0xa8>)
 80044e6:	f7fc fd27 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80044ea:	bf00      	nop
 80044ec:	3728      	adds	r7, #40	; 0x28
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	40012c00 	.word	0x40012c00
 80044f8:	40021000 	.word	0x40021000
 80044fc:	48000400 	.word	0x48000400

08004500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800450e:	b480      	push	{r7}
 8004510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004512:	e7fe      	b.n	8004512 <HardFault_Handler+0x4>

08004514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004518:	e7fe      	b.n	8004518 <MemManage_Handler+0x4>

0800451a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800451a:	b480      	push	{r7}
 800451c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800451e:	e7fe      	b.n	800451e <BusFault_Handler+0x4>

08004520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004524:	e7fe      	b.n	8004524 <UsageFault_Handler+0x4>

08004526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004526:	b480      	push	{r7}
 8004528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800452a:	bf00      	nop
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004538:	bf00      	nop
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004542:	b480      	push	{r7}
 8004544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004546:	bf00      	nop
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004554:	f7fb fe7e 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004558:	bf00      	nop
 800455a:	bd80      	pop	{r7, pc}

0800455c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004560:	4803      	ldr	r0, [pc, #12]	; (8004570 <TIM6_DAC_IRQHandler+0x14>)
 8004562:	f7fe fa0a 	bl	800297a <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 8004566:	4803      	ldr	r0, [pc, #12]	; (8004574 <TIM6_DAC_IRQHandler+0x18>)
 8004568:	f7fc fc67 	bl	8000e3a <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800456c:	bf00      	nop
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000094 	.word	0x20000094
 8004574:	20000080 	.word	0x20000080

08004578 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800457c:	4b1f      	ldr	r3, [pc, #124]	; (80045fc <SystemInit+0x84>)
 800457e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004582:	4a1e      	ldr	r2, [pc, #120]	; (80045fc <SystemInit+0x84>)
 8004584:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004588:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800458c:	4b1c      	ldr	r3, [pc, #112]	; (8004600 <SystemInit+0x88>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a1b      	ldr	r2, [pc, #108]	; (8004600 <SystemInit+0x88>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004598:	4b19      	ldr	r3, [pc, #100]	; (8004600 <SystemInit+0x88>)
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	4918      	ldr	r1, [pc, #96]	; (8004600 <SystemInit+0x88>)
 800459e:	4b19      	ldr	r3, [pc, #100]	; (8004604 <SystemInit+0x8c>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80045a4:	4b16      	ldr	r3, [pc, #88]	; (8004600 <SystemInit+0x88>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a15      	ldr	r2, [pc, #84]	; (8004600 <SystemInit+0x88>)
 80045aa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80045ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80045b4:	4b12      	ldr	r3, [pc, #72]	; (8004600 <SystemInit+0x88>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a11      	ldr	r2, [pc, #68]	; (8004600 <SystemInit+0x88>)
 80045ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045be:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80045c0:	4b0f      	ldr	r3, [pc, #60]	; (8004600 <SystemInit+0x88>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	4a0e      	ldr	r2, [pc, #56]	; (8004600 <SystemInit+0x88>)
 80045c6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80045ca:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80045cc:	4b0c      	ldr	r3, [pc, #48]	; (8004600 <SystemInit+0x88>)
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	4a0b      	ldr	r2, [pc, #44]	; (8004600 <SystemInit+0x88>)
 80045d2:	f023 030f 	bic.w	r3, r3, #15
 80045d6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <SystemInit+0x88>)
 80045da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045dc:	4908      	ldr	r1, [pc, #32]	; (8004600 <SystemInit+0x88>)
 80045de:	4b0a      	ldr	r3, [pc, #40]	; (8004608 <SystemInit+0x90>)
 80045e0:	4013      	ands	r3, r2
 80045e2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <SystemInit+0x88>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80045ea:	4b04      	ldr	r3, [pc, #16]	; (80045fc <SystemInit+0x84>)
 80045ec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045f0:	609a      	str	r2, [r3, #8]
#endif
}
 80045f2:	bf00      	nop
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	e000ed00 	.word	0xe000ed00
 8004600:	40021000 	.word	0x40021000
 8004604:	f87fc00c 	.word	0xf87fc00c
 8004608:	ff00fccc 	.word	0xff00fccc

0800460c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800460c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004644 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004610:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004612:	e003      	b.n	800461c <LoopCopyDataInit>

08004614 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004614:	4b0c      	ldr	r3, [pc, #48]	; (8004648 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004616:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004618:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800461a:	3104      	adds	r1, #4

0800461c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800461c:	480b      	ldr	r0, [pc, #44]	; (800464c <LoopForever+0xa>)
	ldr	r3, =_edata
 800461e:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004620:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004622:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004624:	d3f6      	bcc.n	8004614 <CopyDataInit>
	ldr	r2, =_sbss
 8004626:	4a0b      	ldr	r2, [pc, #44]	; (8004654 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004628:	e002      	b.n	8004630 <LoopFillZerobss>

0800462a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800462a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800462c:	f842 3b04 	str.w	r3, [r2], #4

08004630 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004630:	4b09      	ldr	r3, [pc, #36]	; (8004658 <LoopForever+0x16>)
	cmp	r2, r3
 8004632:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004634:	d3f9      	bcc.n	800462a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004636:	f7ff ff9f 	bl	8004578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800463a:	f000 f811 	bl	8004660 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800463e:	f7ff fad3 	bl	8003be8 <main>

08004642 <LoopForever>:

LoopForever:
    b LoopForever
 8004642:	e7fe      	b.n	8004642 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004644:	20004000 	.word	0x20004000
	ldr	r3, =_sidata
 8004648:	08004708 	.word	0x08004708
	ldr	r0, =_sdata
 800464c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004650:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8004654:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8004658:	20000154 	.word	0x20000154

0800465c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800465c:	e7fe      	b.n	800465c <ADC1_IRQHandler>
	...

08004660 <__libc_init_array>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	4e0d      	ldr	r6, [pc, #52]	; (8004698 <__libc_init_array+0x38>)
 8004664:	4c0d      	ldr	r4, [pc, #52]	; (800469c <__libc_init_array+0x3c>)
 8004666:	1ba4      	subs	r4, r4, r6
 8004668:	10a4      	asrs	r4, r4, #2
 800466a:	2500      	movs	r5, #0
 800466c:	42a5      	cmp	r5, r4
 800466e:	d109      	bne.n	8004684 <__libc_init_array+0x24>
 8004670:	4e0b      	ldr	r6, [pc, #44]	; (80046a0 <__libc_init_array+0x40>)
 8004672:	4c0c      	ldr	r4, [pc, #48]	; (80046a4 <__libc_init_array+0x44>)
 8004674:	f000 f820 	bl	80046b8 <_init>
 8004678:	1ba4      	subs	r4, r4, r6
 800467a:	10a4      	asrs	r4, r4, #2
 800467c:	2500      	movs	r5, #0
 800467e:	42a5      	cmp	r5, r4
 8004680:	d105      	bne.n	800468e <__libc_init_array+0x2e>
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004688:	4798      	blx	r3
 800468a:	3501      	adds	r5, #1
 800468c:	e7ee      	b.n	800466c <__libc_init_array+0xc>
 800468e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004692:	4798      	blx	r3
 8004694:	3501      	adds	r5, #1
 8004696:	e7f2      	b.n	800467e <__libc_init_array+0x1e>
 8004698:	08004700 	.word	0x08004700
 800469c:	08004700 	.word	0x08004700
 80046a0:	08004700 	.word	0x08004700
 80046a4:	08004704 	.word	0x08004704

080046a8 <memset>:
 80046a8:	4402      	add	r2, r0
 80046aa:	4603      	mov	r3, r0
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d100      	bne.n	80046b2 <memset+0xa>
 80046b0:	4770      	bx	lr
 80046b2:	f803 1b01 	strb.w	r1, [r3], #1
 80046b6:	e7f9      	b.n	80046ac <memset+0x4>

080046b8 <_init>:
 80046b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ba:	bf00      	nop
 80046bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046be:	bc08      	pop	{r3}
 80046c0:	469e      	mov	lr, r3
 80046c2:	4770      	bx	lr

080046c4 <_fini>:
 80046c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046c6:	bf00      	nop
 80046c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ca:	bc08      	pop	{r3}
 80046cc:	469e      	mov	lr, r3
 80046ce:	4770      	bx	lr
